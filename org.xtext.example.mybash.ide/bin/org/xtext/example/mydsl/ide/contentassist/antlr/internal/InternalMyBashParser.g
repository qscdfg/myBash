/*
 * generated by Xtext 2.9.2
 */
parser grammar InternalMyBashParser;

options {
	tokenVocab=InternalMyBashLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyBashGrammarAccess;

}
@members {
	private MyBashGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("QuotationMark", "'\"'");
		tokenNameToValue.put("NumberSign", "'#'");
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("Apostrophe", "'\''");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("QuestionMark", "'?'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Tilde", "'~'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("NumberSignNumberSign", "'##'");
		tokenNameToValue.put("DollarSignLeftCurlyBracket", "'\\u0024{'");
		tokenNameToValue.put("PercentSignPercentSign", "'\%\%'");
		tokenNameToValue.put("PercentSignEqualsSign", "'\%='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("AmpersandEqualsSign", "'&='");
		tokenNameToValue.put("AmpersandGreaterThanSign", "'&>'");
		tokenNameToValue.put("LeftParenthesisLeftParenthesis", "'(('");
		tokenNameToValue.put("RightParenthesisRightParenthesis", "'))'");
		tokenNameToValue.put("AsteriskAsterisk", "'**'");
		tokenNameToValue.put("AsteriskEqualsSign", "'*='");
		tokenNameToValue.put("PlusSignPlusSign", "'++'");
		tokenNameToValue.put("PlusSignEqualsSign", "'+='");
		tokenNameToValue.put("CommaComma", "',,'");
		tokenNameToValue.put("HyphenMinusHyphenMinus", "'--'");
		tokenNameToValue.put("HyphenMinusEqualsSign", "'-='");
		tokenNameToValue.put("SolidusSolidus", "'//'");
		tokenNameToValue.put("SolidusEqualsSign", "'/='");
		tokenNameToValue.put("ColonPlusSign", "':+'");
		tokenNameToValue.put("ColonHyphenMinus", "':-'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("ColonQuestionMark", "':?'");
		tokenNameToValue.put("SemicolonAmpersand", "';&'");
		tokenNameToValue.put("SemicolonSemicolon", "';;'");
		tokenNameToValue.put("LessThanSignAmpersand", "'<&'");
		tokenNameToValue.put("LessThanSignLeftParenthesis", "'<('");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("LessThanSignVerticalLine", "'<|'");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("EqualsSignTilde", "'=~'");
		tokenNameToValue.put("GreaterThanSignAmpersand", "'>&'");
		tokenNameToValue.put("GreaterThanSignLeftParenthesis", "'>('");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("GreaterThanSignVerticalLine", "'>|'");
		tokenNameToValue.put("LeftSquareBracketLeftSquareBracket", "'[['");
		tokenNameToValue.put("RightSquareBracketRightSquareBracket", "']]'");
		tokenNameToValue.put("CircumflexAccentEqualsSign", "'^='");
		tokenNameToValue.put("CircumflexAccentCircumflexAccent", "'^^'");
		tokenNameToValue.put("Do", "'do'");
		tokenNameToValue.put("Fi", "'fi'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("In", "'in'");
		tokenNameToValue.put("VerticalLineAmpersand", "'|&'");
		tokenNameToValue.put("VerticalLineEqualsSign", "'|='");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("DollarSignLeftParenthesisLeftParenthesis", "'\\u0024(('");
		tokenNameToValue.put("AmpersandGreaterThanSignGreaterThanSign", "'&>>'");
		tokenNameToValue.put("SemicolonSemicolonAmpersand", "';;&'");
		tokenNameToValue.put("LessThanSignLessThanSignEqualsSign", "'<<='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSignEqualsSign", "'>>='");
		tokenNameToValue.put("For", "'for'");
		tokenNameToValue.put("Case", "'case'");
		tokenNameToValue.put("Done", "'done'");
		tokenNameToValue.put("Elif", "'elif'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Esac", "'esac'");
		tokenNameToValue.put("Then", "'then'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Function", "'function'");
	}

	public void setGrammarAccess(MyBashGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleBash
entryRuleBash
:
{ before(grammarAccess.getBashRule()); }
	 ruleBash
{ after(grammarAccess.getBashRule()); } 
	 EOF 
;

// Rule Bash
ruleBash 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBashAccess().getAlternatives()); }
		(rule__Bash__Alternatives)
		{ after(grammarAccess.getBashAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompoundList
entryRuleCompoundList
:
{ before(grammarAccess.getCompoundListRule()); }
	 ruleCompoundList
{ after(grammarAccess.getCompoundListRule()); } 
	 EOF 
;

// Rule CompoundList
ruleCompoundList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompoundListAccess().getGroup()); }
		(rule__CompoundList__Group__0)
		{ after(grammarAccess.getCompoundListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleList
entryRuleSimpleList
:
{ before(grammarAccess.getSimpleListRule()); }
	 ruleSimpleList
{ after(grammarAccess.getSimpleListRule()); } 
	 EOF 
;

// Rule SimpleList
ruleSimpleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleListAccess().getGroup()); }
		(rule__SimpleList__Group__0)
		{ after(grammarAccess.getSimpleListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePipelineCommand
entryRulePipelineCommand
:
{ before(grammarAccess.getPipelineCommandRule()); }
	 rulePipelineCommand
{ after(grammarAccess.getPipelineCommandRule()); } 
	 EOF 
;

// Rule PipelineCommand
rulePipelineCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPipelineCommandAccess().getAlternatives()); }
		(rule__PipelineCommand__Alternatives)
		{ after(grammarAccess.getPipelineCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePipeline
entryRulePipeline
:
{ before(grammarAccess.getPipelineRule()); }
	 rulePipeline
{ after(grammarAccess.getPipelineRule()); } 
	 EOF 
;

// Rule Pipeline
rulePipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPipelineAccess().getGroup()); }
		(rule__Pipeline__Group__0)
		{ after(grammarAccess.getPipelineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDefine
entryRuleFunctionDefine
:
{ before(grammarAccess.getFunctionDefineRule()); }
	 ruleFunctionDefine
{ after(grammarAccess.getFunctionDefineRule()); } 
	 EOF 
;

// Rule FunctionDefine
ruleFunctionDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getAlternatives()); }
		(rule__FunctionDefine__Alternatives)
		{ after(grammarAccess.getFunctionDefineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleCommand
entryRuleSimpleCommand
:
{ before(grammarAccess.getSimpleCommandRule()); }
	 ruleSimpleCommand
{ after(grammarAccess.getSimpleCommandRule()); } 
	 EOF 
;

// Rule SimpleCommand
ruleSimpleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getAlternatives()); }
		(rule__SimpleCommand__Alternatives)
		{ after(grammarAccess.getSimpleCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShellCommand
entryRuleShellCommand
:
{ before(grammarAccess.getShellCommandRule()); }
	 ruleShellCommand
{ after(grammarAccess.getShellCommandRule()); } 
	 EOF 
;

// Rule ShellCommand
ruleShellCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShellCommandAccess().getAlternatives()); }
		(rule__ShellCommand__Alternatives)
		{ after(grammarAccess.getShellCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroupCommand
entryRuleGroupCommand
:
{ before(grammarAccess.getGroupCommandRule()); }
	 ruleGroupCommand
{ after(grammarAccess.getGroupCommandRule()); } 
	 EOF 
;

// Rule GroupCommand
ruleGroupCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupCommandAccess().getGroup()); }
		(rule__GroupCommand__Group__0)
		{ after(grammarAccess.getGroupCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondCommand
entryRuleCondCommand
:
{ before(grammarAccess.getCondCommandRule()); }
	 ruleCondCommand
{ after(grammarAccess.getCondCommandRule()); } 
	 EOF 
;

// Rule CondCommand
ruleCondCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondCommandAccess().getGroup()); }
		(rule__CondCommand__Group__0)
		{ after(grammarAccess.getCondCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticCommand
entryRuleArithmeticCommand
:
{ before(grammarAccess.getArithmeticCommandRule()); }
	 ruleArithmeticCommand
{ after(grammarAccess.getArithmeticCommandRule()); } 
	 EOF 
;

// Rule ArithmeticCommand
ruleArithmeticCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticCommandAccess().getGroup()); }
		(rule__ArithmeticCommand__Group__0)
		{ after(grammarAccess.getArithmeticCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubshell
entryRuleSubshell
:
{ before(grammarAccess.getSubshellRule()); }
	 ruleSubshell
{ after(grammarAccess.getSubshellRule()); } 
	 EOF 
;

// Rule Subshell
ruleSubshell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubshellAccess().getGroup()); }
		(rule__Subshell__Group__0)
		{ after(grammarAccess.getSubshellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandName
entryRuleCommandName
:
{ before(grammarAccess.getCommandNameRule()); }
	 ruleCommandName
{ after(grammarAccess.getCommandNameRule()); } 
	 EOF 
;

// Rule CommandName
ruleCommandName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandNameAccess().getAlternatives()); }
		(rule__CommandName__Alternatives)
		{ after(grammarAccess.getCommandNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement
:
{ before(grammarAccess.getCaseStatementRule()); }
	 ruleCaseStatement
{ after(grammarAccess.getCaseStatementRule()); } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseStatementAccess().getGroup()); }
		(rule__CaseStatement__Group__0)
		{ after(grammarAccess.getCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCasePattern
entryRuleCasePattern
:
{ before(grammarAccess.getCasePatternRule()); }
	 ruleCasePattern
{ after(grammarAccess.getCasePatternRule()); } 
	 EOF 
;

// Rule CasePattern
ruleCasePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCasePatternAccess().getGroup()); }
		(rule__CasePattern__Group__0)
		{ after(grammarAccess.getCasePatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCasePatternContinue
entryRuleCasePatternContinue
:
{ before(grammarAccess.getCasePatternContinueRule()); }
	 ruleCasePatternContinue
{ after(grammarAccess.getCasePatternContinueRule()); } 
	 EOF 
;

// Rule CasePatternContinue
ruleCasePatternContinue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getGroup()); }
		(rule__CasePatternContinue__Group__0)
		{ after(grammarAccess.getCasePatternContinueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseIfBlock
entryRuleElseIfBlock
:
{ before(grammarAccess.getElseIfBlockRule()); }
	 ruleElseIfBlock
{ after(grammarAccess.getElseIfBlockRule()); } 
	 EOF 
;

// Rule ElseIfBlock
ruleElseIfBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseIfBlockAccess().getGroup()); }
		(rule__ElseIfBlock__Group__0)
		{ after(grammarAccess.getElseIfBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRedirection
entryRuleRedirection
:
{ before(grammarAccess.getRedirectionRule()); }
	 ruleRedirection
{ after(grammarAccess.getRedirectionRule()); } 
	 EOF 
;

// Rule Redirection
ruleRedirection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRedirectionAccess().getGroup()); }
		(rule__Redirection__Group__0)
		{ after(grammarAccess.getRedirectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArray
entryRuleArray
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayAccess().getGroup()); }
		(rule__Array__Group__0)
		{ after(grammarAccess.getArrayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayStart
entryRuleArrayStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getArrayStartRule()); }
	 ruleArrayStart
{ after(grammarAccess.getArrayStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ArrayStart
ruleArrayStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayStartAccess().getGroup()); }
		(rule__ArrayStart__Group__0)
		{ after(grammarAccess.getArrayStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArrayEnd
entryRuleArrayEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getArrayEndRule()); }
	 ruleArrayEnd
{ after(grammarAccess.getArrayEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ArrayEnd
ruleArrayEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayEndAccess().getRightParenthesisKeyword()); }
		RightParenthesis
		{ after(grammarAccess.getArrayEndAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordAccess().getAlternatives()); }
		(rule__Word__Alternatives)
		{ after(grammarAccess.getWordAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralWord
entryRuleLiteralWord
:
{ before(grammarAccess.getLiteralWordRule()); }
	 ruleLiteralWord
{ after(grammarAccess.getLiteralWordRule()); } 
	 EOF 
;

// Rule LiteralWord
ruleLiteralWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralWordAccess().getGroup()); }
		(rule__LiteralWord__Group__0)
		{ after(grammarAccess.getLiteralWordAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Assignment
ruleAssignment 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLAssignment
entryRuleLAssignment
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getLAssignmentRule()); }
	 ruleLAssignment
{ after(grammarAccess.getLAssignmentRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LAssignment
ruleLAssignment 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLAssignmentAccess().getGroup()); }
		(rule__LAssignment__Group__0)
		{ after(grammarAccess.getLAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignable
entryRuleAssignable
:
{ before(grammarAccess.getAssignableRule()); }
	 ruleAssignable
{ after(grammarAccess.getAssignableRule()); } 
	 EOF 
;

// Rule Assignable
ruleAssignable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignableAccess().getAlternatives()); }
		(rule__Assignable__Alternatives)
		{ after(grammarAccess.getAssignableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWords
entryRuleWords
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getWordsRule()); }
	 ruleWords
{ after(grammarAccess.getWordsRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Words
ruleWords 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getWordsAccess().getElementsAssignment()); }
			(rule__Words__ElementsAssignment)
			{ after(grammarAccess.getWordsAccess().getElementsAssignment()); }
		)
		(
			{ before(grammarAccess.getWordsAccess().getElementsAssignment()); }
			(rule__Words__ElementsAssignment)*
			{ after(grammarAccess.getWordsAccess().getElementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDQString
entryRuleDQString
:
{ before(grammarAccess.getDQStringRule()); }
	 ruleDQString
{ after(grammarAccess.getDQStringRule()); } 
	 EOF 
;

// Rule DQString
ruleDQString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDQStringAccess().getGroup()); }
		(rule__DQString__Group__0)
		{ after(grammarAccess.getDQStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpansion
entryRuleExpansion
:
{ before(grammarAccess.getExpansionRule()); }
	 ruleExpansion
{ after(grammarAccess.getExpansionRule()); } 
	 EOF 
;

// Rule Expansion
ruleExpansion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpansionAccess().getAlternatives()); }
		(rule__Expansion__Alternatives)
		{ after(grammarAccess.getExpansionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWordElement
entryRuleWordElement
:
{ before(grammarAccess.getWordElementRule()); }
	 ruleWordElement
{ after(grammarAccess.getWordElementRule()); } 
	 EOF 
;

// Rule WordElement
ruleWordElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordElementAccess().getAlternatives()); }
		(rule__WordElement__Alternatives)
		{ after(grammarAccess.getWordElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringElement
entryRuleStringElement
:
{ before(grammarAccess.getStringElementRule()); }
	 ruleStringElement
{ after(grammarAccess.getStringElementRule()); } 
	 EOF 
;

// Rule StringElement
ruleStringElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringElementAccess().getAlternatives()); }
		(rule__StringElement__Alternatives)
		{ after(grammarAccess.getStringElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralStringPart
entryRuleLiteralStringPart
:
{ before(grammarAccess.getLiteralStringPartRule()); }
	 ruleLiteralStringPart
{ after(grammarAccess.getLiteralStringPartRule()); } 
	 EOF 
;

// Rule LiteralStringPart
ruleLiteralStringPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralStringPartAccess().getGroup()); }
		(rule__LiteralStringPart__Group__0)
		{ after(grammarAccess.getLiteralStringPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralWordPart
entryRuleLiteralWordPart
:
{ before(grammarAccess.getLiteralWordPartRule()); }
	 ruleLiteralWordPart
{ after(grammarAccess.getLiteralWordPartRule()); } 
	 EOF 
;

// Rule LiteralWordPart
ruleLiteralWordPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getGroup()); }
		(rule__LiteralWordPart__Group__0)
		{ after(grammarAccess.getLiteralWordPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondOrAnd
entryRuleCondOrAnd
:
{ before(grammarAccess.getCondOrAndRule()); }
	 ruleCondOrAnd
{ after(grammarAccess.getCondOrAndRule()); } 
	 EOF 
;

// Rule CondOrAnd
ruleCondOrAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondOrAndAccess().getGroup()); }
		(rule__CondOrAnd__Group__0)
		{ after(grammarAccess.getCondOrAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondExp
entryRuleCondExp
:
{ before(grammarAccess.getCondExpRule()); }
	 ruleCondExp
{ after(grammarAccess.getCondExpRule()); } 
	 EOF 
;

// Rule CondExp
ruleCondExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondExpAccess().getAlternatives()); }
		(rule__CondExp__Alternatives)
		{ after(grammarAccess.getCondExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondConst
entryRuleCondConst
:
{ before(grammarAccess.getCondConstRule()); }
	 ruleCondConst
{ after(grammarAccess.getCondConstRule()); } 
	 EOF 
;

// Rule CondConst
ruleCondConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondConstAccess().getValueAssignment()); }
		(rule__CondConst__ValueAssignment)
		{ after(grammarAccess.getCondConstAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularExpression
entryRuleRegularExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getRegularExpressionRule()); }
	 ruleRegularExpression
{ after(grammarAccess.getRegularExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RegularExpression
ruleRegularExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getGroup()); }
		(rule__RegularExpression__Group__0)
		{ after(grammarAccess.getRegularExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleRegularElements
entryRuleRegularElements
:
{ before(grammarAccess.getRegularElementsRule()); }
	 ruleRegularElements
{ after(grammarAccess.getRegularElementsRule()); } 
	 EOF 
;

// Rule RegularElements
ruleRegularElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularElementsAccess().getGroup()); }
		(rule__RegularElements__Group__0)
		{ after(grammarAccess.getRegularElementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticExpansion
entryRuleArithmeticExpansion
:
{ before(grammarAccess.getArithmeticExpansionRule()); }
	 ruleArithmeticExpansion
{ after(grammarAccess.getArithmeticExpansionRule()); } 
	 EOF 
;

// Rule ArithmeticExpansion
ruleArithmeticExpansion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpansionAccess().getGroup()); }
		(rule__ArithmeticExpansion__Group__0)
		{ after(grammarAccess.getArithmeticExpansionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexEvaluation
entryRuleIndexEvaluation
:
{ before(grammarAccess.getIndexEvaluationRule()); }
	 ruleIndexEvaluation
{ after(grammarAccess.getIndexEvaluationRule()); } 
	 EOF 
;

// Rule IndexEvaluation
ruleIndexEvaluation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexEvaluationAccess().getGroup()); }
		(rule__IndexEvaluation__Group__0)
		{ after(grammarAccess.getIndexEvaluationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexEvaluationStart
entryRuleIndexEvaluationStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getIndexEvaluationStartRule()); }
	 ruleIndexEvaluationStart
{ after(grammarAccess.getIndexEvaluationStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IndexEvaluationStart
ruleIndexEvaluationStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexEvaluationStartAccess().getGroup()); }
		(rule__IndexEvaluationStart__Group__0)
		{ after(grammarAccess.getIndexEvaluationStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIndexEvaluationEnd
entryRuleIndexEvaluationEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getIndexEvaluationEndRule()); }
	 ruleIndexEvaluationEnd
{ after(grammarAccess.getIndexEvaluationEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IndexEvaluationEnd
ruleIndexEvaluationEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexEvaluationEndAccess().getRightSquareBracketKeyword()); }
		RightSquareBracket
		{ after(grammarAccess.getIndexEvaluationEndAccess().getRightSquareBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArithmeticExpansionStart
entryRuleArithmeticExpansionStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getArithmeticExpansionStartRule()); }
	 ruleArithmeticExpansionStart
{ after(grammarAccess.getArithmeticExpansionStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ArithmeticExpansionStart
ruleArithmeticExpansionStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpansionStartAccess().getGroup()); }
		(rule__ArithmeticExpansionStart__Group__0)
		{ after(grammarAccess.getArithmeticExpansionStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArithmeticExpansionEnd
entryRuleArithmeticExpansionEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getArithmeticExpansionEndRule()); }
	 ruleArithmeticExpansionEnd
{ after(grammarAccess.getArithmeticExpansionEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ArithmeticExpansionEnd
ruleArithmeticExpansionEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpansionEndAccess().getRightParenthesisRightParenthesisKeyword()); }
		RightParenthesisRightParenthesis
		{ after(grammarAccess.getArithmeticExpansionEndAccess().getRightParenthesisRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterExpansion
entryRuleParameterExpansion
:
{ before(grammarAccess.getParameterExpansionRule()); }
	 ruleParameterExpansion
{ after(grammarAccess.getParameterExpansionRule()); } 
	 EOF 
;

// Rule ParameterExpansion
ruleParameterExpansion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterExpansionAccess().getAlternatives()); }
		(rule__ParameterExpansion__Alternatives)
		{ after(grammarAccess.getParameterExpansionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterExpansionStart
entryRuleParameterExpansionStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getParameterExpansionStartRule()); }
	 ruleParameterExpansionStart
{ after(grammarAccess.getParameterExpansionStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ParameterExpansionStart
ruleParameterExpansionStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getGroup()); }
		(rule__ParameterExpansionStart__Group__0)
		{ after(grammarAccess.getParameterExpansionStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterExpansionEnd
entryRuleParameterExpansionEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getParameterExpansionEndRule()); }
	 ruleParameterExpansionEnd
{ after(grammarAccess.getParameterExpansionEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ParameterExpansionEnd
ruleParameterExpansionEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterExpansionEndAccess().getRightCurlyBracketKeyword()); }
		RightCurlyBracket
		{ after(grammarAccess.getParameterExpansionEndAccess().getRightCurlyBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterProcessor
entryRuleParameterProcessor
:
{ before(grammarAccess.getParameterProcessorRule()); }
	 ruleParameterProcessor
{ after(grammarAccess.getParameterProcessorRule()); } 
	 EOF 
;

// Rule ParameterProcessor
ruleParameterProcessor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getAlternatives()); }
		(rule__ParameterProcessor__Alternatives)
		{ after(grammarAccess.getParameterProcessorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandSubstitution
entryRuleCommandSubstitution
:
{ before(grammarAccess.getCommandSubstitutionRule()); }
	 ruleCommandSubstitution
{ after(grammarAccess.getCommandSubstitutionRule()); } 
	 EOF 
;

// Rule CommandSubstitution
ruleCommandSubstitution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandSubstitutionAccess().getGroup()); }
		(rule__CommandSubstitution__Group__0)
		{ after(grammarAccess.getCommandSubstitutionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandSubstitutionStart
entryRuleCommandSubstitutionStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getCommandSubstitutionStartRule()); }
	 ruleCommandSubstitutionStart
{ after(grammarAccess.getCommandSubstitutionStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandSubstitutionStart
ruleCommandSubstitutionStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandSubstitutionStartAccess().getGroup()); }
		(rule__CommandSubstitutionStart__Group__0)
		{ after(grammarAccess.getCommandSubstitutionStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCommandSubstitutionStartEnd
entryRuleCommandSubstitutionStartEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getCommandSubstitutionStartEndRule()); }
	 ruleCommandSubstitutionStartEnd
{ after(grammarAccess.getCommandSubstitutionStartEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandSubstitutionStartEnd
ruleCommandSubstitutionStartEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandSubstitutionStartEndAccess().getCS_ENDTerminalRuleCall()); }
		RULE_CS_END
		{ after(grammarAccess.getCommandSubstitutionStartEndAccess().getCS_ENDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleProcessSubstitution
entryRuleProcessSubstitution
:
{ before(grammarAccess.getProcessSubstitutionRule()); }
	 ruleProcessSubstitution
{ after(grammarAccess.getProcessSubstitutionRule()); } 
	 EOF 
;

// Rule ProcessSubstitution
ruleProcessSubstitution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessSubstitutionAccess().getGroup()); }
		(rule__ProcessSubstitution__Group__0)
		{ after(grammarAccess.getProcessSubstitutionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcessSubstitutionStart
entryRuleProcessSubstitutionStart
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
:
{ before(grammarAccess.getProcessSubstitutionStartRule()); }
	 ruleProcessSubstitutionStart
{ after(grammarAccess.getProcessSubstitutionStartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessSubstitutionStart
ruleProcessSubstitutionStart 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessSubstitutionStartAccess().getGroup()); }
		(rule__ProcessSubstitutionStart__Group__0)
		{ after(grammarAccess.getProcessSubstitutionStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleProcessSubstitutionEnd
entryRuleProcessSubstitutionEnd
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
:
{ before(grammarAccess.getProcessSubstitutionEndRule()); }
	 ruleProcessSubstitutionEnd
{ after(grammarAccess.getProcessSubstitutionEndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessSubstitutionEnd
ruleProcessSubstitutionEnd 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessSubstitutionEndAccess().getRightParenthesisKeyword()); }
		RightParenthesis
		{ after(grammarAccess.getProcessSubstitutionEndAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEvaluation
entryRuleEvaluation
:
{ before(grammarAccess.getEvaluationRule()); }
	 ruleEvaluation
{ after(grammarAccess.getEvaluationRule()); } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvaluationAccess().getGroup()); }
		(rule__Evaluation__Group__0)
		{ after(grammarAccess.getEvaluationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmetic
entryRuleArithmetic
:
{ before(grammarAccess.getArithmeticRule()); }
	 ruleArithmetic
{ after(grammarAccess.getArithmeticRule()); } 
	 EOF 
;

// Rule Arithmetic
ruleArithmetic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticAccess().getAlternatives()); }
		(rule__Arithmetic__Alternatives)
		{ after(grammarAccess.getArithmeticAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalOperator
entryRuleConditionalOperator
:
{ before(grammarAccess.getConditionalOperatorRule()); }
	 ruleConditionalOperator
{ after(grammarAccess.getConditionalOperatorRule()); } 
	 EOF 
;

// Rule ConditionalOperator
ruleConditionalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getGroup()); }
		(rule__ConditionalOperator__Group__0)
		{ after(grammarAccess.getConditionalOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicOr
entryRuleLogicOr
:
{ before(grammarAccess.getLogicOrRule()); }
	 ruleLogicOr
{ after(grammarAccess.getLogicOrRule()); } 
	 EOF 
;

// Rule LogicOr
ruleLogicOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicOrAccess().getGroup()); }
		(rule__LogicOr__Group__0)
		{ after(grammarAccess.getLogicOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicAnd
entryRuleLogicAnd
:
{ before(grammarAccess.getLogicAndRule()); }
	 ruleLogicAnd
{ after(grammarAccess.getLogicAndRule()); } 
	 EOF 
;

// Rule LogicAnd
ruleLogicAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicAndAccess().getGroup()); }
		(rule__LogicAnd__Group__0)
		{ after(grammarAccess.getLogicAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseOR
entryRuleBitwiseOR
:
{ before(grammarAccess.getBitwiseORRule()); }
	 ruleBitwiseOR
{ after(grammarAccess.getBitwiseORRule()); } 
	 EOF 
;

// Rule BitwiseOR
ruleBitwiseOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseORAccess().getGroup()); }
		(rule__BitwiseOR__Group__0)
		{ after(grammarAccess.getBitwiseORAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseExclusiveOR
entryRuleBitwiseExclusiveOR
:
{ before(grammarAccess.getBitwiseExclusiveORRule()); }
	 ruleBitwiseExclusiveOR
{ after(grammarAccess.getBitwiseExclusiveORRule()); } 
	 EOF 
;

// Rule BitwiseExclusiveOR
ruleBitwiseExclusiveOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseExclusiveORAccess().getGroup()); }
		(rule__BitwiseExclusiveOR__Group__0)
		{ after(grammarAccess.getBitwiseExclusiveORAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseAND
entryRuleBitwiseAND
:
{ before(grammarAccess.getBitwiseANDRule()); }
	 ruleBitwiseAND
{ after(grammarAccess.getBitwiseANDRule()); } 
	 EOF 
;

// Rule BitwiseAND
ruleBitwiseAND 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseANDAccess().getGroup()); }
		(rule__BitwiseAND__Group__0)
		{ after(grammarAccess.getBitwiseANDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityAndInequality
entryRuleEqualityAndInequality
:
{ before(grammarAccess.getEqualityAndInequalityRule()); }
	 ruleEqualityAndInequality
{ after(grammarAccess.getEqualityAndInequalityRule()); } 
	 EOF 
;

// Rule EqualityAndInequality
ruleEqualityAndInequality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAndInequalityAccess().getGroup()); }
		(rule__EqualityAndInequality__Group__0)
		{ after(grammarAccess.getEqualityAndInequalityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitwiseShifts
entryRuleBitwiseShifts
:
{ before(grammarAccess.getBitwiseShiftsRule()); }
	 ruleBitwiseShifts
{ after(grammarAccess.getBitwiseShiftsRule()); } 
	 EOF 
;

// Rule BitwiseShifts
ruleBitwiseShifts 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitwiseShiftsAccess().getGroup()); }
		(rule__BitwiseShifts__Group__0)
		{ after(grammarAccess.getBitwiseShiftsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditionSubtraction
entryRuleAdditionSubtraction
:
{ before(grammarAccess.getAdditionSubtractionRule()); }
	 ruleAdditionSubtraction
{ after(grammarAccess.getAdditionSubtractionRule()); } 
	 EOF 
;

// Rule AdditionSubtraction
ruleAdditionSubtraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getGroup()); }
		(rule__AdditionSubtraction__Group__0)
		{ after(grammarAccess.getAdditionSubtractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationDivisionRemainder
entryRuleMultiplicationDivisionRemainder
:
{ before(grammarAccess.getMultiplicationDivisionRemainderRule()); }
	 ruleMultiplicationDivisionRemainder
{ after(grammarAccess.getMultiplicationDivisionRemainderRule()); } 
	 EOF 
;

// Rule MultiplicationDivisionRemainder
ruleMultiplicationDivisionRemainder 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup()); }
		(rule__MultiplicationDivisionRemainder__Group__0)
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentiation
entryRuleExponentiation
:
{ before(grammarAccess.getExponentiationRule()); }
	 ruleExponentiation
{ after(grammarAccess.getExponentiationRule()); } 
	 EOF 
;

// Rule Exponentiation
ruleExponentiation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentiationAccess().getGroup()); }
		(rule__Exponentiation__Group__0)
		{ after(grammarAccess.getExponentiationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalAndBitwiseNegation
entryRuleLogicalAndBitwiseNegation
:
{ before(grammarAccess.getLogicalAndBitwiseNegationRule()); }
	 ruleLogicalAndBitwiseNegation
{ after(grammarAccess.getLogicalAndBitwiseNegationRule()); } 
	 EOF 
;

// Rule LogicalAndBitwiseNegation
ruleLogicalAndBitwiseNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getAlternatives()); }
		(rule__LogicalAndBitwiseNegation__Alternatives)
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryMinusAndPlus
entryRuleUnaryMinusAndPlus
:
{ before(grammarAccess.getUnaryMinusAndPlusRule()); }
	 ruleUnaryMinusAndPlus
{ after(grammarAccess.getUnaryMinusAndPlusRule()); } 
	 EOF 
;

// Rule UnaryMinusAndPlus
ruleUnaryMinusAndPlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getAlternatives()); }
		(rule__UnaryMinusAndPlus__Alternatives)
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreDecrement
entryRulePreDecrement
:
{ before(grammarAccess.getPreDecrementRule()); }
	 rulePreDecrement
{ after(grammarAccess.getPreDecrementRule()); } 
	 EOF 
;

// Rule PreDecrement
rulePreDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreDecrementAccess().getAlternatives()); }
		(rule__PreDecrement__Alternatives)
		{ after(grammarAccess.getPreDecrementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostDecrement
entryRulePostDecrement
:
{ before(grammarAccess.getPostDecrementRule()); }
	 rulePostDecrement
{ after(grammarAccess.getPostDecrementRule()); } 
	 EOF 
;

// Rule PostDecrement
rulePostDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostDecrementAccess().getGroup()); }
		(rule__PostDecrement__Group__0)
		{ after(grammarAccess.getPostDecrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryItem
entryRulePrimaryItem
:
{ before(grammarAccess.getPrimaryItemRule()); }
	 rulePrimaryItem
{ after(grammarAccess.getPrimaryItemRule()); } 
	 EOF 
;

// Rule PrimaryItem
rulePrimaryItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getAlternatives()); }
		(rule__PrimaryItem__Alternatives)
		{ after(grammarAccess.getPrimaryItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableId
entryRuleVariableId
:
{ before(grammarAccess.getVariableIdRule()); }
	 ruleVariableId
{ after(grammarAccess.getVariableIdRule()); } 
	 EOF 
;

// Rule VariableId
ruleVariableId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableIdAccess().getGroup()); }
		(rule__VariableId__Group__0)
		{ after(grammarAccess.getVariableIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getS_WORD_PARTTerminalRuleCall()); }
		RULE_S_WORD_PART
		{ after(grammarAccess.getFunctionNameAccess().getS_WORD_PARTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewLine
entryRuleNewLine
:
{ before(grammarAccess.getNewLineRule()); }
	 ruleNewLine
{ after(grammarAccess.getNewLineRule()); } 
	 EOF 
;

// Rule NewLine
ruleNewLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewLineAccess().getGroup()); }
		(rule__NewLine__Group__0)
		{ after(grammarAccess.getNewLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListTerminator
entryRuleListTerminator
:
{ before(grammarAccess.getListTerminatorRule()); }
	 ruleListTerminator
{ after(grammarAccess.getListTerminatorRule()); } 
	 EOF 
;

// Rule ListTerminator
ruleListTerminator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListTerminatorAccess().getAlternatives()); }
		(rule__ListTerminator__Alternatives)
		{ after(grammarAccess.getListTerminatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaybeNewLine
entryRuleMaybeNewLine
:
{ before(grammarAccess.getMaybeNewLineRule()); }
	 ruleMaybeNewLine
{ after(grammarAccess.getMaybeNewLineRule()); } 
	 EOF 
;

// Rule MaybeNewLine
ruleMaybeNewLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaybeNewLineAccess().getNewLineParserRuleCall()); }
		(ruleNewLine)?
		{ after(grammarAccess.getMaybeNewLineAccess().getNewLineParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHereDoc
entryRuleHereDoc
:
{ before(grammarAccess.getHereDocRule()); }
	 ruleHereDoc
{ after(grammarAccess.getHereDocRule()); } 
	 EOF 
;

// Rule HereDoc
ruleHereDoc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHereDocAccess().getGroup()); }
		(rule__HereDoc__Group__0)
		{ after(grammarAccess.getHereDocAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FollowWordOp
ruleFollowWordOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowWordOpAccess().getAlternatives()); }
		(rule__FollowWordOp__Alternatives)
		{ after(grammarAccess.getFollowWordOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getGroup_0()); }
		(rule__Bash__Group_0__0)
		{ after(grammarAccess.getBashAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBashAccess().getGroup_1()); }
		(rule__Bash__Group_1__0)
		{ after(grammarAccess.getBashAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getErrorAssignment_1_1_0()); }
		(rule__Bash__ErrorAssignment_1_1_0)
		{ after(grammarAccess.getBashAccess().getErrorAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBashAccess().getErrorAssignment_1_1_1()); }
		(rule__Bash__ErrorAssignment_1_1_1)
		{ after(grammarAccess.getBashAccess().getErrorAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getGroup_1_1_0()); }
		(rule__SimpleList__Group_1_1_0__0)
		{ after(grammarAccess.getSimpleListAccess().getGroup_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_1()); }
		(rule__SimpleList__OpAssignment_1_1_1)
		{ after(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__OpAlternatives_1_1_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getOpAmpersandAmpersandKeyword_1_1_0_0_0_0()); }
		AmpersandAmpersand
		{ after(grammarAccess.getSimpleListAccess().getOpAmpersandAmpersandKeyword_1_1_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleListAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1()); }
		VerticalLineVerticalLine
		{ after(grammarAccess.getSimpleListAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__OpAlternatives_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getOpAmpersandKeyword_1_1_1_0_0()); }
		Ampersand
		{ after(grammarAccess.getSimpleListAccess().getOpAmpersandKeyword_1_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleListAccess().getOpSemicolonKeyword_1_1_1_0_1()); }
		Semicolon
		{ after(grammarAccess.getSimpleListAccess().getOpSemicolonKeyword_1_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getBackendAssignment_2_0()); }
		(rule__SimpleList__BackendAssignment_2_0)
		{ after(grammarAccess.getSimpleListAccess().getBackendAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleListAccess().getSemicolonKeyword_2_1()); }
		Semicolon
		{ after(grammarAccess.getSimpleListAccess().getSemicolonKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineCommandAccess().getGroup_0()); }
		(rule__PipelineCommand__Group_0__0)
		{ after(grammarAccess.getPipelineCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPipelineCommandAccess().getPipelineParserRuleCall_1()); }
		rulePipeline
		{ after(grammarAccess.getPipelineCommandAccess().getPipelineParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getOpVerticalLineKeyword_1_1_0_0()); }
		VerticalLine
		{ after(grammarAccess.getPipelineAccess().getOpVerticalLineKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPipelineAccess().getOpVerticalLineAmpersandKeyword_1_1_0_1()); }
		VerticalLineAmpersand
		{ after(grammarAccess.getPipelineAccess().getOpVerticalLineAmpersandKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getFunctionDefineParserRuleCall_0()); }
		ruleFunctionDefine
		{ after(grammarAccess.getCommandAccess().getFunctionDefineParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_1()); }
		ruleSimpleCommand
		{ after(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_2()); }
		(rule__Command__Group_2__0)
		{ after(grammarAccess.getCommandAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getGroup_0()); }
		(rule__FunctionDefine__Group_0__0)
		{ after(grammarAccess.getFunctionDefineAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefineAccess().getGroup_1()); }
		(rule__FunctionDefine__Group_1__0)
		{ after(grammarAccess.getFunctionDefineAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getGroup_0()); }
		(rule__SimpleCommand__Group_0__0)
		{ after(grammarAccess.getSimpleCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getGroup_1()); }
		(rule__SimpleCommand__Group_1__0)
		{ after(grammarAccess.getSimpleCommandAccess().getGroup_1()); }
	)
	|
	(
		(
			{ before(grammarAccess.getSimpleCommandAccess().getRAssignment_2()); }
			(rule__SimpleCommand__RAssignment_2)
			{ after(grammarAccess.getSimpleCommandAccess().getRAssignment_2()); }
		)
		(
			{ before(grammarAccess.getSimpleCommandAccess().getRAssignment_2()); }
			(rule__SimpleCommand__RAssignment_2)*
			{ after(grammarAccess.getSimpleCommandAccess().getRAssignment_2()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Alternatives_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersAssignment_0_1_1_0()); }
		(rule__SimpleCommand__ParametersAssignment_0_1_1_0)
		{ after(grammarAccess.getSimpleCommandAccess().getParametersAssignment_0_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getRAssignment_0_1_1_1()); }
		(rule__SimpleCommand__RAssignment_0_1_1_1)
		{ after(grammarAccess.getSimpleCommandAccess().getRAssignment_0_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersAssignment_1_1_0()); }
		(rule__SimpleCommand__ParametersAssignment_1_1_0)
		{ after(grammarAccess.getSimpleCommandAccess().getParametersAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getRAssignment_1_1_1()); }
		(rule__SimpleCommand__RAssignment_1_1_1)
		{ after(grammarAccess.getSimpleCommandAccess().getRAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__ParametersAlternatives_1_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_1_1_0_0_0()); }
		ruleWord
		{ after(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_1_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersLAssignmentParserRuleCall_1_1_0_0_1()); }
		ruleLAssignment
		{ after(grammarAccess.getSimpleCommandAccess().getParametersLAssignmentParserRuleCall_1_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShellCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShellCommandAccess().getGroupCommandParserRuleCall_0()); }
		ruleGroupCommand
		{ after(grammarAccess.getShellCommandAccess().getGroupCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getIfStatementParserRuleCall_1()); }
		ruleIfStatement
		{ after(grammarAccess.getShellCommandAccess().getIfStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getWhileStatementParserRuleCall_2()); }
		ruleWhileStatement
		{ after(grammarAccess.getShellCommandAccess().getWhileStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getForStatementParserRuleCall_3()); }
		ruleForStatement
		{ after(grammarAccess.getShellCommandAccess().getForStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getCaseStatementParserRuleCall_4()); }
		ruleCaseStatement
		{ after(grammarAccess.getShellCommandAccess().getCaseStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getSubshellParserRuleCall_5()); }
		ruleSubshell
		{ after(grammarAccess.getShellCommandAccess().getSubshellParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getCondCommandParserRuleCall_6()); }
		ruleCondCommand
		{ after(grammarAccess.getShellCommandAccess().getCondCommandParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getShellCommandAccess().getArithmeticCommandParserRuleCall_7()); }
		ruleArithmeticCommand
		{ after(grammarAccess.getShellCommandAccess().getArithmeticCommandParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandNameAccess().getGroup_0()); }
		(rule__CommandName__Group_0__0)
		{ after(grammarAccess.getCommandNameAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandNameAccess().getWordsParserRuleCall_1()); }
		ruleWords
		{ after(grammarAccess.getCommandNameAccess().getWordsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Alternatives_6_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getSemicolonSemicolonKeyword_6_2_0_0()); }
		SemicolonSemicolon
		{ after(grammarAccess.getCaseStatementAccess().getSemicolonSemicolonKeyword_6_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCaseStatementAccess().getSemicolonAmpersandKeyword_6_2_0_1()); }
		SemicolonAmpersand
		{ after(grammarAccess.getCaseStatementAccess().getSemicolonAmpersandKeyword_6_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCaseStatementAccess().getSemicolonSemicolonAmpersandKeyword_6_2_0_2()); }
		SemicolonSemicolonAmpersand
		{ after(grammarAccess.getCaseStatementAccess().getSemicolonSemicolonAmpersandKeyword_6_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__FollowAlternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonKeyword_0_0_0_0()); }
		SemicolonSemicolon
		{ after(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonKeyword_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonAmpersandKeyword_0_0_0_1()); }
		SemicolonAmpersand
		{ after(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonAmpersandKeyword_0_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2()); }
		SemicolonSemicolonAmpersand
		{ after(grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup_1_0()); }
		(rule__ForStatement__Group_1_0__0)
		{ after(grammarAccess.getForStatementAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getForStatementAccess().getGroup_1_1()); }
		(rule__ForStatement__Group_1_1__0)
		{ after(grammarAccess.getForStatementAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getGroup_1_0()); }
		(rule__Redirection__Group_1_0__0)
		{ after(grammarAccess.getRedirectionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getGroup_1_1()); }
		(rule__Redirection__Group_1_1__0)
		{ after(grammarAccess.getRedirectionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getOpGreaterThanSignAmpersandKeyword_1_0_1_0_0()); }
		GreaterThanSignAmpersand
		{ after(grammarAccess.getRedirectionAccess().getOpGreaterThanSignAmpersandKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2()); }
		GreaterThanSignGreaterThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignKeyword_1_0_1_0_3()); }
		LessThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignKeyword_1_0_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignAmpersandKeyword_1_0_1_0_4()); }
		LessThanSignAmpersand
		{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignAmpersandKeyword_1_0_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5()); }
		AmpersandGreaterThanSignGreaterThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignKeyword_1_0_1_0_7()); }
		AmpersandGreaterThanSign
		{ after(grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignKeyword_1_0_1_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignVerticalLineKeyword_1_0_1_0_8()); }
		LessThanSignVerticalLine
		{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignVerticalLineKeyword_1_0_1_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9()); }
		GreaterThanSignVerticalLine
		{ after(grammarAccess.getRedirectionAccess().getOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Alternatives_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getTargetAssignment_1_0_2_0()); }
		(rule__Redirection__TargetAssignment_1_0_2_0)
		{ after(grammarAccess.getRedirectionAccess().getTargetAssignment_1_0_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_2_1()); }
		RULE_I_NUMBER
		{ after(grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getWordsParserRuleCall_0()); }
		ruleWords
		{ after(grammarAccess.getWordAccess().getWordsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWordAccess().getElementsAssignment_1()); }
		(rule__Word__ElementsAssignment_1)
		{ after(grammarAccess.getWordAccess().getElementsAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignableAccess().getWordParserRuleCall_0()); }
		ruleWord
		{ after(grammarAccess.getAssignableAccess().getWordParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignableAccess().getArrayParserRuleCall_1()); }
		ruleArray
		{ after(grammarAccess.getAssignableAccess().getArrayParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expansion__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpansionAccess().getParameterExpansionParserRuleCall_0()); }
		ruleParameterExpansion
		{ after(grammarAccess.getExpansionAccess().getParameterExpansionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpansionAccess().getCommandSubstitutionParserRuleCall_1()); }
		ruleCommandSubstitution
		{ after(grammarAccess.getExpansionAccess().getCommandSubstitutionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpansionAccess().getArithmeticExpansionParserRuleCall_2()); }
		ruleArithmeticExpansion
		{ after(grammarAccess.getExpansionAccess().getArithmeticExpansionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpansionAccess().getProcessSubstitutionParserRuleCall_3()); }
		ruleProcessSubstitution
		{ after(grammarAccess.getExpansionAccess().getProcessSubstitutionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordElementAccess().getLiteralWordPartParserRuleCall_0()); }
		(ruleLiteralWordPart)
		{ after(grammarAccess.getWordElementAccess().getLiteralWordPartParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWordElementAccess().getDQStringParserRuleCall_1()); }
		ruleDQString
		{ after(grammarAccess.getWordElementAccess().getDQStringParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getWordElementAccess().getExpansionParserRuleCall_2()); }
		ruleExpansion
		{ after(grammarAccess.getWordElementAccess().getExpansionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringElementAccess().getLiteralStringPartParserRuleCall_0()); }
		ruleLiteralStringPart
		{ after(grammarAccess.getStringElementAccess().getLiteralStringPartParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringElementAccess().getExpansionParserRuleCall_1()); }
		ruleExpansion
		{ after(grammarAccess.getStringElementAccess().getExpansionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_0()); }
		(rule__LiteralWordPart__ValuesAssignment_1_0_0)
		{ after(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_1()); }
		(rule__LiteralWordPart__Group_1_0_1__0)
		{ after(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_2()); }
		(rule__LiteralWordPart__Group_1_0_2__0)
		{ after(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondOrAndAccess().getVerticalLineVerticalLineKeyword_1_1_0()); }
		VerticalLineVerticalLine
		{ after(grammarAccess.getCondOrAndAccess().getVerticalLineVerticalLineKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCondOrAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }
		AmpersandAmpersand
		{ after(grammarAccess.getCondOrAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getGroup_0()); }
		(rule__CondExp__Group_0__0)
		{ after(grammarAccess.getCondExpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCondExpAccess().getGroup_1()); }
		(rule__CondExp__Group_1__0)
		{ after(grammarAccess.getCondExpAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCondExpAccess().getGroup_2()); }
		(rule__CondExp__Group_2__0)
		{ after(grammarAccess.getCondExpAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getGroup_1_1_1_0()); }
		(rule__CondExp__Group_1_1_1_0__0)
		{ after(grammarAccess.getCondExpAccess().getGroup_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCondExpAccess().getGroup_1_1_1_1()); }
		(rule__CondExp__Group_1_1_1_1__0)
		{ after(grammarAccess.getCondExpAccess().getGroup_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularElementsAccess().getGroup_1_0()); }
		(rule__RegularElements__Group_1_0__0)
		{ after(grammarAccess.getRegularElementsAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_1()); }
		(rule__RegularElements__PartsAssignment_1_1)
		{ after(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionAccess().getGroup_0()); }
		(rule__ParameterExpansion__Group_0__0)
		{ after(grammarAccess.getParameterExpansionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionAccess().getGroup_1()); }
		(rule__ParameterExpansion__Group_1__0)
		{ after(grammarAccess.getParameterExpansionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getRefAssignment_3_0()); }
		(rule__ParameterExpansionStart__RefAssignment_3_0)
		{ after(grammarAccess.getParameterExpansionStartAccess().getRefAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_1()); }
		(rule__ParameterExpansionStart__ValueAssignment_3_1)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_2()); }
		(rule__ParameterExpansionStart__ValueAssignment_3_2)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_3()); }
		(rule__ParameterExpansionStart__ValueAssignment_3_3)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_3()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_4()); }
		(rule__ParameterExpansionStart__ValueAssignment_3_4)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getCommercialAtKeyword_4_1_0()); }
		CommercialAt
		{ after(grammarAccess.getParameterExpansionStartAccess().getCommercialAtKeyword_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getAsteriskKeyword_4_1_1()); }
		Asterisk
		{ after(grammarAccess.getParameterExpansionStartAccess().getAsteriskKeyword_4_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getIndexAssignment_4_1_2()); }
		(rule__ParameterExpansionStart__IndexAssignment_4_1_2)
		{ after(grammarAccess.getParameterExpansionStartAccess().getIndexAssignment_4_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getGroup_0()); }
		(rule__ParameterProcessor__Group_0__0)
		{ after(grammarAccess.getParameterProcessorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getGroup_1()); }
		(rule__ParameterProcessor__Group_1__0)
		{ after(grammarAccess.getParameterProcessorAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getGroup_2()); }
		(rule__ParameterProcessor__Group_2__0)
		{ after(grammarAccess.getParameterProcessorAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getGroup_3()); }
		(rule__ParameterProcessor__Group_3__0)
		{ after(grammarAccess.getParameterProcessorAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getGroup_4()); }
		(rule__ParameterProcessor__Group_4__0)
		{ after(grammarAccess.getParameterProcessorAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_1_1_0_0()); }
		SolidusSolidus
		{ after(grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_1_1_0_1()); }
		Solidus
		{ after(grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OpAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_2_1_0_0()); }
		SolidusSolidus
		{ after(grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_2_1_0_1()); }
		Solidus
		{ after(grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__OpAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessSubstitutionStartAccess().getOpLessThanSignLeftParenthesisKeyword_0_0_0()); }
		LessThanSignLeftParenthesis
		{ after(grammarAccess.getProcessSubstitutionStartAccess().getOpLessThanSignLeftParenthesisKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcessSubstitutionStartAccess().getOpGreaterThanSignLeftParenthesisKeyword_0_0_1()); }
		GreaterThanSignLeftParenthesis
		{ after(grammarAccess.getProcessSubstitutionStartAccess().getOpGreaterThanSignLeftParenthesisKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getGroup_0()); }
		(rule__Arithmetic__Group_0__0)
		{ after(grammarAccess.getArithmeticAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getConditionalOperatorParserRuleCall_1()); }
		ruleConditionalOperator
		{ after(grammarAccess.getArithmeticAccess().getConditionalOperatorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__OpAlternatives_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getOpEqualsSignKeyword_0_2_0_0()); }
		EqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpEqualsSignKeyword_0_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpAsteriskEqualsSignKeyword_0_2_0_1()); }
		AsteriskEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpAsteriskEqualsSignKeyword_0_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpSolidusEqualsSignKeyword_0_2_0_2()); }
		SolidusEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpSolidusEqualsSignKeyword_0_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpPercentSignEqualsSignKeyword_0_2_0_3()); }
		PercentSignEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpPercentSignEqualsSignKeyword_0_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpPlusSignEqualsSignKeyword_0_2_0_4()); }
		PlusSignEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpPlusSignEqualsSignKeyword_0_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpHyphenMinusEqualsSignKeyword_0_2_0_5()); }
		HyphenMinusEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpHyphenMinusEqualsSignKeyword_0_2_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6()); }
		LessThanSignLessThanSignEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7()); }
		GreaterThanSignGreaterThanSignEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpAmpersandEqualsSignKeyword_0_2_0_8()); }
		AmpersandEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpAmpersandEqualsSignKeyword_0_2_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpCircumflexAccentEqualsSignKeyword_0_2_0_9()); }
		CircumflexAccentEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpCircumflexAccentEqualsSignKeyword_0_2_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getOpVerticalLineEqualsSignKeyword_0_2_0_10()); }
		VerticalLineEqualsSign
		{ after(grammarAccess.getArithmeticAccess().getOpVerticalLineEqualsSignKeyword_0_2_0_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAndInequalityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getEqualityAndInequalityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAndInequalityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getEqualityAndInequalityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_0()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_1()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_2()); }
		LessThanSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_3()); }
		GreaterThanSign
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseShiftsAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
		LessThanSignLessThanSign
		{ after(grammarAccess.getBitwiseShiftsAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBitwiseShiftsAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }
		GreaterThanSignGreaterThanSign
		{ after(grammarAccess.getBitwiseShiftsAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getOpPlusSignKeyword_1_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getAdditionSubtractionAccess().getOpPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getAdditionSubtractionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAsteriskKeyword_1_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpSolidusKeyword_1_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpPercentSignKeyword_1_1_0_2()); }
		PercentSign
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpPercentSignKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getGroup_0()); }
		(rule__LogicalAndBitwiseNegation__Group_0__0)
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getUnaryMinusAndPlusParserRuleCall_1()); }
		ruleUnaryMinusAndPlus
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getUnaryMinusAndPlusParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__OpAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpExclamationMarkKeyword_0_1_0_0()); }
		ExclamationMark
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpExclamationMarkKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpTildeKeyword_0_1_0_1()); }
		Tilde
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpTildeKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getGroup_0()); }
		(rule__UnaryMinusAndPlus__Group_0__0)
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getPrimaryItemParserRuleCall_1()); }
		rulePrimaryItem
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getPrimaryItemParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__OpAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOpPlusSignKeyword_0_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOpPlusSignKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDecrementAccess().getGroup_0()); }
		(rule__PreDecrement__Group_0__0)
		{ after(grammarAccess.getPreDecrementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreDecrementAccess().getPostDecrementParserRuleCall_1()); }
		rulePostDecrement
		{ after(grammarAccess.getPreDecrementAccess().getPostDecrementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__OpAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDecrementAccess().getOpPlusSignPlusSignKeyword_0_1_0_0()); }
		PlusSignPlusSign
		{ after(grammarAccess.getPreDecrementAccess().getOpPlusSignPlusSignKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_0_1_0_1()); }
		HyphenMinusHyphenMinus
		{ after(grammarAccess.getPreDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostDecrementAccess().getOpPlusSignPlusSignKeyword_1_1_0_0()); }
		PlusSignPlusSign
		{ after(grammarAccess.getPostDecrementAccess().getOpPlusSignPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPostDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinusHyphenMinus
		{ after(grammarAccess.getPostDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getGroup_0()); }
		(rule__PrimaryItem__Group_0__0)
		{ after(grammarAccess.getPrimaryItemAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryItemAccess().getGroup_1()); }
		(rule__PrimaryItem__Group_1__0)
		{ after(grammarAccess.getPrimaryItemAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryItemAccess().getGroup_2()); }
		(rule__PrimaryItem__Group_2__0)
		{ after(grammarAccess.getPrimaryItemAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryItemAccess().getPreDecrementParserRuleCall_3()); }
		rulePreDecrement
		{ after(grammarAccess.getPrimaryItemAccess().getPreDecrementParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTerminator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListTerminatorAccess().getNewLineParserRuleCall_0()); }
		ruleNewLine
		{ after(grammarAccess.getListTerminatorAccess().getNewLineParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getListTerminatorAccess().getSemicolonKeyword_1()); }
		Semicolon
		{ after(grammarAccess.getListTerminatorAccess().getSemicolonKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHereDocAccess().getHERE_DOC_PARTTerminalRuleCall_1_0()); }
		RULE_HERE_DOC_PART
		{ after(grammarAccess.getHereDocAccess().getHERE_DOC_PARTTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getHereDocAccess().getNEW_LINETerminalRuleCall_1_1()); }
		RULE_NEW_LINE
		{ after(grammarAccess.getHereDocAccess().getNEW_LINETerminalRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowWordOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowWordOpAccess().getGreedyRemoveSuffixEnumLiteralDeclaration_0()); }
		(PercentSignPercentSign)
		{ after(grammarAccess.getFollowWordOpAccess().getGreedyRemoveSuffixEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getRemoveSuffixEnumLiteralDeclaration_1()); }
		(PercentSign)
		{ after(grammarAccess.getFollowWordOpAccess().getRemoveSuffixEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getGreeyRemovePrefixEnumLiteralDeclaration_2()); }
		(NumberSignNumberSign)
		{ after(grammarAccess.getFollowWordOpAccess().getGreeyRemovePrefixEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getRemovePrefixEnumLiteralDeclaration_3()); }
		(NumberSign)
		{ after(grammarAccess.getFollowWordOpAccess().getRemovePrefixEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getGreedyLowercaseEnumLiteralDeclaration_4()); }
		(CommaComma)
		{ after(grammarAccess.getFollowWordOpAccess().getGreedyLowercaseEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getLowercaseEnumLiteralDeclaration_5()); }
		(Comma)
		{ after(grammarAccess.getFollowWordOpAccess().getLowercaseEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getGreedyUppercaseEnumLiteralDeclaration_6()); }
		(CircumflexAccentCircumflexAccent)
		{ after(grammarAccess.getFollowWordOpAccess().getGreedyUppercaseEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getUppercaseEnumLiteralDeclaration_7()); }
		(CircumflexAccent)
		{ after(grammarAccess.getFollowWordOpAccess().getUppercaseEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_8()); }
		(ColonPlusSign)
		{ after(grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_9()); }
		(PlusSign)
		{ after(grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_10()); }
		(ColonHyphenMinus)
		{ after(grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_11()); }
		(HyphenMinus)
		{ after(grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_12()); }
		(ColonEqualsSign)
		{ after(grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_13()); }
		(EqualsSign)
		{ after(grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_14()); }
		(ColonQuestionMark)
		{ after(grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_15()); }
		(QuestionMark)
		{ after(grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_15()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0__0__Impl
	rule__Bash__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getBashAction_0_0()); }
	()
	{ after(grammarAccess.getBashAccess().getBashAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0__1__Impl
	rule__Bash__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getGroup_0_2()); }
	(rule__Bash__Group_0_2__0)?
	{ after(grammarAccess.getBashAccess().getGroup_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bash__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0_2__0__Impl
	rule__Bash__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getCommandsAssignment_0_2_0()); }
	(rule__Bash__CommandsAssignment_0_2_0)
	{ after(grammarAccess.getBashAccess().getCommandsAssignment_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0_2__1__Impl
	rule__Bash__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getGroup_0_2_1()); }
	(rule__Bash__Group_0_2_1__0)*
	{ after(grammarAccess.getBashAccess().getGroup_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_2_2()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bash__Group_0_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0_2_1__0__Impl
	rule__Bash__Group_0_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getNewLineParserRuleCall_0_2_1_0()); }
	ruleNewLine
	{ after(grammarAccess.getBashAccess().getNewLineParserRuleCall_0_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_0_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_0_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getCommandsAssignment_0_2_1_1()); }
	(rule__Bash__CommandsAssignment_0_2_1_1)
	{ after(grammarAccess.getBashAccess().getCommandsAssignment_0_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bash__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_1__0__Impl
	rule__Bash__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getWSTerminalRuleCall_1_0()); }
	RULE_WS
	{ after(grammarAccess.getBashAccess().getWSTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_1__1__Impl
	rule__Bash__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getAlternatives_1_1()); }
	(rule__Bash__Alternatives_1_1)
	{ after(grammarAccess.getBashAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bash__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBashAccess().getWSTerminalRuleCall_1_2()); }
	RULE_WS
	{ after(grammarAccess.getBashAccess().getWSTerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group__0__Impl
	rule__CompoundList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_0()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getGroup_1()); }
	(rule__CompoundList__Group_1__0)
	{ after(grammarAccess.getCompoundListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group_1__0__Impl
	rule__CompoundList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_0()); }
	(rule__CompoundList__CommandsAssignment_1_0)
	{ after(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group_1__1__Impl
	rule__CompoundList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getGroup_1_1()); }
	(rule__CompoundList__Group_1_1__0)*
	{ after(grammarAccess.getCompoundListAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_1_2()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundList__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group_1_1__0__Impl
	rule__CompoundList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getNewLineParserRuleCall_1_1_0()); }
	ruleNewLine
	{ after(grammarAccess.getCompoundListAccess().getNewLineParserRuleCall_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_1_1()); }
	(rule__CompoundList__CommandsAssignment_1_1_1)
	{ after(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__0__Impl
	rule__SimpleList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getPipelineCommandParserRuleCall_0()); }
	rulePipelineCommand
	{ after(grammarAccess.getSimpleListAccess().getPipelineCommandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__1__Impl
	rule__SimpleList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getGroup_1()); }
	(rule__SimpleList__Group_1__0)*
	{ after(grammarAccess.getSimpleListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getAlternatives_2()); }
	(rule__SimpleList__Alternatives_2)?
	{ after(grammarAccess.getSimpleListAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group_1__0__Impl
	rule__SimpleList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getSimpleListLeftAction_1_0()); }
	()
	{ after(grammarAccess.getSimpleListAccess().getSimpleListLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group_1__1__Impl
	rule__SimpleList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getAlternatives_1_1()); }
	(rule__SimpleList__Alternatives_1_1)
	{ after(grammarAccess.getSimpleListAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getRightAssignment_1_2()); }
	(rule__SimpleList__RightAssignment_1_2)
	{ after(grammarAccess.getSimpleListAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleList__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group_1_1_0__0__Impl
	rule__SimpleList__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_0_0()); }
	(rule__SimpleList__OpAssignment_1_1_0_0)
	{ after(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getMaybeNewLineParserRuleCall_1_1_0_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getSimpleListAccess().getMaybeNewLineParserRuleCall_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PipelineCommand__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PipelineCommand__Group_0__0__Impl
	rule__PipelineCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineCommandAccess().getPipelineCommandAction_0_0()); }
	()
	{ after(grammarAccess.getPipelineCommandAccess().getPipelineCommandAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PipelineCommand__Group_0__1__Impl
	rule__PipelineCommand__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineCommandAccess().getNotAssignment_0_1()); }
	(rule__PipelineCommand__NotAssignment_0_1)
	{ after(grammarAccess.getPipelineCommandAccess().getNotAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PipelineCommand__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineCommandAccess().getPipelineAssignment_0_2()); }
	(rule__PipelineCommand__PipelineAssignment_0_2)
	{ after(grammarAccess.getPipelineCommandAccess().getPipelineAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pipeline__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group__0__Impl
	rule__Pipeline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getCommandParserRuleCall_0()); }
	ruleCommand
	{ after(grammarAccess.getPipelineAccess().getCommandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getGroup_1()); }
	(rule__Pipeline__Group_1__0)*
	{ after(grammarAccess.getPipelineAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pipeline__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_1__0__Impl
	rule__Pipeline__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getPipelineLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPipelineAccess().getPipelineLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_1__1__Impl
	rule__Pipeline__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getOpAssignment_1_1()); }
	(rule__Pipeline__OpAssignment_1_1)
	{ after(grammarAccess.getPipelineAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_1__2__Impl
	rule__Pipeline__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getMaybeNewLineParserRuleCall_1_2()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getPipelineAccess().getMaybeNewLineParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getRightAssignment_1_3()); }
	(rule__Pipeline__RightAssignment_1_3)
	{ after(grammarAccess.getPipelineAccess().getRightAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__0__Impl
	rule__Command__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getShellCommandParserRuleCall_2_0()); }
	ruleShellCommand
	{ after(grammarAccess.getCommandAccess().getShellCommandParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getRedirectsAssignment_2_1()); }
	(rule__Command__RedirectsAssignment_2_1)*
	{ after(grammarAccess.getCommandAccess().getRedirectsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefine__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0__0__Impl
	rule__FunctionDefine__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_0_0()); }
	()
	{ after(grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0__1__Impl
	rule__FunctionDefine__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getFunctionKeyword_0_1()); }
	Function
	{ after(grammarAccess.getFunctionDefineAccess().getFunctionKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0__2__Impl
	rule__FunctionDefine__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getNameAssignment_0_2()); }
	(rule__FunctionDefine__NameAssignment_0_2)
	{ after(grammarAccess.getFunctionDefineAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0__3__Impl
	rule__FunctionDefine__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getGroup_0_3()); }
	(rule__FunctionDefine__Group_0_3__0)
	{ after(grammarAccess.getFunctionDefineAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getBodyAssignment_0_4()); }
	(rule__FunctionDefine__BodyAssignment_0_4)
	{ after(grammarAccess.getFunctionDefineAccess().getBodyAssignment_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefine__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0_3__0__Impl
	rule__FunctionDefine__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getGroup_0_3_0()); }
	(rule__FunctionDefine__Group_0_3_0__0)?
	{ after(grammarAccess.getFunctionDefineAccess().getGroup_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_0_3_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefine__Group_0_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0_3_0__0__Impl
	rule__FunctionDefine__Group_0_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_0_3_0_0()); }
	(LeftParenthesis)
	{ after(grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_0_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_0_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_0_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_0_3_0_1()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_0_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefine__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1__0__Impl
	rule__FunctionDefine__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_1_0()); }
	()
	{ after(grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1__1__Impl
	rule__FunctionDefine__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getNameAssignment_1_1()); }
	(rule__FunctionDefine__NameAssignment_1_1)
	{ after(grammarAccess.getFunctionDefineAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1__2__Impl
	rule__FunctionDefine__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getGroup_1_2()); }
	(rule__FunctionDefine__Group_1_2__0)
	{ after(grammarAccess.getFunctionDefineAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getBodyAssignment_1_3()); }
	(rule__FunctionDefine__BodyAssignment_1_3)
	{ after(grammarAccess.getFunctionDefineAccess().getBodyAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefine__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1_2__0__Impl
	rule__FunctionDefine__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_1_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1_2__1__Impl
	rule__FunctionDefine__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_1_2_1()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefine__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_1_2_2()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleCommand__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_0__0__Impl
	rule__SimpleCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignment_0_0()); }
		(rule__SimpleCommand__AssignmentsAssignment_0_0)
		{ after(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignment_0_0()); }
	)
	(
		{ before(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignment_0_0()); }
		(rule__SimpleCommand__AssignmentsAssignment_0_0)*
		{ after(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignment_0_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getGroup_0_1()); }
	(rule__SimpleCommand__Group_0_1__0)?
	{ after(grammarAccess.getSimpleCommandAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleCommand__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_0_1__0__Impl
	rule__SimpleCommand__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getCommandAssignment_0_1_0()); }
	(rule__SimpleCommand__CommandAssignment_0_1_0)
	{ after(grammarAccess.getSimpleCommandAccess().getCommandAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getAlternatives_0_1_1()); }
	(rule__SimpleCommand__Alternatives_0_1_1)*
	{ after(grammarAccess.getSimpleCommandAccess().getAlternatives_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleCommand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_1__0__Impl
	rule__SimpleCommand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getCommandAssignment_1_0()); }
	(rule__SimpleCommand__CommandAssignment_1_0)
	{ after(grammarAccess.getSimpleCommandAccess().getCommandAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getAlternatives_1_1()); }
	(rule__SimpleCommand__Alternatives_1_1)*
	{ after(grammarAccess.getSimpleCommandAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupCommand__Group__0__Impl
	rule__GroupCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupCommandAccess().getGroupCommandAction_0()); }
	()
	{ after(grammarAccess.getGroupCommandAccess().getGroupCommandAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupCommand__Group__1__Impl
	rule__GroupCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupCommandAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getGroupCommandAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupCommand__Group__2__Impl
	rule__GroupCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupCommandAccess().getBodyAssignment_2()); }
	(rule__GroupCommand__BodyAssignment_2)
	{ after(grammarAccess.getGroupCommandAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupCommandAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getGroupCommandAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondCommand__Group__0__Impl
	rule__CondCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondCommandAccess().getLeftSquareBracketLeftSquareBracketKeyword_0()); }
	LeftSquareBracketLeftSquareBracket
	{ after(grammarAccess.getCondCommandAccess().getLeftSquareBracketLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondCommand__Group__1__Impl
	rule__CondCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondCommandAccess().getExpressionAssignment_1()); }
	(rule__CondCommand__ExpressionAssignment_1)
	{ after(grammarAccess.getCondCommandAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondCommandAccess().getRightSquareBracketRightSquareBracketKeyword_2()); }
	RightSquareBracketRightSquareBracket
	{ after(grammarAccess.getCondCommandAccess().getRightSquareBracketRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticCommand__Group__0__Impl
	rule__ArithmeticCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticCommandAccess().getLeftParenthesisLeftParenthesisKeyword_0()); }
	LeftParenthesisLeftParenthesis
	{ after(grammarAccess.getArithmeticCommandAccess().getLeftParenthesisLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticCommand__Group__1__Impl
	rule__ArithmeticCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticCommandAccess().getExpressionAssignment_1()); }
	(rule__ArithmeticCommand__ExpressionAssignment_1)
	{ after(grammarAccess.getArithmeticCommandAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticCommandAccess().getRightParenthesisRightParenthesisKeyword_2()); }
	RightParenthesisRightParenthesis
	{ after(grammarAccess.getArithmeticCommandAccess().getRightParenthesisRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subshell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subshell__Group__0__Impl
	rule__Subshell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubshellAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getSubshellAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subshell__Group__1__Impl
	rule__Subshell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubshellAccess().getBodyAssignment_1()); }
	(rule__Subshell__BodyAssignment_1)
	{ after(grammarAccess.getSubshellAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subshell__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubshellAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getSubshellAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandName__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandName__Group_0__0__Impl
	rule__CommandName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameAccess().getCommandNameAction_0_0()); }
	()
	{ after(grammarAccess.getCommandNameAccess().getCommandNameAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameAccess().getRefAssignment_0_1()); }
	(rule__CommandName__RefAssignment_0_1)
	{ after(grammarAccess.getCommandNameAccess().getRefAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__0__Impl
	rule__CaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCaseStatementAction_0()); }
	()
	{ after(grammarAccess.getCaseStatementAccess().getCaseStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__1__Impl
	rule__CaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCaseKeyword_1()); }
	Case
	{ after(grammarAccess.getCaseStatementAccess().getCaseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__2__Impl
	rule__CaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getVariableAssignment_2()); }
	(rule__CaseStatement__VariableAssignment_2)
	{ after(grammarAccess.getCaseStatementAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__3__Impl
	rule__CaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_3()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__4__Impl
	rule__CaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getInKeyword_4()); }
	In
	{ after(grammarAccess.getCaseStatementAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__5__Impl
	rule__CaseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_5()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__6__Impl
	rule__CaseStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getGroup_6()); }
	(rule__CaseStatement__Group_6__0)?
	{ after(grammarAccess.getCaseStatementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getEsacKeyword_7()); }
	Esac
	{ after(grammarAccess.getCaseStatementAccess().getEsacKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_6__0__Impl
	rule__CaseStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_0()); }
	(rule__CaseStatement__PatternsAssignment_6_0)
	{ after(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_6__1__Impl
	rule__CaseStatement__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_1()); }
	(rule__CaseStatement__PatternsAssignment_6_1)*
	{ after(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getGroup_6_2()); }
	(rule__CaseStatement__Group_6_2__0)?
	{ after(grammarAccess.getCaseStatementAccess().getGroup_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_6_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_6_2__0__Impl
	rule__CaseStatement__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getAlternatives_6_2_0()); }
	(rule__CaseStatement__Alternatives_6_2_0)
	{ after(grammarAccess.getCaseStatementAccess().getAlternatives_6_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_6_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_6_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_6_2_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_6_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePattern__Group__0__Impl
	rule__CasePattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternAccess().getLeftParenthesisKeyword_0()); }
	(LeftParenthesis)?
	{ after(grammarAccess.getCasePatternAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePattern__Group__1__Impl
	rule__CasePattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternAccess().getConditionAssignment_1()); }
	(rule__CasePattern__ConditionAssignment_1)
	{ after(grammarAccess.getCasePatternAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePattern__Group__2__Impl
	rule__CasePattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getCasePatternAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePattern__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternAccess().getBodyAssignment_3()); }
	(rule__CasePattern__BodyAssignment_3)
	{ after(grammarAccess.getCasePatternAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePatternContinue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group__0__Impl
	rule__CasePatternContinue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getGroup_0()); }
	(rule__CasePatternContinue__Group_0__0)
	{ after(grammarAccess.getCasePatternContinueAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group__1__Impl
	rule__CasePatternContinue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getLeftParenthesisKeyword_1()); }
	(LeftParenthesis)?
	{ after(grammarAccess.getCasePatternContinueAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group__2__Impl
	rule__CasePatternContinue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getConditionAssignment_2()); }
	(rule__CasePatternContinue__ConditionAssignment_2)
	{ after(grammarAccess.getCasePatternContinueAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group__3__Impl
	rule__CasePatternContinue__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getCasePatternContinueAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getBodyAssignment_4()); }
	(rule__CasePatternContinue__BodyAssignment_4)
	{ after(grammarAccess.getCasePatternContinueAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePatternContinue__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group_0__0__Impl
	rule__CasePatternContinue__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getFollowAssignment_0_0()); }
	(rule__CasePatternContinue__FollowAssignment_0_0)
	{ after(grammarAccess.getCasePatternContinueAccess().getFollowAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CasePatternContinue__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCasePatternContinueAccess().getMaybeNewLineParserRuleCall_0_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getCasePatternContinueAccess().getMaybeNewLineParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPartsAssignment_0()); }
	(rule__Pattern__PartsAssignment_0)
	{ after(grammarAccess.getPatternAccess().getPartsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_1()); }
	(rule__Pattern__Group_1__0)*
	{ after(grammarAccess.getPatternAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__0__Impl
	rule__Pattern__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getVerticalLineKeyword_1_0()); }
	VerticalLine
	{ after(grammarAccess.getPatternAccess().getVerticalLineKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPartsAssignment_1_1()); }
	(rule__Pattern__PartsAssignment_1_1)
	{ after(grammarAccess.getPatternAccess().getPartsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
	()
	{ after(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
	If
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
	(rule__IfStatement__ConditionAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenKeyword_3()); }
	Then
	{ after(grammarAccess.getIfStatementAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenAssignment_4()); }
	(rule__IfStatement__ThenAssignment_4)
	{ after(grammarAccess.getIfStatementAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseIfBlockAssignment_5()); }
	(rule__IfStatement__ElseIfBlockAssignment_5)*
	{ after(grammarAccess.getIfStatementAccess().getElseIfBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__6__Impl
	rule__IfStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_6()); }
	(rule__IfStatement__Group_6__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getFiKeyword_7()); }
	Fi
	{ after(grammarAccess.getIfStatementAccess().getFiKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_6__0__Impl
	rule__IfStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
	Else
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseAssignment_6_1()); }
	(rule__IfStatement__ElseAssignment_6_1)
	{ after(grammarAccess.getIfStatementAccess().getElseAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfBlock__Group__0__Impl
	rule__ElseIfBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfBlockAccess().getElseIfBlockAction_0()); }
	()
	{ after(grammarAccess.getElseIfBlockAccess().getElseIfBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfBlock__Group__1__Impl
	rule__ElseIfBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfBlockAccess().getElifKeyword_1()); }
	Elif
	{ after(grammarAccess.getElseIfBlockAccess().getElifKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfBlock__Group__2__Impl
	rule__ElseIfBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfBlockAccess().getConditionAssignment_2()); }
	(rule__ElseIfBlock__ConditionAssignment_2)
	{ after(grammarAccess.getElseIfBlockAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfBlock__Group__3__Impl
	rule__ElseIfBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfBlockAccess().getThenKeyword_3()); }
	Then
	{ after(grammarAccess.getElseIfBlockAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfBlockAccess().getThenAssignment_4()); }
	(rule__ElseIfBlock__ThenAssignment_4)
	{ after(grammarAccess.getElseIfBlockAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }
	For
	{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getAlternatives_1()); }
	(rule__ForStatement__Alternatives_1)
	{ after(grammarAccess.getForStatementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getDoKeyword_2()); }
	Do
	{ after(grammarAccess.getForStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getBodyAssignment_3()); }
	(rule__ForStatement__BodyAssignment_3)
	{ after(grammarAccess.getForStatementAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getDoneKeyword_4()); }
	Done
	{ after(grammarAccess.getForStatementAccess().getDoneKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__0__Impl
	rule__ForStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getArithmeticForStatementAction_1_0_0()); }
	()
	{ after(grammarAccess.getForStatementAccess().getArithmeticForStatementAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__1__Impl
	rule__ForStatement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getLeftParenthesisLeftParenthesisKeyword_1_0_1()); }
	LeftParenthesisLeftParenthesis
	{ after(grammarAccess.getForStatementAccess().getLeftParenthesisLeftParenthesisKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__2__Impl
	rule__ForStatement__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getInitAssignment_1_0_2()); }
	(rule__ForStatement__InitAssignment_1_0_2)?
	{ after(grammarAccess.getForStatementAccess().getInitAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__3__Impl
	rule__ForStatement__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_3()); }
	Semicolon
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__4__Impl
	rule__ForStatement__Group_1_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getConditionAssignment_1_0_4()); }
	(rule__ForStatement__ConditionAssignment_1_0_4)?
	{ after(grammarAccess.getForStatementAccess().getConditionAssignment_1_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__5__Impl
	rule__ForStatement__Group_1_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_5()); }
	Semicolon
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__6__Impl
	rule__ForStatement__Group_1_0__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getStepAssignment_1_0_6()); }
	(rule__ForStatement__StepAssignment_1_0_6)?
	{ after(grammarAccess.getForStatementAccess().getStepAssignment_1_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__7__Impl
	rule__ForStatement__Group_1_0__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getRightParenthesisRightParenthesisKeyword_1_0_7()); }
	RightParenthesisRightParenthesis
	{ after(grammarAccess.getForStatementAccess().getRightParenthesisRightParenthesisKeyword_1_0_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getGroup_1_0_8()); }
	(rule__ForStatement__Group_1_0_8__0)?
	{ after(grammarAccess.getForStatementAccess().getGroup_1_0_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group_1_0_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0_8__0__Impl
	rule__ForStatement__Group_1_0_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_0_8_0()); }
	ruleListTerminator
	{ after(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_0_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_0_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_0_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_0_8_1()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_0_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__0__Impl
	rule__ForStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForStatementAction_1_1_0()); }
	()
	{ after(grammarAccess.getForStatementAccess().getForStatementAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__1__Impl
	rule__ForStatement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getVariableAssignment_1_1_1()); }
	(rule__ForStatement__VariableAssignment_1_1_1)
	{ after(grammarAccess.getForStatementAccess().getVariableAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__2__Impl
	rule__ForStatement__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getInKeyword_1_1_2()); }
	In
	{ after(grammarAccess.getForStatementAccess().getInKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__3__Impl
	rule__ForStatement__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getForStatementAccess().getWordsAssignment_1_1_3()); }
		(rule__ForStatement__WordsAssignment_1_1_3)
		{ after(grammarAccess.getForStatementAccess().getWordsAssignment_1_1_3()); }
	)
	(
		{ before(grammarAccess.getForStatementAccess().getWordsAssignment_1_1_3()); }
		(rule__ForStatement__WordsAssignment_1_1_3)*
		{ after(grammarAccess.getForStatementAccess().getWordsAssignment_1_1_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__4__Impl
	rule__ForStatement__Group_1_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_1_4()); }
	ruleListTerminator
	{ after(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_1_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_1_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_1_5()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
	While
	{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getCAssignment_1()); }
	(rule__WhileStatement__CAssignment_1)
	{ after(grammarAccess.getWhileStatementAccess().getCAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDoKeyword_2()); }
	Do
	{ after(grammarAccess.getWhileStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDAssignment_3()); }
	(rule__WhileStatement__DAssignment_3)
	{ after(grammarAccess.getWhileStatementAccess().getDAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDoneKeyword_4()); }
	Done
	{ after(grammarAccess.getWhileStatementAccess().getDoneKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Redirection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group__0__Impl
	rule__Redirection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getRedirectionAction_0()); }
	()
	{ after(grammarAccess.getRedirectionAccess().getRedirectionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getAlternatives_1()); }
	(rule__Redirection__Alternatives_1)
	{ after(grammarAccess.getRedirectionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Redirection__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group_1_0__0__Impl
	rule__Redirection__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_0()); }
	(RULE_I_NUMBER)?
	{ after(grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group_1_0__1__Impl
	rule__Redirection__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getOpAssignment_1_0_1()); }
	(rule__Redirection__OpAssignment_1_0_1)
	{ after(grammarAccess.getRedirectionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getAlternatives_1_0_2()); }
	(rule__Redirection__Alternatives_1_0_2)
	{ after(grammarAccess.getRedirectionAccess().getAlternatives_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Redirection__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group_1_1__0__Impl
	rule__Redirection__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getOpAssignment_1_1_0()); }
	(rule__Redirection__OpAssignment_1_1_0)
	{ after(grammarAccess.getRedirectionAccess().getOpAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Redirection__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRedirectionAccess().getHERE_DOC_WORDTerminalRuleCall_1_1_1()); }
	RULE_HERE_DOC_WORD
	{ after(grammarAccess.getRedirectionAccess().getHERE_DOC_WORDTerminalRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getArrayStartParserRuleCall_0()); }
	ruleArrayStart
	{ after(grammarAccess.getArrayAccess().getArrayStartParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getArrayEndParserRuleCall_1()); }
	ruleArrayEnd
	{ after(grammarAccess.getArrayAccess().getArrayEndParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group__0__Impl
	rule__ArrayStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getArrayAction_0()); }
	()
	{ after(grammarAccess.getArrayStartAccess().getArrayAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group__1__Impl
	rule__ArrayStart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getArrayStartAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group__2__Impl
	rule__ArrayStart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getGroup_2()); }
	(rule__ArrayStart__Group_2__0)*
	{ after(grammarAccess.getArrayStartAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_3()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayStart__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group_2__0__Impl
	rule__ArrayStart__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_2_0()); }
	ruleMaybeNewLine
	{ after(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayStart__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayStartAccess().getWordsAssignment_2_1()); }
	(rule__ArrayStart__WordsAssignment_2_1)
	{ after(grammarAccess.getArrayStartAccess().getWordsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralWord__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWord__Group__0__Impl
	rule__LiteralWord__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWord__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordAccess().getLiteralAction_0()); }
	()
	{ after(grammarAccess.getLiteralWordAccess().getLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWord__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWord__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWord__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordAccess().getValuesAssignment_1()); }
	(rule__LiteralWord__ValuesAssignment_1)
	{ after(grammarAccess.getLiteralWordAccess().getValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
	(rule__Assignment__NameAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getIndexAssignment_1()); }
	(rule__Assignment__IndexAssignment_1)?
	{ after(grammarAccess.getAssignmentAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
	(rule__Assignment__ValueAssignment_3)?
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LAssignment__Group__0__Impl
	rule__LAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLAssignmentAccess().getNameAssignment_0()); }
	(rule__LAssignment__NameAssignment_0)
	{ after(grammarAccess.getLAssignmentAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LAssignment__Group__1__Impl
	rule__LAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLAssignmentAccess().getIndexAssignment_1()); }
	(rule__LAssignment__IndexAssignment_1)?
	{ after(grammarAccess.getLAssignmentAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLAssignmentAccess().getGroup_2()); }
	(rule__LAssignment__Group_2__0)?
	{ after(grammarAccess.getLAssignmentAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LAssignment__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LAssignment__Group_2__0__Impl
	rule__LAssignment__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLAssignmentAccess().getEqualsSignKeyword_2_0()); }
	EqualsSign
	{ after(grammarAccess.getLAssignmentAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LAssignment__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLAssignmentAccess().getValueAssignment_2_1()); }
	(rule__LAssignment__ValueAssignment_2_1)
	{ after(grammarAccess.getLAssignmentAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DQString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DQString__Group__0__Impl
	rule__DQString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDQStringAccess().getDQStringAction_0()); }
	()
	{ after(grammarAccess.getDQStringAccess().getDQStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DQString__Group__1__Impl
	rule__DQString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDQStringAccess().getQuotationMarkKeyword_1()); }
	QuotationMark
	{ after(grammarAccess.getDQStringAccess().getQuotationMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DQString__Group__2__Impl
	rule__DQString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDQStringAccess().getElementsAssignment_2()); }
	(rule__DQString__ElementsAssignment_2)*
	{ after(grammarAccess.getDQStringAccess().getElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DQString__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDQStringAccess().getQuotationMarkKeyword_3()); }
	QuotationMark
	{ after(grammarAccess.getDQStringAccess().getQuotationMarkKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralStringPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralStringPart__Group__0__Impl
	rule__LiteralStringPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralStringPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralStringPartAccess().getLiteralAction_0()); }
	()
	{ after(grammarAccess.getLiteralStringPartAccess().getLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralStringPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralStringPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralStringPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLiteralStringPartAccess().getValuesAssignment_1()); }
		(rule__LiteralStringPart__ValuesAssignment_1)
		{ after(grammarAccess.getLiteralStringPartAccess().getValuesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getLiteralStringPartAccess().getValuesAssignment_1()); }
		(rule__LiteralStringPart__ValuesAssignment_1)*
		{ after(grammarAccess.getLiteralStringPartAccess().getValuesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralWordPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group__0__Impl
	rule__LiteralWordPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getLiteralAction_0()); }
	()
	{ after(grammarAccess.getLiteralWordPartAccess().getLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getGroup_1()); }
		(rule__LiteralWordPart__Group_1__0)
		{ after(grammarAccess.getLiteralWordPartAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getGroup_1()); }
		(rule__LiteralWordPart__Group_1__0)*
		{ after(grammarAccess.getLiteralWordPartAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralWordPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getAlternatives_1_0()); }
	(rule__LiteralWordPart__Alternatives_1_0)
	{ after(grammarAccess.getLiteralWordPartAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralWordPart__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_1__0__Impl
	rule__LiteralWordPart__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_0()); }
	Apostrophe
	{ after(grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_1__1__Impl
	rule__LiteralWordPart__Group_1_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_1_1()); }
	(rule__LiteralWordPart__ValuesAssignment_1_0_1_1)?
	{ after(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_2()); }
	Apostrophe
	{ after(grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralWordPart__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_2__0__Impl
	rule__LiteralWordPart__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_0()); }
	QuotationMark
	{ after(grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_2__1__Impl
	rule__LiteralWordPart__Group_1_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_2_1()); }
	(rule__LiteralWordPart__ValuesAssignment_1_0_2_1)*
	{ after(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralWordPart__Group_1_0_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__Group_1_0_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_2()); }
	QuotationMark
	{ after(grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondOrAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondOrAnd__Group__0__Impl
	rule__CondOrAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondOrAndAccess().getCondExpParserRuleCall_0()); }
	ruleCondExp
	{ after(grammarAccess.getCondOrAndAccess().getCondExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondOrAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondOrAndAccess().getGroup_1()); }
	(rule__CondOrAnd__Group_1__0)*
	{ after(grammarAccess.getCondOrAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondOrAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondOrAnd__Group_1__0__Impl
	rule__CondOrAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondOrAndAccess().getCondUnaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getCondOrAndAccess().getCondUnaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondOrAnd__Group_1__1__Impl
	rule__CondOrAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondOrAndAccess().getAlternatives_1_1()); }
	(rule__CondOrAnd__Alternatives_1_1)
	{ after(grammarAccess.getCondOrAndAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondOrAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondOrAndAccess().getRightAssignment_1_2()); }
	(rule__CondOrAnd__RightAssignment_1_2)
	{ after(grammarAccess.getCondOrAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_0__0__Impl
	rule__CondExp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getCondUnaryExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getCondExpAccess().getCondUnaryExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_0__1__Impl
	rule__CondExp__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getOpAssignment_0_1()); }
	(rule__CondExp__OpAssignment_0_1)
	{ after(grammarAccess.getCondExpAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getOperandAssignment_0_2()); }
	(rule__CondExp__OperandAssignment_0_2)
	{ after(grammarAccess.getCondExpAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1__0__Impl
	rule__CondExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getCondConstParserRuleCall_1_0()); }
	ruleCondConst
	{ after(grammarAccess.getCondExpAccess().getCondConstParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getGroup_1_1()); }
	(rule__CondExp__Group_1_1__0)?
	{ after(grammarAccess.getCondExpAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1__0__Impl
	rule__CondExp__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getCondBinaryExpressionLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getCondExpAccess().getCondBinaryExpressionLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getAlternatives_1_1_1()); }
	(rule__CondExp__Alternatives_1_1_1)
	{ after(grammarAccess.getCondExpAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_1_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1_1_0__0__Impl
	rule__CondExp__Group_1_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_0_0()); }
	(rule__CondExp__OpAssignment_1_1_1_0_0)
	{ after(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_0_1()); }
	(rule__CondExp__RightAssignment_1_1_1_0_1)
	{ after(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_1_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1_1_1__0__Impl
	rule__CondExp__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_1_0()); }
	(rule__CondExp__OpAssignment_1_1_1_1_0)
	{ after(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_1_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_1_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_1_1()); }
	(rule__CondExp__RightAssignment_1_1_1_1_1)
	{ after(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondExp__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_2__0__Impl
	rule__CondExp__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getLeftParenthesisKeyword_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getCondExpAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_2__1__Impl
	rule__CondExp__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getCondOrAndParserRuleCall_2_1()); }
	ruleCondOrAnd
	{ after(grammarAccess.getCondExpAccess().getCondOrAndParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondExp__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondExpAccess().getRightParenthesisKeyword_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getCondExpAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group__0__Impl
	rule__RegularExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getRegularElementsParserRuleCall_0()); }
	ruleRegularElements
	{ after(grammarAccess.getRegularExpressionAccess().getRegularElementsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getGroup_1()); }
	(rule__RegularExpression__Group_1__0)*
	{ after(grammarAccess.getRegularExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__0__Impl
	rule__RegularExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getRegularExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRegularExpressionAccess().getRegularExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__1__Impl
	rule__RegularExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getOpAssignment_1_1()); }
	(rule__RegularExpression__OpAssignment_1_1)
	{ after(grammarAccess.getRegularExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getRightAssignment_1_2()); }
	(rule__RegularExpression__RightAssignment_1_2)
	{ after(grammarAccess.getRegularExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularElements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularElements__Group__0__Impl
	rule__RegularElements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularElementsAccess().getRegularConstAction_0()); }
	()
	{ after(grammarAccess.getRegularElementsAccess().getRegularConstAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularElements__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRegularElementsAccess().getAlternatives_1()); }
		(rule__RegularElements__Alternatives_1)
		{ after(grammarAccess.getRegularElementsAccess().getAlternatives_1()); }
	)
	(
		{ before(grammarAccess.getRegularElementsAccess().getAlternatives_1()); }
		(rule__RegularElements__Alternatives_1)*
		{ after(grammarAccess.getRegularElementsAccess().getAlternatives_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularElements__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularElements__Group_1_0__0__Impl
	rule__RegularElements__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularElementsAccess().getLeftParenthesisKeyword_1_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getRegularElementsAccess().getLeftParenthesisKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularElements__Group_1_0__1__Impl
	rule__RegularElements__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_0_1()); }
	(rule__RegularElements__PartsAssignment_1_0_1)?
	{ after(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularElements__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularElementsAccess().getRightParenthesisKeyword_1_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getRegularElementsAccess().getRightParenthesisKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpansion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpansion__Group__0__Impl
	rule__ArithmeticExpansion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionStartParserRuleCall_0()); }
	ruleArithmeticExpansionStart
	{ after(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionStartParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpansion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionEndParserRuleCall_1()); }
	ruleArithmeticExpansionEnd
	{ after(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionEndParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexEvaluation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexEvaluation__Group__0__Impl
	rule__IndexEvaluation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexEvaluationAccess().getIndexEvaluationStartParserRuleCall_0()); }
	ruleIndexEvaluationStart
	{ after(grammarAccess.getIndexEvaluationAccess().getIndexEvaluationStartParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexEvaluation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexEvaluationAccess().getEndAssignment_1()); }
	(rule__IndexEvaluation__EndAssignment_1)
	{ after(grammarAccess.getIndexEvaluationAccess().getEndAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexEvaluationStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexEvaluationStart__Group__0__Impl
	rule__IndexEvaluationStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluationStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexEvaluationStartAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getIndexEvaluationStartAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluationStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexEvaluationStart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluationStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexEvaluationStartAccess().getExpressionAssignment_1()); }
	(rule__IndexEvaluationStart__ExpressionAssignment_1)
	{ after(grammarAccess.getIndexEvaluationStartAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpansionStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpansionStart__Group__0__Impl
	rule__ArithmeticExpansionStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansionStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpansionStartAccess().getDollarSignLeftParenthesisLeftParenthesisKeyword_0()); }
	DollarSignLeftParenthesisLeftParenthesis
	{ after(grammarAccess.getArithmeticExpansionStartAccess().getDollarSignLeftParenthesisLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansionStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpansionStart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansionStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpansionStartAccess().getExpressionAssignment_1()); }
	(rule__ArithmeticExpansionStart__ExpressionAssignment_1)
	{ after(grammarAccess.getArithmeticExpansionStartAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpansion__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansion__Group_0__0__Impl
	rule__ParameterExpansion__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionAccess().getParameterExpansionStartParserRuleCall_0_0()); }
	ruleParameterExpansionStart
	{ after(grammarAccess.getParameterExpansionAccess().getParameterExpansionStartParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansion__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionAccess().getEndAssignment_0_1()); }
	(rule__ParameterExpansion__EndAssignment_0_1)
	{ after(grammarAccess.getParameterExpansionAccess().getEndAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpansion__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansion__Group_1__0__Impl
	rule__ParameterExpansion__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionAccess().getParameterExpansionAction_1_0()); }
	()
	{ after(grammarAccess.getParameterExpansionAccess().getParameterExpansionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansion__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionAccess().getRefAssignment_1_1()); }
	(rule__ParameterExpansion__RefAssignment_1_1)
	{ after(grammarAccess.getParameterExpansionAccess().getRefAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpansionStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__0__Impl
	rule__ParameterExpansionStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getParameterExpansionAction_0()); }
	()
	{ after(grammarAccess.getParameterExpansionStartAccess().getParameterExpansionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__1__Impl
	rule__ParameterExpansionStart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getDollarSignLeftCurlyBracketKeyword_1()); }
	DollarSignLeftCurlyBracket
	{ after(grammarAccess.getParameterExpansionStartAccess().getDollarSignLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__2__Impl
	rule__ParameterExpansionStart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getHashAssignment_2()); }
	(rule__ParameterExpansionStart__HashAssignment_2)?
	{ after(grammarAccess.getParameterExpansionStartAccess().getHashAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__3__Impl
	rule__ParameterExpansionStart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getAlternatives_3()); }
	(rule__ParameterExpansionStart__Alternatives_3)
	{ after(grammarAccess.getParameterExpansionStartAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__4__Impl
	rule__ParameterExpansionStart__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getGroup_4()); }
	(rule__ParameterExpansionStart__Group_4__0)?
	{ after(grammarAccess.getParameterExpansionStartAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getReplacerAssignment_5()); }
	(rule__ParameterExpansionStart__ReplacerAssignment_5)?
	{ after(grammarAccess.getParameterExpansionStartAccess().getReplacerAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpansionStart__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group_4__0__Impl
	rule__ParameterExpansionStart__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getLeftSquareBracketKeyword_4_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getParameterExpansionStartAccess().getLeftSquareBracketKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group_4__1__Impl
	rule__ParameterExpansionStart__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getAlternatives_4_1()); }
	(rule__ParameterExpansionStart__Alternatives_4_1)
	{ after(grammarAccess.getParameterExpansionStartAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpansionStart__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpansionStartAccess().getRightSquareBracketKeyword_4_2()); }
	RightSquareBracket
	{ after(grammarAccess.getParameterExpansionStartAccess().getRightSquareBracketKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_0__0__Impl
	rule__ParameterProcessor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getSingleProcessorAction_0_0()); }
	()
	{ after(grammarAccess.getParameterProcessorAccess().getSingleProcessorAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_0__1__Impl
	rule__ParameterProcessor__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getOpAssignment_0_1()); }
	(rule__ParameterProcessor__OpAssignment_0_1)
	{ after(grammarAccess.getParameterProcessorAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getWordAssignment_0_2()); }
	(rule__ParameterProcessor__WordAssignment_0_2)?
	{ after(grammarAccess.getParameterProcessorAccess().getWordAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1__0__Impl
	rule__ParameterProcessor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_1_0()); }
	()
	{ after(grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1__1__Impl
	rule__ParameterProcessor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getOpAssignment_1_1()); }
	(rule__ParameterProcessor__OpAssignment_1_1)
	{ after(grammarAccess.getParameterProcessorAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getGroup_1_2()); }
	(rule__ParameterProcessor__Group_1_2__0)?
	{ after(grammarAccess.getParameterProcessorAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1_2__0__Impl
	rule__ParameterProcessor__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getOriginalAssignment_1_2_0()); }
	(rule__ParameterProcessor__OriginalAssignment_1_2_0)
	{ after(grammarAccess.getParameterProcessorAccess().getOriginalAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getGroup_1_2_1()); }
	(rule__ParameterProcessor__Group_1_2_1__0)?
	{ after(grammarAccess.getParameterProcessorAccess().getGroup_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_1_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1_2_1__0__Impl
	rule__ParameterProcessor__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getSolidusKeyword_1_2_1_0()); }
	Solidus
	{ after(grammarAccess.getParameterProcessorAccess().getSolidusKeyword_1_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_1_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_1_2_1_1()); }
	(rule__ParameterProcessor__ReplaceAssignment_1_2_1_1)?
	{ after(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_1_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_2__0__Impl
	rule__ParameterProcessor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_2_0()); }
	()
	{ after(grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_2__1__Impl
	rule__ParameterProcessor__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getOpAssignment_2_1()); }
	(rule__ParameterProcessor__OpAssignment_2_1)
	{ after(grammarAccess.getParameterProcessorAccess().getOpAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_2__2__Impl
	rule__ParameterProcessor__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getSolidusKeyword_2_2()); }
	Solidus
	{ after(grammarAccess.getParameterProcessorAccess().getSolidusKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_2_3()); }
	(rule__ParameterProcessor__ReplaceAssignment_2_3)?
	{ after(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3__0__Impl
	rule__ParameterProcessor__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_3_0()); }
	()
	{ after(grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3__1__Impl
	rule__ParameterProcessor__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getColonKeyword_3_1()); }
	Colon
	{ after(grammarAccess.getParameterProcessorAccess().getColonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getGroup_3_2()); }
	(rule__ParameterProcessor__Group_3_2__0)?
	{ after(grammarAccess.getParameterProcessorAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3_2__0__Impl
	rule__ParameterProcessor__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getStartAssignment_3_2_0()); }
	(rule__ParameterProcessor__StartAssignment_3_2_0)
	{ after(grammarAccess.getParameterProcessorAccess().getStartAssignment_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getGroup_3_2_1()); }
	(rule__ParameterProcessor__Group_3_2_1__0)?
	{ after(grammarAccess.getParameterProcessorAccess().getGroup_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_3_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3_2_1__0__Impl
	rule__ParameterProcessor__Group_3_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getColonKeyword_3_2_1_0()); }
	Colon
	{ after(grammarAccess.getParameterProcessorAccess().getColonKeyword_3_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_3_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_3_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getLengthAssignment_3_2_1_1()); }
	(rule__ParameterProcessor__LengthAssignment_3_2_1_1)?
	{ after(grammarAccess.getParameterProcessorAccess().getLengthAssignment_3_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterProcessor__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_4__0__Impl
	rule__ParameterProcessor__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_4_0()); }
	()
	{ after(grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_4__1__Impl
	rule__ParameterProcessor__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getColonKeyword_4_1()); }
	Colon
	{ after(grammarAccess.getParameterProcessorAccess().getColonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_4__2__Impl
	rule__ParameterProcessor__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getColonKeyword_4_2()); }
	Colon
	{ after(grammarAccess.getParameterProcessorAccess().getColonKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterProcessor__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterProcessorAccess().getLengthAssignment_4_3()); }
	(rule__ParameterProcessor__LengthAssignment_4_3)?
	{ after(grammarAccess.getParameterProcessorAccess().getLengthAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandSubstitution__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandSubstitution__Group__0__Impl
	rule__CommandSubstitution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitution__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandSubstitutionAccess().getCommandSubstitutionStartParserRuleCall_0()); }
	ruleCommandSubstitutionStart
	{ after(grammarAccess.getCommandSubstitutionAccess().getCommandSubstitutionStartParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitution__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandSubstitution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitution__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandSubstitutionAccess().getEndAssignment_1()); }
	(rule__CommandSubstitution__EndAssignment_1)
	{ after(grammarAccess.getCommandSubstitutionAccess().getEndAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandSubstitutionStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandSubstitutionStart__Group__0__Impl
	rule__CommandSubstitutionStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitutionStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandSubstitutionStartAccess().getCS_STARTTerminalRuleCall_0()); }
	RULE_CS_START
	{ after(grammarAccess.getCommandSubstitutionStartAccess().getCS_STARTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitutionStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandSubstitutionStart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitutionStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandSubstitutionStartAccess().getCommandsAssignment_1()); }
	(rule__CommandSubstitutionStart__CommandsAssignment_1)
	{ after(grammarAccess.getCommandSubstitutionStartAccess().getCommandsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessSubstitution__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessSubstitution__Group__0__Impl
	rule__ProcessSubstitution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitution__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessSubstitutionAccess().getProcessSubstitutionStartParserRuleCall_0()); }
	ruleProcessSubstitutionStart
	{ after(grammarAccess.getProcessSubstitutionAccess().getProcessSubstitutionStartParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitution__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessSubstitution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitution__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessSubstitutionAccess().getEndAssignment_1()); }
	(rule__ProcessSubstitution__EndAssignment_1)
	{ after(grammarAccess.getProcessSubstitutionAccess().getEndAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessSubstitutionStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessSubstitutionStart__Group__0__Impl
	rule__ProcessSubstitutionStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessSubstitutionStartAccess().getOpAssignment_0()); }
	(rule__ProcessSubstitutionStart__OpAssignment_0)
	{ after(grammarAccess.getProcessSubstitutionStartAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessSubstitutionStart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessSubstitutionStartAccess().getBodyAssignment_1()); }
	(rule__ProcessSubstitutionStart__BodyAssignment_1)
	{ after(grammarAccess.getProcessSubstitutionStartAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Evaluation__Group__0__Impl
	rule__Evaluation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvaluationAccess().getArithmeticParserRuleCall_0()); }
	ruleArithmetic
	{ after(grammarAccess.getEvaluationAccess().getArithmeticParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Evaluation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvaluationAccess().getGroup_1()); }
	(rule__Evaluation__Group_1__0)*
	{ after(grammarAccess.getEvaluationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Evaluation__Group_1__0__Impl
	rule__Evaluation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvaluationAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEvaluationAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Evaluation__Group_1__1__Impl
	rule__Evaluation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvaluationAccess().getOpAssignment_1_1()); }
	(rule__Evaluation__OpAssignment_1_1)
	{ after(grammarAccess.getEvaluationAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Evaluation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvaluationAccess().getRightAssignment_1_2()); }
	(rule__Evaluation__RightAssignment_1_2)
	{ after(grammarAccess.getEvaluationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arithmetic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group_0__0__Impl
	rule__Arithmetic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getBinaryExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getArithmeticAccess().getBinaryExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group_0__1__Impl
	rule__Arithmetic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getLeftAssignment_0_1()); }
	(rule__Arithmetic__LeftAssignment_0_1)
	{ after(grammarAccess.getArithmeticAccess().getLeftAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group_0__2__Impl
	rule__Arithmetic__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getOpAssignment_0_2()); }
	(rule__Arithmetic__OpAssignment_0_2)
	{ after(grammarAccess.getArithmeticAccess().getOpAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getRightAssignment_0_3()); }
	(rule__Arithmetic__RightAssignment_0_3)
	{ after(grammarAccess.getArithmeticAccess().getRightAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group__0__Impl
	rule__ConditionalOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getLogicOrParserRuleCall_0()); }
	ruleLogicOr
	{ after(grammarAccess.getConditionalOperatorAccess().getLogicOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getGroup_1()); }
	(rule__ConditionalOperator__Group_1__0)?
	{ after(grammarAccess.getConditionalOperatorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalOperator__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group_1__0__Impl
	rule__ConditionalOperator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getQuestionMarkKeyword_1_0()); }
	QuestionMark
	{ after(grammarAccess.getConditionalOperatorAccess().getQuestionMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group_1__1__Impl
	rule__ConditionalOperator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getConditionalOperatorConditionAction_1_1()); }
	()
	{ after(grammarAccess.getConditionalOperatorAccess().getConditionalOperatorConditionAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group_1__2__Impl
	rule__ConditionalOperator__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getFirstAssignment_1_2()); }
	(rule__ConditionalOperator__FirstAssignment_1_2)
	{ after(grammarAccess.getConditionalOperatorAccess().getFirstAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group_1__3__Impl
	rule__ConditionalOperator__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getColonKeyword_1_3()); }
	Colon
	{ after(grammarAccess.getConditionalOperatorAccess().getColonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalOperator__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalOperatorAccess().getRightAssignment_1_4()); }
	(rule__ConditionalOperator__RightAssignment_1_4)
	{ after(grammarAccess.getConditionalOperatorAccess().getRightAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicOr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicOr__Group__0__Impl
	rule__LogicOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicOrAccess().getLogicAndParserRuleCall_0()); }
	ruleLogicAnd
	{ after(grammarAccess.getLogicOrAccess().getLogicAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicOrAccess().getGroup_1()); }
	(rule__LogicOr__Group_1__0)*
	{ after(grammarAccess.getLogicOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicOr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicOr__Group_1__0__Impl
	rule__LogicOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicOrAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLogicOrAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicOr__Group_1__1__Impl
	rule__LogicOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicOrAccess().getOpAssignment_1_1()); }
	(rule__LogicOr__OpAssignment_1_1)
	{ after(grammarAccess.getLogicOrAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicOr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicOrAccess().getRightAssignment_1_2()); }
	(rule__LogicOr__RightAssignment_1_2)
	{ after(grammarAccess.getLogicOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicAnd__Group__0__Impl
	rule__LogicAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAndAccess().getBitwiseORParserRuleCall_0()); }
	ruleBitwiseOR
	{ after(grammarAccess.getLogicAndAccess().getBitwiseORParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAndAccess().getGroup_1()); }
	(rule__LogicAnd__Group_1__0)*
	{ after(grammarAccess.getLogicAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicAnd__Group_1__0__Impl
	rule__LogicAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAndAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLogicAndAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicAnd__Group_1__1__Impl
	rule__LogicAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAndAccess().getOpAssignment_1_1()); }
	(rule__LogicAnd__OpAssignment_1_1)
	{ after(grammarAccess.getLogicAndAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAndAccess().getRightAssignment_1_2()); }
	(rule__LogicAnd__RightAssignment_1_2)
	{ after(grammarAccess.getLogicAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOR__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOR__Group__0__Impl
	rule__BitwiseOR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseORAccess().getBitwiseExclusiveORParserRuleCall_0()); }
	ruleBitwiseExclusiveOR
	{ after(grammarAccess.getBitwiseORAccess().getBitwiseExclusiveORParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseORAccess().getGroup_1()); }
	(rule__BitwiseOR__Group_1__0)*
	{ after(grammarAccess.getBitwiseORAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOR__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOR__Group_1__0__Impl
	rule__BitwiseOR__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseORAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseORAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOR__Group_1__1__Impl
	rule__BitwiseOR__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseORAccess().getOpAssignment_1_1()); }
	(rule__BitwiseOR__OpAssignment_1_1)
	{ after(grammarAccess.getBitwiseORAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseOR__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseORAccess().getRightAssignment_1_2()); }
	(rule__BitwiseOR__RightAssignment_1_2)
	{ after(grammarAccess.getBitwiseORAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseExclusiveOR__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseExclusiveOR__Group__0__Impl
	rule__BitwiseExclusiveOR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseExclusiveORAccess().getBitwiseANDParserRuleCall_0()); }
	ruleBitwiseAND
	{ after(grammarAccess.getBitwiseExclusiveORAccess().getBitwiseANDParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseExclusiveOR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseExclusiveORAccess().getGroup_1()); }
	(rule__BitwiseExclusiveOR__Group_1__0)*
	{ after(grammarAccess.getBitwiseExclusiveORAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseExclusiveOR__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseExclusiveOR__Group_1__0__Impl
	rule__BitwiseExclusiveOR__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseExclusiveORAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseExclusiveORAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseExclusiveOR__Group_1__1__Impl
	rule__BitwiseExclusiveOR__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseExclusiveORAccess().getOpAssignment_1_1()); }
	(rule__BitwiseExclusiveOR__OpAssignment_1_1)
	{ after(grammarAccess.getBitwiseExclusiveORAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseExclusiveOR__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseExclusiveORAccess().getRightAssignment_1_2()); }
	(rule__BitwiseExclusiveOR__RightAssignment_1_2)
	{ after(grammarAccess.getBitwiseExclusiveORAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAND__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAND__Group__0__Impl
	rule__BitwiseAND__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseANDAccess().getEqualityAndInequalityParserRuleCall_0()); }
	ruleEqualityAndInequality
	{ after(grammarAccess.getBitwiseANDAccess().getEqualityAndInequalityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAND__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseANDAccess().getGroup_1()); }
	(rule__BitwiseAND__Group_1__0)*
	{ after(grammarAccess.getBitwiseANDAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAND__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAND__Group_1__0__Impl
	rule__BitwiseAND__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseANDAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseANDAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAND__Group_1__1__Impl
	rule__BitwiseAND__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseANDAccess().getOpAssignment_1_1()); }
	(rule__BitwiseAND__OpAssignment_1_1)
	{ after(grammarAccess.getBitwiseANDAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseAND__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseANDAccess().getRightAssignment_1_2()); }
	(rule__BitwiseAND__RightAssignment_1_2)
	{ after(grammarAccess.getBitwiseANDAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityAndInequality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityAndInequality__Group__0__Impl
	rule__EqualityAndInequality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAndInequalityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAndInequalityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityAndInequality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAndInequalityAccess().getGroup_1()); }
	(rule__EqualityAndInequality__Group_1__0)*
	{ after(grammarAccess.getEqualityAndInequalityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityAndInequality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityAndInequality__Group_1__0__Impl
	rule__EqualityAndInequality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAndInequalityAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAndInequalityAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityAndInequality__Group_1__1__Impl
	rule__EqualityAndInequality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAndInequalityAccess().getOpAssignment_1_1()); }
	(rule__EqualityAndInequality__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityAndInequalityAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityAndInequality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAndInequalityAccess().getRightAssignment_1_2()); }
	(rule__EqualityAndInequality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAndInequalityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getBitwiseShiftsParserRuleCall_0()); }
	ruleBitwiseShifts
	{ after(grammarAccess.getComparisonAccess().getBitwiseShiftsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
	(rule__Comparison__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseShifts__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseShifts__Group__0__Impl
	rule__BitwiseShifts__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseShiftsAccess().getAdditionSubtractionParserRuleCall_0()); }
	ruleAdditionSubtraction
	{ after(grammarAccess.getBitwiseShiftsAccess().getAdditionSubtractionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseShifts__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseShiftsAccess().getGroup_1()); }
	(rule__BitwiseShifts__Group_1__0)*
	{ after(grammarAccess.getBitwiseShiftsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseShifts__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseShifts__Group_1__0__Impl
	rule__BitwiseShifts__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseShiftsAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitwiseShiftsAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseShifts__Group_1__1__Impl
	rule__BitwiseShifts__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseShiftsAccess().getOpAssignment_1_1()); }
	(rule__BitwiseShifts__OpAssignment_1_1)
	{ after(grammarAccess.getBitwiseShiftsAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitwiseShifts__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitwiseShiftsAccess().getRightAssignment_1_2()); }
	(rule__BitwiseShifts__RightAssignment_1_2)
	{ after(grammarAccess.getBitwiseShiftsAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionSubtraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group__0__Impl
	rule__AdditionSubtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionRemainderParserRuleCall_0()); }
	ruleMultiplicationDivisionRemainder
	{ after(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionRemainderParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getGroup_1()); }
	(rule__AdditionSubtraction__Group_1__0)*
	{ after(grammarAccess.getAdditionSubtractionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionSubtraction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__0__Impl
	rule__AdditionSubtraction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionSubtractionAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__1__Impl
	rule__AdditionSubtraction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getOpAssignment_1_1()); }
	(rule__AdditionSubtraction__OpAssignment_1_1)
	{ after(grammarAccess.getAdditionSubtractionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2()); }
	(rule__AdditionSubtraction__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationDivisionRemainder__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivisionRemainder__Group__0__Impl
	rule__MultiplicationDivisionRemainder__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getExponentiationParserRuleCall_0()); }
	ruleExponentiation
	{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getExponentiationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivisionRemainder__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup_1()); }
	(rule__MultiplicationDivisionRemainder__Group_1__0)*
	{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationDivisionRemainder__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivisionRemainder__Group_1__0__Impl
	rule__MultiplicationDivisionRemainder__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivisionRemainder__Group_1__1__Impl
	rule__MultiplicationDivisionRemainder__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAssignment_1_1()); }
	(rule__MultiplicationDivisionRemainder__OpAssignment_1_1)
	{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivisionRemainder__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightAssignment_1_2()); }
	(rule__MultiplicationDivisionRemainder__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exponentiation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponentiation__Group__0__Impl
	rule__Exponentiation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationAccess().getLogicalAndBitwiseNegationParserRuleCall_0()); }
	ruleLogicalAndBitwiseNegation
	{ after(grammarAccess.getExponentiationAccess().getLogicalAndBitwiseNegationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponentiation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationAccess().getGroup_1()); }
	(rule__Exponentiation__Group_1__0)?
	{ after(grammarAccess.getExponentiationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exponentiation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponentiation__Group_1__0__Impl
	rule__Exponentiation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExponentiationAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponentiation__Group_1__1__Impl
	rule__Exponentiation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationAccess().getOpAssignment_1_1()); }
	(rule__Exponentiation__OpAssignment_1_1)
	{ after(grammarAccess.getExponentiationAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponentiation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationAccess().getRightAssignment_1_2()); }
	(rule__Exponentiation__RightAssignment_1_2)
	{ after(grammarAccess.getExponentiationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndBitwiseNegation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndBitwiseNegation__Group_0__0__Impl
	rule__LogicalAndBitwiseNegation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getPrefixExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getPrefixExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndBitwiseNegation__Group_0__1__Impl
	rule__LogicalAndBitwiseNegation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAssignment_0_1()); }
	(rule__LogicalAndBitwiseNegation__OpAssignment_0_1)
	{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndBitwiseNegation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandAssignment_0_2()); }
	(rule__LogicalAndBitwiseNegation__OperandAssignment_0_2)
	{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryMinusAndPlus__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryMinusAndPlus__Group_0__0__Impl
	rule__UnaryMinusAndPlus__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryMinusAndPlusAccess().getPrefixExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryMinusAndPlusAccess().getPrefixExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryMinusAndPlus__Group_0__1__Impl
	rule__UnaryMinusAndPlus__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOpAssignment_0_1()); }
	(rule__UnaryMinusAndPlus__OpAssignment_0_1)
	{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryMinusAndPlus__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOperandAssignment_0_2()); }
	(rule__UnaryMinusAndPlus__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreDecrement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDecrement__Group_0__0__Impl
	rule__PreDecrement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDecrementAccess().getPrefixExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getPreDecrementAccess().getPrefixExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDecrement__Group_0__1__Impl
	rule__PreDecrement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDecrementAccess().getOpAssignment_0_1()); }
	(rule__PreDecrement__OpAssignment_0_1)
	{ after(grammarAccess.getPreDecrementAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDecrement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDecrementAccess().getOperandAssignment_0_2()); }
	(rule__PreDecrement__OperandAssignment_0_2)
	{ after(grammarAccess.getPreDecrementAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostDecrement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostDecrement__Group__0__Impl
	rule__PostDecrement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostDecrementAccess().getVariableIdParserRuleCall_0()); }
	ruleVariableId
	{ after(grammarAccess.getPostDecrementAccess().getVariableIdParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostDecrement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostDecrementAccess().getGroup_1()); }
	(rule__PostDecrement__Group_1__0)?
	{ after(grammarAccess.getPostDecrementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostDecrement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostDecrement__Group_1__0__Impl
	rule__PostDecrement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostDecrementAccess().getSuffixExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getPostDecrementAccess().getSuffixExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostDecrement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostDecrementAccess().getOpAssignment_1_1()); }
	(rule__PostDecrement__OpAssignment_1_1)
	{ after(grammarAccess.getPostDecrementAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryItem__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_0__0__Impl
	rule__PrimaryItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getConstPrimaryItemAction_0_0()); }
	()
	{ after(grammarAccess.getPrimaryItemAccess().getConstPrimaryItemAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_0__1__Impl
	rule__PrimaryItem__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_0_1()); }
	(rule__PrimaryItem__PrefixAssignment_0_1)?
	{ after(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getValueAssignment_0_2()); }
	(rule__PrimaryItem__ValueAssignment_0_2)
	{ after(grammarAccess.getPrimaryItemAccess().getValueAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_1__0__Impl
	rule__PrimaryItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryItemAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_1__1__Impl
	rule__PrimaryItem__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getEvaluationParserRuleCall_1_1()); }
	ruleEvaluation
	{ after(grammarAccess.getPrimaryItemAccess().getEvaluationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryItemAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryItem__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_2__0__Impl
	rule__PrimaryItem__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getPrimaryItemAction_2_0()); }
	()
	{ after(grammarAccess.getPrimaryItemAccess().getPrimaryItemAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_2__1__Impl
	rule__PrimaryItem__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_2_1()); }
	(rule__PrimaryItem__PrefixAssignment_2_1)?
	{ after(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryItem__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryItemAccess().getValueAssignment_2_2()); }
	(rule__PrimaryItem__ValueAssignment_2_2)
	{ after(grammarAccess.getPrimaryItemAccess().getValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableId__Group__0__Impl
	rule__VariableId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIdAccess().getVariableIdAction_0()); }
	()
	{ after(grammarAccess.getVariableIdAccess().getVariableIdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableIdAccess().getRefAssignment_1()); }
	(rule__VariableId__RefAssignment_1)
	{ after(grammarAccess.getVariableIdAccess().getRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewLine__Group__0__Impl
	rule__NewLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewLineAccess().getHereDocParserRuleCall_0()); }
	(ruleHereDoc)*
	{ after(grammarAccess.getNewLineAccess().getHereDocParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewLineAccess().getNEW_LINETerminalRuleCall_1()); }
	RULE_NEW_LINE
	{ after(grammarAccess.getNewLineAccess().getNEW_LINETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HereDoc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HereDoc__Group__0__Impl
	rule__HereDoc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHereDocAccess().getHERE_DOC_STARTTerminalRuleCall_0()); }
	RULE_HERE_DOC_START
	{ after(grammarAccess.getHereDocAccess().getHERE_DOC_STARTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HereDoc__Group__1__Impl
	rule__HereDoc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHereDocAccess().getAlternatives_1()); }
	(rule__HereDoc__Alternatives_1)*
	{ after(grammarAccess.getHereDocAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HereDoc__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HereDoc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHereDocAccess().getHERE_DOC_ENDTerminalRuleCall_2()); }
	RULE_HERE_DOC_END
	{ after(grammarAccess.getHereDocAccess().getHERE_DOC_ENDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bash__CommandsAssignment_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_0_0()); }
		ruleSimpleList
		{ after(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__CommandsAssignment_0_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_1_1_0()); }
		ruleSimpleList
		{ after(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__ErrorAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getErrorWordParserRuleCall_1_1_0_0()); }
		ruleWord
		{ after(grammarAccess.getBashAccess().getErrorWordParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bash__ErrorAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBashAccess().getErrorAssignmentParserRuleCall_1_1_1_0()); }
		ruleAssignment
		{ after(grammarAccess.getBashAccess().getErrorAssignmentParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__CommandsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_0_0()); }
		ruleSimpleList
		{ after(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundList__CommandsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_1_1_0()); }
		ruleSimpleList
		{ after(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__OpAssignment_1_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_0_0_0()); }
		(rule__SimpleList__OpAlternatives_1_1_0_0_0)
		{ after(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__OpAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_1_0()); }
		(rule__SimpleList__OpAlternatives_1_1_1_0)
		{ after(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getRightPipelineCommandParserRuleCall_1_2_0()); }
		rulePipelineCommand
		{ after(grammarAccess.getSimpleListAccess().getRightPipelineCommandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__BackendAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getBackendAmpersandKeyword_2_0_0()); }
		(
			{ before(grammarAccess.getSimpleListAccess().getBackendAmpersandKeyword_2_0_0()); }
			Ampersand
			{ after(grammarAccess.getSimpleListAccess().getBackendAmpersandKeyword_2_0_0()); }
		)
		{ after(grammarAccess.getSimpleListAccess().getBackendAmpersandKeyword_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__NotAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineCommandAccess().getNotExclamationMarkKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getPipelineCommandAccess().getNotExclamationMarkKeyword_0_1_0()); }
			ExclamationMark
			{ after(grammarAccess.getPipelineCommandAccess().getNotExclamationMarkKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getPipelineCommandAccess().getNotExclamationMarkKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelineCommand__PipelineAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineCommandAccess().getPipelinePipelineParserRuleCall_0_2_0()); }
		rulePipeline
		{ after(grammarAccess.getPipelineCommandAccess().getPipelinePipelineParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getOpAlternatives_1_1_0()); }
		(rule__Pipeline__OpAlternatives_1_1_0)
		{ after(grammarAccess.getPipelineAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__RightAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getRightCommandParserRuleCall_1_3_0()); }
		ruleCommand
		{ after(grammarAccess.getPipelineAccess().getRightCommandParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__RedirectsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getRedirectsRedirectionParserRuleCall_2_1_0()); }
		ruleRedirection
		{ after(grammarAccess.getCommandAccess().getRedirectsRedirectionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_0_2_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__BodyAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_0_4_0()); }
		ruleShellCommand
		{ after(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_1_1_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefine__BodyAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_1_3_0()); }
		ruleShellCommand
		{ after(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__AssignmentsAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignmentParserRuleCall_0_0_0()); }
		ruleAssignment
		{ after(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignmentParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__CommandAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_0_1_0_0()); }
		ruleCommandName
		{ after(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__ParametersAssignment_0_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_0_1_1_0_0()); }
		ruleWord
		{ after(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_0_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__RAssignment_0_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_0_1_1_1_0()); }
		ruleRedirection
		{ after(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_0_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__CommandAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_1_0_0()); }
		ruleCommandName
		{ after(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__ParametersAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getParametersAlternatives_1_1_0_0()); }
		(rule__SimpleCommand__ParametersAlternatives_1_1_0_0)
		{ after(grammarAccess.getSimpleCommandAccess().getParametersAlternatives_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__RAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_1_1_1_0()); }
		ruleRedirection
		{ after(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__RAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_2_0()); }
		ruleRedirection
		{ after(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupCommand__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupCommandAccess().getBodyCompoundListParserRuleCall_2_0()); }
		ruleCompoundList
		{ after(grammarAccess.getGroupCommandAccess().getBodyCompoundListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondCommand__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondCommandAccess().getExpressionCondOrAndParserRuleCall_1_0()); }
		ruleCondOrAnd
		{ after(grammarAccess.getCondCommandAccess().getExpressionCondOrAndParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticCommand__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticCommandAccess().getExpressionEvaluationParserRuleCall_1_0()); }
		ruleEvaluation
		{ after(grammarAccess.getArithmeticCommandAccess().getExpressionEvaluationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subshell__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubshellAccess().getBodyCompoundListParserRuleCall_1_0()); }
		ruleCompoundList
		{ after(grammarAccess.getSubshellAccess().getBodyCompoundListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__RefAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandNameAccess().getRefFunctionDefineCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getCommandNameAccess().getRefFunctionDefineFunctionNameParserRuleCall_0_1_0_1()); }
			ruleFunctionName
			{ after(grammarAccess.getCommandNameAccess().getRefFunctionDefineFunctionNameParserRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getCommandNameAccess().getRefFunctionDefineCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getVariableWordParserRuleCall_2_0()); }
		ruleWord
		{ after(grammarAccess.getCaseStatementAccess().getVariableWordParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__PatternsAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getPatternsCasePatternParserRuleCall_6_0_0()); }
		ruleCasePattern
		{ after(grammarAccess.getCaseStatementAccess().getPatternsCasePatternParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__PatternsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getPatternsCasePatternContinueParserRuleCall_6_1_0()); }
		ruleCasePatternContinue
		{ after(grammarAccess.getCaseStatementAccess().getPatternsCasePatternContinueParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternAccess().getConditionPatternParserRuleCall_1_0()); }
		rulePattern
		{ after(grammarAccess.getCasePatternAccess().getConditionPatternParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePattern__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternAccess().getBodyCompoundListParserRuleCall_3_0()); }
		ruleCompoundList
		{ after(grammarAccess.getCasePatternAccess().getBodyCompoundListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__FollowAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getFollowAlternatives_0_0_0()); }
		(rule__CasePatternContinue__FollowAlternatives_0_0_0)
		{ after(grammarAccess.getCasePatternContinueAccess().getFollowAlternatives_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getConditionPatternParserRuleCall_2_0()); }
		rulePattern
		{ after(grammarAccess.getCasePatternContinueAccess().getConditionPatternParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CasePatternContinue__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCasePatternContinueAccess().getBodyCompoundListParserRuleCall_4_0()); }
		ruleCompoundList
		{ after(grammarAccess.getCasePatternContinueAccess().getBodyCompoundListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__PartsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_0_0()); }
		ruleWord
		{ after(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__PartsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionCompoundListParserRuleCall_2_0()); }
		ruleCompoundList
		{ after(grammarAccess.getIfStatementAccess().getConditionCompoundListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getThenCompoundListParserRuleCall_4_0()); }
		ruleCompoundList
		{ after(grammarAccess.getIfStatementAccess().getThenCompoundListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfBlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseIfBlockElseIfBlockParserRuleCall_5_0()); }
		ruleElseIfBlock
		{ after(grammarAccess.getIfStatementAccess().getElseIfBlockElseIfBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseCompoundListParserRuleCall_6_1_0()); }
		ruleCompoundList
		{ after(grammarAccess.getIfStatementAccess().getElseCompoundListParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseIfBlockAccess().getConditionCompoundListParserRuleCall_2_0()); }
		ruleCompoundList
		{ after(grammarAccess.getElseIfBlockAccess().getConditionCompoundListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfBlock__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseIfBlockAccess().getThenCompoundListParserRuleCall_4_0()); }
		ruleCompoundList
		{ after(grammarAccess.getElseIfBlockAccess().getThenCompoundListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__InitAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getInitEvaluationParserRuleCall_1_0_2_0()); }
		ruleEvaluation
		{ after(grammarAccess.getForStatementAccess().getInitEvaluationParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ConditionAssignment_1_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getConditionEvaluationParserRuleCall_1_0_4_0()); }
		ruleEvaluation
		{ after(grammarAccess.getForStatementAccess().getConditionEvaluationParserRuleCall_1_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StepAssignment_1_0_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getStepEvaluationParserRuleCall_1_0_6_0()); }
		ruleEvaluation
		{ after(grammarAccess.getForStatementAccess().getStepEvaluationParserRuleCall_1_0_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__VariableAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getVariableNAMETerminalRuleCall_1_1_1_0()); }
		RULE_NAME
		{ after(grammarAccess.getForStatementAccess().getVariableNAMETerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__WordsAssignment_1_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getWordsWordParserRuleCall_1_1_3_0()); }
		ruleWord
		{ after(grammarAccess.getForStatementAccess().getWordsWordParserRuleCall_1_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getBodyCompoundListParserRuleCall_3_0()); }
		ruleCompoundList
		{ after(grammarAccess.getForStatementAccess().getBodyCompoundListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__CAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getCCompoundListParserRuleCall_1_0()); }
		ruleCompoundList
		{ after(grammarAccess.getWhileStatementAccess().getCCompoundListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__DAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getDCompoundListParserRuleCall_3_0()); }
		ruleCompoundList
		{ after(grammarAccess.getWhileStatementAccess().getDCompoundListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__Redirection__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getRedirectionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__TargetAssignment_1_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getTargetWordParserRuleCall_1_0_2_0_0()); }
		ruleWord
		{ after(grammarAccess.getRedirectionAccess().getTargetWordParserRuleCall_1_0_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Redirection__OpAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getRedirectionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
			LessThanSignLessThanSign
			{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getRedirectionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayStart__WordsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayStartAccess().getWordsWordParserRuleCall_2_1_0()); }
		ruleWord
		{ after(grammarAccess.getArrayStartAccess().getWordsWordParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getElementsLiteralWordParserRuleCall_1_0()); }
		ruleLiteralWord
		{ after(grammarAccess.getWordAccess().getElementsLiteralWordParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWord__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralWordAccess().getValuesS_WORD_PARTTerminalRuleCall_1_0()); }
		RULE_S_WORD_PART
		{ after(grammarAccess.getLiteralWordAccess().getValuesS_WORD_PARTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getNameNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getAssignmentAccess().getNameNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0()); }
		ruleIndexEvaluation
		{ after(grammarAccess.getAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueAssignableParserRuleCall_3_0()); }
		ruleAssignable
		{ after(grammarAccess.getAssignmentAccess().getValueAssignableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLAssignmentAccess().getNameNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getLAssignmentAccess().getNameNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0()); }
		ruleIndexEvaluation
		{ after(grammarAccess.getLAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LAssignment__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLAssignmentAccess().getValueAssignableParserRuleCall_2_1_0()); }
		ruleAssignable
		{ after(grammarAccess.getLAssignmentAccess().getValueAssignableParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Words__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordsAccess().getElementsWordElementParserRuleCall_0()); }
		ruleWordElement
		{ after(grammarAccess.getWordsAccess().getElementsWordElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DQString__ElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDQStringAccess().getElementsStringElementParserRuleCall_2_0()); }
		ruleStringElement
		{ after(grammarAccess.getDQStringAccess().getElementsStringElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralStringPart__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralStringPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0()); }
		RULE_WORD_PART
		{ after(grammarAccess.getLiteralStringPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__ValuesAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_0_0()); }
		RULE_WORD_PART
		{ after(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__ValuesAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_1_1_0()); }
		RULE_WORD_PART
		{ after(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralWordPart__ValuesAssignment_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_2_1_0()); }
		RULE_WORD_PART
		{ after(grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondOrAnd__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondOrAndAccess().getRightCondExpParserRuleCall_1_2_0()); }
		ruleCondExp
		{ after(grammarAccess.getCondOrAndAccess().getRightCondExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getOpC_S_OPTerminalRuleCall_0_1_0()); }
		RULE_C_S_OP
		{ after(grammarAccess.getCondExpAccess().getOpC_S_OPTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getOperandWordParserRuleCall_0_2_0()); }
		ruleWord
		{ after(grammarAccess.getCondExpAccess().getOperandWordParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__OpAssignment_1_1_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getOpC_B_OPTerminalRuleCall_1_1_1_0_0_0()); }
		RULE_C_B_OP
		{ after(grammarAccess.getCondExpAccess().getOpC_B_OPTerminalRuleCall_1_1_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__RightAssignment_1_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getRightWordParserRuleCall_1_1_1_0_1_0()); }
		ruleWord
		{ after(grammarAccess.getCondExpAccess().getRightWordParserRuleCall_1_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__OpAssignment_1_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getOpEqualsSignTildeKeyword_1_1_1_1_0_0()); }
		(
			{ before(grammarAccess.getCondExpAccess().getOpEqualsSignTildeKeyword_1_1_1_1_0_0()); }
			EqualsSignTilde
			{ after(grammarAccess.getCondExpAccess().getOpEqualsSignTildeKeyword_1_1_1_1_0_0()); }
		)
		{ after(grammarAccess.getCondExpAccess().getOpEqualsSignTildeKeyword_1_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondExp__RightAssignment_1_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondExpAccess().getRightRegularExpressionParserRuleCall_1_1_1_1_1_0()); }
		ruleRegularExpression
		{ after(grammarAccess.getCondExpAccess().getRightRegularExpressionParserRuleCall_1_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondConst__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondConstAccess().getValueWordParserRuleCall_0()); }
		ruleWord
		{ after(grammarAccess.getCondConstAccess().getValueWordParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getOpVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRegularExpressionAccess().getOpVerticalLineKeyword_1_1_0()); }
			VerticalLine
			{ after(grammarAccess.getRegularExpressionAccess().getOpVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRegularExpressionAccess().getOpVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getRightRegularElementsParserRuleCall_1_2_0()); }
		ruleRegularElements
		{ after(grammarAccess.getRegularExpressionAccess().getRightRegularElementsParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__PartsAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_0_1_0()); }
		ruleWord
		{ after(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularElements__PartsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluation__EndAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexEvaluationAccess().getEndIndexEvaluationEndParserRuleCall_1_0()); }
		ruleIndexEvaluationEnd
		{ after(grammarAccess.getIndexEvaluationAccess().getEndIndexEvaluationEndParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexEvaluationStart__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexEvaluationStartAccess().getExpressionEvaluationParserRuleCall_1_0()); }
		ruleEvaluation
		{ after(grammarAccess.getIndexEvaluationStartAccess().getExpressionEvaluationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpansionStart__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticExpansionStartAccess().getExpressionEvaluationParserRuleCall_1_0()); }
		ruleEvaluation
		{ after(grammarAccess.getArithmeticExpansionStartAccess().getExpressionEvaluationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__EndAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionAccess().getEndParameterExpansionEndParserRuleCall_0_1_0()); }
		ruleParameterExpansionEnd
		{ after(grammarAccess.getParameterExpansionAccess().getEndParameterExpansionEndParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansion__RefAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionAccess().getRefAssignmentCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getParameterExpansionAccess().getRefAssignmentVARIABLETerminalRuleCall_1_1_0_1()); }
			RULE_VARIABLE
			{ after(grammarAccess.getParameterExpansionAccess().getRefAssignmentVARIABLETerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getParameterExpansionAccess().getRefAssignmentCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__HashAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getHashNumberSignKeyword_2_0()); }
		(
			{ before(grammarAccess.getParameterExpansionStartAccess().getHashNumberSignKeyword_2_0()); }
			NumberSign
			{ after(grammarAccess.getParameterExpansionStartAccess().getHashNumberSignKeyword_2_0()); }
		)
		{ after(grammarAccess.getParameterExpansionStartAccess().getHashNumberSignKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__RefAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getRefAssignmentCrossReference_3_0_0()); }
		(
			{ before(grammarAccess.getParameterExpansionStartAccess().getRefAssignmentNAMETerminalRuleCall_3_0_0_1()); }
			RULE_NAME
			{ after(grammarAccess.getParameterExpansionStartAccess().getRefAssignmentNAMETerminalRuleCall_3_0_0_1()); }
		)
		{ after(grammarAccess.getParameterExpansionStartAccess().getRefAssignmentCrossReference_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueI_NUMBERTerminalRuleCall_3_1_0()); }
		RULE_I_NUMBER
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueI_NUMBERTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__ValueAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueQuestionMarkKeyword_3_2_0()); }
		(
			{ before(grammarAccess.getParameterExpansionStartAccess().getValueQuestionMarkKeyword_3_2_0()); }
			QuestionMark
			{ after(grammarAccess.getParameterExpansionStartAccess().getValueQuestionMarkKeyword_3_2_0()); }
		)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueQuestionMarkKeyword_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__ValueAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueCommercialAtKeyword_3_3_0()); }
		(
			{ before(grammarAccess.getParameterExpansionStartAccess().getValueCommercialAtKeyword_3_3_0()); }
			CommercialAt
			{ after(grammarAccess.getParameterExpansionStartAccess().getValueCommercialAtKeyword_3_3_0()); }
		)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueCommercialAtKeyword_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__ValueAssignment_3_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getValueAsteriskKeyword_3_4_0()); }
		(
			{ before(grammarAccess.getParameterExpansionStartAccess().getValueAsteriskKeyword_3_4_0()); }
			Asterisk
			{ after(grammarAccess.getParameterExpansionStartAccess().getValueAsteriskKeyword_3_4_0()); }
		)
		{ after(grammarAccess.getParameterExpansionStartAccess().getValueAsteriskKeyword_3_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__IndexAssignment_4_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getIndexEvaluationParserRuleCall_4_1_2_0()); }
		ruleEvaluation
		{ after(grammarAccess.getParameterExpansionStartAccess().getIndexEvaluationParserRuleCall_4_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpansionStart__ReplacerAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterExpansionStartAccess().getReplacerParameterProcessorParserRuleCall_5_0()); }
		ruleParameterProcessor
		{ after(grammarAccess.getParameterExpansionStartAccess().getReplacerParameterProcessorParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpFollowWordOpEnumRuleCall_0_1_0()); }
		ruleFollowWordOp
		{ after(grammarAccess.getParameterProcessorAccess().getOpFollowWordOpEnumRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__WordAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getWordWordParserRuleCall_0_2_0()); }
		ruleWord
		{ after(grammarAccess.getParameterProcessorAccess().getWordWordParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpAlternatives_1_1_0()); }
		(rule__ParameterProcessor__OpAlternatives_1_1_0)
		{ after(grammarAccess.getParameterProcessorAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OriginalAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOriginalWordParserRuleCall_1_2_0_0()); }
		ruleWord
		{ after(grammarAccess.getParameterProcessorAccess().getOriginalWordParserRuleCall_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__ReplaceAssignment_1_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_1_2_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_1_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__OpAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getOpAlternatives_2_1_0()); }
		(rule__ParameterProcessor__OpAlternatives_2_1_0)
		{ after(grammarAccess.getParameterProcessorAccess().getOpAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__ReplaceAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_2_3_0()); }
		ruleWord
		{ after(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__StartAssignment_3_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getStartEvaluationParserRuleCall_3_2_0_0()); }
		ruleEvaluation
		{ after(grammarAccess.getParameterProcessorAccess().getStartEvaluationParserRuleCall_3_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__LengthAssignment_3_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_3_2_1_1_0()); }
		ruleEvaluation
		{ after(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_3_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterProcessor__LengthAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_4_3_0()); }
		ruleEvaluation
		{ after(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitution__EndAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandSubstitutionAccess().getEndCommandSubstitutionStartEndParserRuleCall_1_0()); }
		ruleCommandSubstitutionStartEnd
		{ after(grammarAccess.getCommandSubstitutionAccess().getEndCommandSubstitutionStartEndParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandSubstitutionStart__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandSubstitutionStartAccess().getCommandsCompoundListParserRuleCall_1_0()); }
		ruleCompoundList
		{ after(grammarAccess.getCommandSubstitutionStartAccess().getCommandsCompoundListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitution__EndAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessSubstitutionAccess().getEndProcessSubstitutionEndParserRuleCall_1_0()); }
		ruleProcessSubstitutionEnd
		{ after(grammarAccess.getProcessSubstitutionAccess().getEndProcessSubstitutionEndParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessSubstitutionStartAccess().getOpAlternatives_0_0()); }
		(rule__ProcessSubstitutionStart__OpAlternatives_0_0)
		{ after(grammarAccess.getProcessSubstitutionStartAccess().getOpAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessSubstitutionStart__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessSubstitutionStartAccess().getBodyCompoundListParserRuleCall_1_0()); }
		ruleCompoundList
		{ after(grammarAccess.getProcessSubstitutionStartAccess().getBodyCompoundListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvaluationAccess().getOpCommaKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getEvaluationAccess().getOpCommaKeyword_1_1_0()); }
			Comma
			{ after(grammarAccess.getEvaluationAccess().getOpCommaKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getEvaluationAccess().getOpCommaKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvaluationAccess().getRightArithmeticParserRuleCall_1_2_0()); }
		ruleArithmetic
		{ after(grammarAccess.getEvaluationAccess().getRightArithmeticParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__LeftAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getLeftVariableIdParserRuleCall_0_1_0()); }
		ruleVariableId
		{ after(grammarAccess.getArithmeticAccess().getLeftVariableIdParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__OpAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getOpAlternatives_0_2_0()); }
		(rule__Arithmetic__OpAlternatives_0_2_0)
		{ after(grammarAccess.getArithmeticAccess().getOpAlternatives_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__RightAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getRightArithmeticParserRuleCall_0_3_0()); }
		ruleArithmetic
		{ after(grammarAccess.getArithmeticAccess().getRightArithmeticParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__FirstAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getFirstConditionalOperatorParserRuleCall_1_2_0()); }
		ruleConditionalOperator
		{ after(grammarAccess.getConditionalOperatorAccess().getFirstConditionalOperatorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__RightAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getRightConditionalOperatorParserRuleCall_1_4_0()); }
		ruleConditionalOperator
		{ after(grammarAccess.getConditionalOperatorAccess().getRightConditionalOperatorParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getLogicOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
			VerticalLineVerticalLine
			{ after(grammarAccess.getLogicOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getLogicOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicOrAccess().getRightLogicAndParserRuleCall_1_2_0()); }
		ruleLogicAnd
		{ after(grammarAccess.getLogicOrAccess().getRightLogicAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getLogicAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
			AmpersandAmpersand
			{ after(grammarAccess.getLogicAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getLogicAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicAnd__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAndAccess().getRightBitwiseORParserRuleCall_1_2_0()); }
		ruleBitwiseOR
		{ after(grammarAccess.getLogicAndAccess().getRightBitwiseORParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseORAccess().getOpVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getBitwiseORAccess().getOpVerticalLineKeyword_1_1_0()); }
			VerticalLine
			{ after(grammarAccess.getBitwiseORAccess().getOpVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getBitwiseORAccess().getOpVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOR__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseORAccess().getRightBitwiseExclusiveORParserRuleCall_1_2_0()); }
		ruleBitwiseExclusiveOR
		{ after(grammarAccess.getBitwiseORAccess().getRightBitwiseExclusiveORParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseExclusiveORAccess().getOpCircumflexAccentKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getBitwiseExclusiveORAccess().getOpCircumflexAccentKeyword_1_1_0()); }
			CircumflexAccent
			{ after(grammarAccess.getBitwiseExclusiveORAccess().getOpCircumflexAccentKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getBitwiseExclusiveORAccess().getOpCircumflexAccentKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExclusiveOR__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseExclusiveORAccess().getRightBitwiseANDParserRuleCall_1_2_0()); }
		ruleBitwiseAND
		{ after(grammarAccess.getBitwiseExclusiveORAccess().getRightBitwiseANDParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseANDAccess().getOpAmpersandKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getBitwiseANDAccess().getOpAmpersandKeyword_1_1_0()); }
			Ampersand
			{ after(grammarAccess.getBitwiseANDAccess().getOpAmpersandKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getBitwiseANDAccess().getOpAmpersandKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAND__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseANDAccess().getRightEqualityAndInequalityParserRuleCall_1_2_0()); }
		ruleEqualityAndInequality
		{ after(grammarAccess.getBitwiseANDAccess().getRightEqualityAndInequalityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAndInequalityAccess().getOpAlternatives_1_1_0()); }
		(rule__EqualityAndInequality__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAndInequalityAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityAndInequality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAndInequalityAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAndInequalityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
		(rule__Comparison__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightBitwiseShiftsParserRuleCall_1_2_0()); }
		ruleBitwiseShifts
		{ after(grammarAccess.getComparisonAccess().getRightBitwiseShiftsParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseShiftsAccess().getOpAlternatives_1_1_0()); }
		(rule__BitwiseShifts__OpAlternatives_1_1_0)
		{ after(grammarAccess.getBitwiseShiftsAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseShifts__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitwiseShiftsAccess().getRightAdditionSubtractionParserRuleCall_1_2_0()); }
		ruleAdditionSubtraction
		{ after(grammarAccess.getBitwiseShiftsAccess().getRightAdditionSubtractionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getOpAlternatives_1_1_0()); }
		(rule__AdditionSubtraction__OpAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionSubtractionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionRemainderParserRuleCall_1_2_0()); }
		ruleMultiplicationDivisionRemainder
		{ after(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionRemainderParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAlternatives_1_1_0()); }
		(rule__MultiplicationDivisionRemainder__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivisionRemainder__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightExponentiationParserRuleCall_1_2_0()); }
		ruleExponentiation
		{ after(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightExponentiationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getExponentiationAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
			AsteriskAsterisk
			{ after(grammarAccess.getExponentiationAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getExponentiationAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponentiation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationAccess().getRightExponentiationParserRuleCall_1_2_0()); }
		ruleExponentiation
		{ after(grammarAccess.getExponentiationAccess().getRightExponentiationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAlternatives_0_1_0()); }
		(rule__LogicalAndBitwiseNegation__OpAlternatives_0_1_0)
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndBitwiseNegation__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0()); }
		ruleLogicalAndBitwiseNegation
		{ after(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOpAlternatives_0_1_0()); }
		(rule__UnaryMinusAndPlus__OpAlternatives_0_1_0)
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOpAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusAndPlus__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryMinusAndPlusAccess().getOperandUnaryMinusAndPlusParserRuleCall_0_2_0()); }
		ruleUnaryMinusAndPlus
		{ after(grammarAccess.getUnaryMinusAndPlusAccess().getOperandUnaryMinusAndPlusParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDecrementAccess().getOpAlternatives_0_1_0()); }
		(rule__PreDecrement__OpAlternatives_0_1_0)
		{ after(grammarAccess.getPreDecrementAccess().getOpAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDecrement__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDecrementAccess().getOperandPostDecrementParserRuleCall_0_2_0()); }
		rulePostDecrement
		{ after(grammarAccess.getPreDecrementAccess().getOperandPostDecrementParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrement__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostDecrementAccess().getOpAlternatives_1_1_0()); }
		(rule__PostDecrement__OpAlternatives_1_1_0)
		{ after(grammarAccess.getPostDecrementAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__PrefixAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_0_1_0()); }
		RULE_A_PREFIX
		{ after(grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__ValueAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getValueI_NUMBERTerminalRuleCall_0_2_0()); }
		RULE_I_NUMBER
		{ after(grammarAccess.getPrimaryItemAccess().getValueI_NUMBERTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__PrefixAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_2_1_0()); }
		RULE_A_PREFIX
		{ after(grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryItem__ValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryItemAccess().getValueExpansionParserRuleCall_2_2_0()); }
		ruleExpansion
		{ after(grammarAccess.getPrimaryItemAccess().getValueExpansionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableIdAccess().getRefAssignmentCrossReference_1_0()); }
		(
			{ before(grammarAccess.getVariableIdAccess().getRefAssignmentNAMETerminalRuleCall_1_0_1()); }
			RULE_NAME
			{ after(grammarAccess.getVariableIdAccess().getRefAssignmentNAMETerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getVariableIdAccess().getRefAssignmentCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
