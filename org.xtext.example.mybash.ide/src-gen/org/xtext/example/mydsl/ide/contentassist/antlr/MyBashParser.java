/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyBashParser;
import org.xtext.example.mydsl.services.MyBashGrammarAccess;

public class MyBashParser extends AbstractContentAssistParser {

	@Inject
	private MyBashGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyBashParser createParser() {
		InternalMyBashParser result = new InternalMyBashParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBashAccess().getAlternatives(), "rule__Bash__Alternatives");
					put(grammarAccess.getBashAccess().getAlternatives_1_1(), "rule__Bash__Alternatives_1_1");
					put(grammarAccess.getSimpleListAccess().getAlternatives_1_1(), "rule__SimpleList__Alternatives_1_1");
					put(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_0_0_0(), "rule__SimpleList__OpAlternatives_1_1_0_0_0");
					put(grammarAccess.getSimpleListAccess().getOpAlternatives_1_1_1_0(), "rule__SimpleList__OpAlternatives_1_1_1_0");
					put(grammarAccess.getSimpleListAccess().getAlternatives_2(), "rule__SimpleList__Alternatives_2");
					put(grammarAccess.getPipelineCommandAccess().getAlternatives(), "rule__PipelineCommand__Alternatives");
					put(grammarAccess.getPipelineAccess().getOpAlternatives_1_1_0(), "rule__Pipeline__OpAlternatives_1_1_0");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getFunctionDefineAccess().getAlternatives(), "rule__FunctionDefine__Alternatives");
					put(grammarAccess.getSimpleCommandAccess().getAlternatives(), "rule__SimpleCommand__Alternatives");
					put(grammarAccess.getSimpleCommandAccess().getAlternatives_0_1_1(), "rule__SimpleCommand__Alternatives_0_1_1");
					put(grammarAccess.getSimpleCommandAccess().getAlternatives_1_1(), "rule__SimpleCommand__Alternatives_1_1");
					put(grammarAccess.getSimpleCommandAccess().getParametersAlternatives_1_1_0_0(), "rule__SimpleCommand__ParametersAlternatives_1_1_0_0");
					put(grammarAccess.getShellCommandAccess().getAlternatives(), "rule__ShellCommand__Alternatives");
					put(grammarAccess.getCommandNameAccess().getAlternatives(), "rule__CommandName__Alternatives");
					put(grammarAccess.getCaseStatementAccess().getAlternatives_6_2_0(), "rule__CaseStatement__Alternatives_6_2_0");
					put(grammarAccess.getCasePatternContinueAccess().getFollowAlternatives_0_0_0(), "rule__CasePatternContinue__FollowAlternatives_0_0_0");
					put(grammarAccess.getForStatementAccess().getAlternatives_1(), "rule__ForStatement__Alternatives_1");
					put(grammarAccess.getRedirectionAccess().getAlternatives_1(), "rule__Redirection__Alternatives_1");
					put(grammarAccess.getRedirectionAccess().getOpAlternatives_1_0_1_0(), "rule__Redirection__OpAlternatives_1_0_1_0");
					put(grammarAccess.getRedirectionAccess().getAlternatives_1_0_2(), "rule__Redirection__Alternatives_1_0_2");
					put(grammarAccess.getWordAccess().getAlternatives(), "rule__Word__Alternatives");
					put(grammarAccess.getAssignableAccess().getAlternatives(), "rule__Assignable__Alternatives");
					put(grammarAccess.getExpansionAccess().getAlternatives(), "rule__Expansion__Alternatives");
					put(grammarAccess.getWordElementAccess().getAlternatives(), "rule__WordElement__Alternatives");
					put(grammarAccess.getStringElementAccess().getAlternatives(), "rule__StringElement__Alternatives");
					put(grammarAccess.getLiteralWordPartAccess().getAlternatives_1_0(), "rule__LiteralWordPart__Alternatives_1_0");
					put(grammarAccess.getCondOrAndAccess().getAlternatives_1_1(), "rule__CondOrAnd__Alternatives_1_1");
					put(grammarAccess.getCondExpAccess().getAlternatives(), "rule__CondExp__Alternatives");
					put(grammarAccess.getCondExpAccess().getAlternatives_1_1_1(), "rule__CondExp__Alternatives_1_1_1");
					put(grammarAccess.getRegularElementsAccess().getAlternatives_1(), "rule__RegularElements__Alternatives_1");
					put(grammarAccess.getParameterExpansionAccess().getAlternatives(), "rule__ParameterExpansion__Alternatives");
					put(grammarAccess.getParameterExpansionStartAccess().getAlternatives_3(), "rule__ParameterExpansionStart__Alternatives_3");
					put(grammarAccess.getParameterExpansionStartAccess().getAlternatives_4_1(), "rule__ParameterExpansionStart__Alternatives_4_1");
					put(grammarAccess.getParameterProcessorAccess().getAlternatives(), "rule__ParameterProcessor__Alternatives");
					put(grammarAccess.getParameterProcessorAccess().getOpAlternatives_1_1_0(), "rule__ParameterProcessor__OpAlternatives_1_1_0");
					put(grammarAccess.getParameterProcessorAccess().getOpAlternatives_2_1_0(), "rule__ParameterProcessor__OpAlternatives_2_1_0");
					put(grammarAccess.getProcessSubstitutionStartAccess().getOpAlternatives_0_0(), "rule__ProcessSubstitutionStart__OpAlternatives_0_0");
					put(grammarAccess.getArithmeticAccess().getAlternatives(), "rule__Arithmetic__Alternatives");
					put(grammarAccess.getArithmeticAccess().getOpAlternatives_0_2_0(), "rule__Arithmetic__OpAlternatives_0_2_0");
					put(grammarAccess.getEqualityAndInequalityAccess().getOpAlternatives_1_1_0(), "rule__EqualityAndInequality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getBitwiseShiftsAccess().getOpAlternatives_1_1_0(), "rule__BitwiseShifts__OpAlternatives_1_1_0");
					put(grammarAccess.getAdditionSubtractionAccess().getOpAlternatives_1_1_0(), "rule__AdditionSubtraction__OpAlternatives_1_1_0");
					put(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAlternatives_1_1_0(), "rule__MultiplicationDivisionRemainder__OpAlternatives_1_1_0");
					put(grammarAccess.getLogicalAndBitwiseNegationAccess().getAlternatives(), "rule__LogicalAndBitwiseNegation__Alternatives");
					put(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAlternatives_0_1_0(), "rule__LogicalAndBitwiseNegation__OpAlternatives_0_1_0");
					put(grammarAccess.getUnaryMinusAndPlusAccess().getAlternatives(), "rule__UnaryMinusAndPlus__Alternatives");
					put(grammarAccess.getUnaryMinusAndPlusAccess().getOpAlternatives_0_1_0(), "rule__UnaryMinusAndPlus__OpAlternatives_0_1_0");
					put(grammarAccess.getPreDecrementAccess().getAlternatives(), "rule__PreDecrement__Alternatives");
					put(grammarAccess.getPreDecrementAccess().getOpAlternatives_0_1_0(), "rule__PreDecrement__OpAlternatives_0_1_0");
					put(grammarAccess.getPostDecrementAccess().getOpAlternatives_1_1_0(), "rule__PostDecrement__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryItemAccess().getAlternatives(), "rule__PrimaryItem__Alternatives");
					put(grammarAccess.getListTerminatorAccess().getAlternatives(), "rule__ListTerminator__Alternatives");
					put(grammarAccess.getHereDocAccess().getAlternatives_1(), "rule__HereDoc__Alternatives_1");
					put(grammarAccess.getFollowWordOpAccess().getAlternatives(), "rule__FollowWordOp__Alternatives");
					put(grammarAccess.getBashAccess().getGroup_0(), "rule__Bash__Group_0__0");
					put(grammarAccess.getBashAccess().getGroup_0_2(), "rule__Bash__Group_0_2__0");
					put(grammarAccess.getBashAccess().getGroup_0_2_1(), "rule__Bash__Group_0_2_1__0");
					put(grammarAccess.getBashAccess().getGroup_1(), "rule__Bash__Group_1__0");
					put(grammarAccess.getCompoundListAccess().getGroup(), "rule__CompoundList__Group__0");
					put(grammarAccess.getCompoundListAccess().getGroup_1(), "rule__CompoundList__Group_1__0");
					put(grammarAccess.getCompoundListAccess().getGroup_1_1(), "rule__CompoundList__Group_1_1__0");
					put(grammarAccess.getSimpleListAccess().getGroup(), "rule__SimpleList__Group__0");
					put(grammarAccess.getSimpleListAccess().getGroup_1(), "rule__SimpleList__Group_1__0");
					put(grammarAccess.getSimpleListAccess().getGroup_1_1_0(), "rule__SimpleList__Group_1_1_0__0");
					put(grammarAccess.getPipelineCommandAccess().getGroup_0(), "rule__PipelineCommand__Group_0__0");
					put(grammarAccess.getPipelineAccess().getGroup(), "rule__Pipeline__Group__0");
					put(grammarAccess.getPipelineAccess().getGroup_1(), "rule__Pipeline__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getFunctionDefineAccess().getGroup_0(), "rule__FunctionDefine__Group_0__0");
					put(grammarAccess.getFunctionDefineAccess().getGroup_0_3(), "rule__FunctionDefine__Group_0_3__0");
					put(grammarAccess.getFunctionDefineAccess().getGroup_0_3_0(), "rule__FunctionDefine__Group_0_3_0__0");
					put(grammarAccess.getFunctionDefineAccess().getGroup_1(), "rule__FunctionDefine__Group_1__0");
					put(grammarAccess.getFunctionDefineAccess().getGroup_1_2(), "rule__FunctionDefine__Group_1_2__0");
					put(grammarAccess.getSimpleCommandAccess().getGroup_0(), "rule__SimpleCommand__Group_0__0");
					put(grammarAccess.getSimpleCommandAccess().getGroup_0_1(), "rule__SimpleCommand__Group_0_1__0");
					put(grammarAccess.getSimpleCommandAccess().getGroup_1(), "rule__SimpleCommand__Group_1__0");
					put(grammarAccess.getGroupCommandAccess().getGroup(), "rule__GroupCommand__Group__0");
					put(grammarAccess.getCondCommandAccess().getGroup(), "rule__CondCommand__Group__0");
					put(grammarAccess.getArithmeticCommandAccess().getGroup(), "rule__ArithmeticCommand__Group__0");
					put(grammarAccess.getSubshellAccess().getGroup(), "rule__Subshell__Group__0");
					put(grammarAccess.getCommandNameAccess().getGroup_0(), "rule__CommandName__Group_0__0");
					put(grammarAccess.getCaseStatementAccess().getGroup(), "rule__CaseStatement__Group__0");
					put(grammarAccess.getCaseStatementAccess().getGroup_6(), "rule__CaseStatement__Group_6__0");
					put(grammarAccess.getCaseStatementAccess().getGroup_6_2(), "rule__CaseStatement__Group_6_2__0");
					put(grammarAccess.getCasePatternAccess().getGroup(), "rule__CasePattern__Group__0");
					put(grammarAccess.getCasePatternContinueAccess().getGroup(), "rule__CasePatternContinue__Group__0");
					put(grammarAccess.getCasePatternContinueAccess().getGroup_0(), "rule__CasePatternContinue__Group_0__0");
					put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
					put(grammarAccess.getPatternAccess().getGroup_1(), "rule__Pattern__Group_1__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_6(), "rule__IfStatement__Group_6__0");
					put(grammarAccess.getElseIfBlockAccess().getGroup(), "rule__ElseIfBlock__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup_1_0(), "rule__ForStatement__Group_1_0__0");
					put(grammarAccess.getForStatementAccess().getGroup_1_0_8(), "rule__ForStatement__Group_1_0_8__0");
					put(grammarAccess.getForStatementAccess().getGroup_1_1(), "rule__ForStatement__Group_1_1__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getRedirectionAccess().getGroup(), "rule__Redirection__Group__0");
					put(grammarAccess.getRedirectionAccess().getGroup_1_0(), "rule__Redirection__Group_1_0__0");
					put(grammarAccess.getRedirectionAccess().getGroup_1_1(), "rule__Redirection__Group_1_1__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayStartAccess().getGroup(), "rule__ArrayStart__Group__0");
					put(grammarAccess.getArrayStartAccess().getGroup_2(), "rule__ArrayStart__Group_2__0");
					put(grammarAccess.getLiteralWordAccess().getGroup(), "rule__LiteralWord__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getLAssignmentAccess().getGroup(), "rule__LAssignment__Group__0");
					put(grammarAccess.getLAssignmentAccess().getGroup_2(), "rule__LAssignment__Group_2__0");
					put(grammarAccess.getDQStringAccess().getGroup(), "rule__DQString__Group__0");
					put(grammarAccess.getLiteralStringPartAccess().getGroup(), "rule__LiteralStringPart__Group__0");
					put(grammarAccess.getLiteralWordPartAccess().getGroup(), "rule__LiteralWordPart__Group__0");
					put(grammarAccess.getLiteralWordPartAccess().getGroup_1(), "rule__LiteralWordPart__Group_1__0");
					put(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_1(), "rule__LiteralWordPart__Group_1_0_1__0");
					put(grammarAccess.getLiteralWordPartAccess().getGroup_1_0_2(), "rule__LiteralWordPart__Group_1_0_2__0");
					put(grammarAccess.getCondOrAndAccess().getGroup(), "rule__CondOrAnd__Group__0");
					put(grammarAccess.getCondOrAndAccess().getGroup_1(), "rule__CondOrAnd__Group_1__0");
					put(grammarAccess.getCondExpAccess().getGroup_0(), "rule__CondExp__Group_0__0");
					put(grammarAccess.getCondExpAccess().getGroup_1(), "rule__CondExp__Group_1__0");
					put(grammarAccess.getCondExpAccess().getGroup_1_1(), "rule__CondExp__Group_1_1__0");
					put(grammarAccess.getCondExpAccess().getGroup_1_1_1_0(), "rule__CondExp__Group_1_1_1_0__0");
					put(grammarAccess.getCondExpAccess().getGroup_1_1_1_1(), "rule__CondExp__Group_1_1_1_1__0");
					put(grammarAccess.getCondExpAccess().getGroup_2(), "rule__CondExp__Group_2__0");
					put(grammarAccess.getRegularExpressionAccess().getGroup(), "rule__RegularExpression__Group__0");
					put(grammarAccess.getRegularExpressionAccess().getGroup_1(), "rule__RegularExpression__Group_1__0");
					put(grammarAccess.getRegularElementsAccess().getGroup(), "rule__RegularElements__Group__0");
					put(grammarAccess.getRegularElementsAccess().getGroup_1_0(), "rule__RegularElements__Group_1_0__0");
					put(grammarAccess.getArithmeticExpansionAccess().getGroup(), "rule__ArithmeticExpansion__Group__0");
					put(grammarAccess.getIndexEvaluationAccess().getGroup(), "rule__IndexEvaluation__Group__0");
					put(grammarAccess.getIndexEvaluationStartAccess().getGroup(), "rule__IndexEvaluationStart__Group__0");
					put(grammarAccess.getArithmeticExpansionStartAccess().getGroup(), "rule__ArithmeticExpansionStart__Group__0");
					put(grammarAccess.getParameterExpansionAccess().getGroup_0(), "rule__ParameterExpansion__Group_0__0");
					put(grammarAccess.getParameterExpansionAccess().getGroup_1(), "rule__ParameterExpansion__Group_1__0");
					put(grammarAccess.getParameterExpansionStartAccess().getGroup(), "rule__ParameterExpansionStart__Group__0");
					put(grammarAccess.getParameterExpansionStartAccess().getGroup_4(), "rule__ParameterExpansionStart__Group_4__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_0(), "rule__ParameterProcessor__Group_0__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_1(), "rule__ParameterProcessor__Group_1__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_1_2(), "rule__ParameterProcessor__Group_1_2__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_1_2_1(), "rule__ParameterProcessor__Group_1_2_1__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_2(), "rule__ParameterProcessor__Group_2__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_3(), "rule__ParameterProcessor__Group_3__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_3_2(), "rule__ParameterProcessor__Group_3_2__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_3_2_1(), "rule__ParameterProcessor__Group_3_2_1__0");
					put(grammarAccess.getParameterProcessorAccess().getGroup_4(), "rule__ParameterProcessor__Group_4__0");
					put(grammarAccess.getCommandSubstitutionAccess().getGroup(), "rule__CommandSubstitution__Group__0");
					put(grammarAccess.getCommandSubstitutionStartAccess().getGroup(), "rule__CommandSubstitutionStart__Group__0");
					put(grammarAccess.getProcessSubstitutionAccess().getGroup(), "rule__ProcessSubstitution__Group__0");
					put(grammarAccess.getProcessSubstitutionStartAccess().getGroup(), "rule__ProcessSubstitutionStart__Group__0");
					put(grammarAccess.getEvaluationAccess().getGroup(), "rule__Evaluation__Group__0");
					put(grammarAccess.getEvaluationAccess().getGroup_1(), "rule__Evaluation__Group_1__0");
					put(grammarAccess.getArithmeticAccess().getGroup_0(), "rule__Arithmetic__Group_0__0");
					put(grammarAccess.getConditionalOperatorAccess().getGroup(), "rule__ConditionalOperator__Group__0");
					put(grammarAccess.getConditionalOperatorAccess().getGroup_1(), "rule__ConditionalOperator__Group_1__0");
					put(grammarAccess.getLogicOrAccess().getGroup(), "rule__LogicOr__Group__0");
					put(grammarAccess.getLogicOrAccess().getGroup_1(), "rule__LogicOr__Group_1__0");
					put(grammarAccess.getLogicAndAccess().getGroup(), "rule__LogicAnd__Group__0");
					put(grammarAccess.getLogicAndAccess().getGroup_1(), "rule__LogicAnd__Group_1__0");
					put(grammarAccess.getBitwiseORAccess().getGroup(), "rule__BitwiseOR__Group__0");
					put(grammarAccess.getBitwiseORAccess().getGroup_1(), "rule__BitwiseOR__Group_1__0");
					put(grammarAccess.getBitwiseExclusiveORAccess().getGroup(), "rule__BitwiseExclusiveOR__Group__0");
					put(grammarAccess.getBitwiseExclusiveORAccess().getGroup_1(), "rule__BitwiseExclusiveOR__Group_1__0");
					put(grammarAccess.getBitwiseANDAccess().getGroup(), "rule__BitwiseAND__Group__0");
					put(grammarAccess.getBitwiseANDAccess().getGroup_1(), "rule__BitwiseAND__Group_1__0");
					put(grammarAccess.getEqualityAndInequalityAccess().getGroup(), "rule__EqualityAndInequality__Group__0");
					put(grammarAccess.getEqualityAndInequalityAccess().getGroup_1(), "rule__EqualityAndInequality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getBitwiseShiftsAccess().getGroup(), "rule__BitwiseShifts__Group__0");
					put(grammarAccess.getBitwiseShiftsAccess().getGroup_1(), "rule__BitwiseShifts__Group_1__0");
					put(grammarAccess.getAdditionSubtractionAccess().getGroup(), "rule__AdditionSubtraction__Group__0");
					put(grammarAccess.getAdditionSubtractionAccess().getGroup_1(), "rule__AdditionSubtraction__Group_1__0");
					put(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup(), "rule__MultiplicationDivisionRemainder__Group__0");
					put(grammarAccess.getMultiplicationDivisionRemainderAccess().getGroup_1(), "rule__MultiplicationDivisionRemainder__Group_1__0");
					put(grammarAccess.getExponentiationAccess().getGroup(), "rule__Exponentiation__Group__0");
					put(grammarAccess.getExponentiationAccess().getGroup_1(), "rule__Exponentiation__Group_1__0");
					put(grammarAccess.getLogicalAndBitwiseNegationAccess().getGroup_0(), "rule__LogicalAndBitwiseNegation__Group_0__0");
					put(grammarAccess.getUnaryMinusAndPlusAccess().getGroup_0(), "rule__UnaryMinusAndPlus__Group_0__0");
					put(grammarAccess.getPreDecrementAccess().getGroup_0(), "rule__PreDecrement__Group_0__0");
					put(grammarAccess.getPostDecrementAccess().getGroup(), "rule__PostDecrement__Group__0");
					put(grammarAccess.getPostDecrementAccess().getGroup_1(), "rule__PostDecrement__Group_1__0");
					put(grammarAccess.getPrimaryItemAccess().getGroup_0(), "rule__PrimaryItem__Group_0__0");
					put(grammarAccess.getPrimaryItemAccess().getGroup_1(), "rule__PrimaryItem__Group_1__0");
					put(grammarAccess.getPrimaryItemAccess().getGroup_2(), "rule__PrimaryItem__Group_2__0");
					put(grammarAccess.getVariableIdAccess().getGroup(), "rule__VariableId__Group__0");
					put(grammarAccess.getNewLineAccess().getGroup(), "rule__NewLine__Group__0");
					put(grammarAccess.getHereDocAccess().getGroup(), "rule__HereDoc__Group__0");
					put(grammarAccess.getBashAccess().getCommandsAssignment_0_2_0(), "rule__Bash__CommandsAssignment_0_2_0");
					put(grammarAccess.getBashAccess().getCommandsAssignment_0_2_1_1(), "rule__Bash__CommandsAssignment_0_2_1_1");
					put(grammarAccess.getBashAccess().getErrorAssignment_1_1_0(), "rule__Bash__ErrorAssignment_1_1_0");
					put(grammarAccess.getBashAccess().getErrorAssignment_1_1_1(), "rule__Bash__ErrorAssignment_1_1_1");
					put(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_0(), "rule__CompoundList__CommandsAssignment_1_0");
					put(grammarAccess.getCompoundListAccess().getCommandsAssignment_1_1_1(), "rule__CompoundList__CommandsAssignment_1_1_1");
					put(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_0_0(), "rule__SimpleList__OpAssignment_1_1_0_0");
					put(grammarAccess.getSimpleListAccess().getOpAssignment_1_1_1(), "rule__SimpleList__OpAssignment_1_1_1");
					put(grammarAccess.getSimpleListAccess().getRightAssignment_1_2(), "rule__SimpleList__RightAssignment_1_2");
					put(grammarAccess.getSimpleListAccess().getBackendAssignment_2_0(), "rule__SimpleList__BackendAssignment_2_0");
					put(grammarAccess.getPipelineCommandAccess().getNotAssignment_0_1(), "rule__PipelineCommand__NotAssignment_0_1");
					put(grammarAccess.getPipelineCommandAccess().getPipelineAssignment_0_2(), "rule__PipelineCommand__PipelineAssignment_0_2");
					put(grammarAccess.getPipelineAccess().getOpAssignment_1_1(), "rule__Pipeline__OpAssignment_1_1");
					put(grammarAccess.getPipelineAccess().getRightAssignment_1_3(), "rule__Pipeline__RightAssignment_1_3");
					put(grammarAccess.getCommandAccess().getRedirectsAssignment_2_1(), "rule__Command__RedirectsAssignment_2_1");
					put(grammarAccess.getFunctionDefineAccess().getNameAssignment_0_2(), "rule__FunctionDefine__NameAssignment_0_2");
					put(grammarAccess.getFunctionDefineAccess().getBodyAssignment_0_4(), "rule__FunctionDefine__BodyAssignment_0_4");
					put(grammarAccess.getFunctionDefineAccess().getNameAssignment_1_1(), "rule__FunctionDefine__NameAssignment_1_1");
					put(grammarAccess.getFunctionDefineAccess().getBodyAssignment_1_3(), "rule__FunctionDefine__BodyAssignment_1_3");
					put(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignment_0_0(), "rule__SimpleCommand__AssignmentsAssignment_0_0");
					put(grammarAccess.getSimpleCommandAccess().getCommandAssignment_0_1_0(), "rule__SimpleCommand__CommandAssignment_0_1_0");
					put(grammarAccess.getSimpleCommandAccess().getParametersAssignment_0_1_1_0(), "rule__SimpleCommand__ParametersAssignment_0_1_1_0");
					put(grammarAccess.getSimpleCommandAccess().getRAssignment_0_1_1_1(), "rule__SimpleCommand__RAssignment_0_1_1_1");
					put(grammarAccess.getSimpleCommandAccess().getCommandAssignment_1_0(), "rule__SimpleCommand__CommandAssignment_1_0");
					put(grammarAccess.getSimpleCommandAccess().getParametersAssignment_1_1_0(), "rule__SimpleCommand__ParametersAssignment_1_1_0");
					put(grammarAccess.getSimpleCommandAccess().getRAssignment_1_1_1(), "rule__SimpleCommand__RAssignment_1_1_1");
					put(grammarAccess.getSimpleCommandAccess().getRAssignment_2(), "rule__SimpleCommand__RAssignment_2");
					put(grammarAccess.getGroupCommandAccess().getBodyAssignment_2(), "rule__GroupCommand__BodyAssignment_2");
					put(grammarAccess.getCondCommandAccess().getExpressionAssignment_1(), "rule__CondCommand__ExpressionAssignment_1");
					put(grammarAccess.getArithmeticCommandAccess().getExpressionAssignment_1(), "rule__ArithmeticCommand__ExpressionAssignment_1");
					put(grammarAccess.getSubshellAccess().getBodyAssignment_1(), "rule__Subshell__BodyAssignment_1");
					put(grammarAccess.getCommandNameAccess().getRefAssignment_0_1(), "rule__CommandName__RefAssignment_0_1");
					put(grammarAccess.getCaseStatementAccess().getVariableAssignment_2(), "rule__CaseStatement__VariableAssignment_2");
					put(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_0(), "rule__CaseStatement__PatternsAssignment_6_0");
					put(grammarAccess.getCaseStatementAccess().getPatternsAssignment_6_1(), "rule__CaseStatement__PatternsAssignment_6_1");
					put(grammarAccess.getCasePatternAccess().getConditionAssignment_1(), "rule__CasePattern__ConditionAssignment_1");
					put(grammarAccess.getCasePatternAccess().getBodyAssignment_3(), "rule__CasePattern__BodyAssignment_3");
					put(grammarAccess.getCasePatternContinueAccess().getFollowAssignment_0_0(), "rule__CasePatternContinue__FollowAssignment_0_0");
					put(grammarAccess.getCasePatternContinueAccess().getConditionAssignment_2(), "rule__CasePatternContinue__ConditionAssignment_2");
					put(grammarAccess.getCasePatternContinueAccess().getBodyAssignment_4(), "rule__CasePatternContinue__BodyAssignment_4");
					put(grammarAccess.getPatternAccess().getPartsAssignment_0(), "rule__Pattern__PartsAssignment_0");
					put(grammarAccess.getPatternAccess().getPartsAssignment_1_1(), "rule__Pattern__PartsAssignment_1_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_2(), "rule__IfStatement__ConditionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getThenAssignment_4(), "rule__IfStatement__ThenAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElseIfBlockAssignment_5(), "rule__IfStatement__ElseIfBlockAssignment_5");
					put(grammarAccess.getIfStatementAccess().getElseAssignment_6_1(), "rule__IfStatement__ElseAssignment_6_1");
					put(grammarAccess.getElseIfBlockAccess().getConditionAssignment_2(), "rule__ElseIfBlock__ConditionAssignment_2");
					put(grammarAccess.getElseIfBlockAccess().getThenAssignment_4(), "rule__ElseIfBlock__ThenAssignment_4");
					put(grammarAccess.getForStatementAccess().getInitAssignment_1_0_2(), "rule__ForStatement__InitAssignment_1_0_2");
					put(grammarAccess.getForStatementAccess().getConditionAssignment_1_0_4(), "rule__ForStatement__ConditionAssignment_1_0_4");
					put(grammarAccess.getForStatementAccess().getStepAssignment_1_0_6(), "rule__ForStatement__StepAssignment_1_0_6");
					put(grammarAccess.getForStatementAccess().getVariableAssignment_1_1_1(), "rule__ForStatement__VariableAssignment_1_1_1");
					put(grammarAccess.getForStatementAccess().getWordsAssignment_1_1_3(), "rule__ForStatement__WordsAssignment_1_1_3");
					put(grammarAccess.getForStatementAccess().getBodyAssignment_3(), "rule__ForStatement__BodyAssignment_3");
					put(grammarAccess.getWhileStatementAccess().getCAssignment_1(), "rule__WhileStatement__CAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getDAssignment_3(), "rule__WhileStatement__DAssignment_3");
					put(grammarAccess.getRedirectionAccess().getOpAssignment_1_0_1(), "rule__Redirection__OpAssignment_1_0_1");
					put(grammarAccess.getRedirectionAccess().getTargetAssignment_1_0_2_0(), "rule__Redirection__TargetAssignment_1_0_2_0");
					put(grammarAccess.getRedirectionAccess().getOpAssignment_1_1_0(), "rule__Redirection__OpAssignment_1_1_0");
					put(grammarAccess.getArrayStartAccess().getWordsAssignment_2_1(), "rule__ArrayStart__WordsAssignment_2_1");
					put(grammarAccess.getWordAccess().getElementsAssignment_1(), "rule__Word__ElementsAssignment_1");
					put(grammarAccess.getLiteralWordAccess().getValuesAssignment_1(), "rule__LiteralWord__ValuesAssignment_1");
					put(grammarAccess.getAssignmentAccess().getNameAssignment_0(), "rule__Assignment__NameAssignment_0");
					put(grammarAccess.getAssignmentAccess().getIndexAssignment_1(), "rule__Assignment__IndexAssignment_1");
					put(grammarAccess.getAssignmentAccess().getValueAssignment_3(), "rule__Assignment__ValueAssignment_3");
					put(grammarAccess.getLAssignmentAccess().getNameAssignment_0(), "rule__LAssignment__NameAssignment_0");
					put(grammarAccess.getLAssignmentAccess().getIndexAssignment_1(), "rule__LAssignment__IndexAssignment_1");
					put(grammarAccess.getLAssignmentAccess().getValueAssignment_2_1(), "rule__LAssignment__ValueAssignment_2_1");
					put(grammarAccess.getWordsAccess().getElementsAssignment(), "rule__Words__ElementsAssignment");
					put(grammarAccess.getDQStringAccess().getElementsAssignment_2(), "rule__DQString__ElementsAssignment_2");
					put(grammarAccess.getLiteralStringPartAccess().getValuesAssignment_1(), "rule__LiteralStringPart__ValuesAssignment_1");
					put(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_0(), "rule__LiteralWordPart__ValuesAssignment_1_0_0");
					put(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_1_1(), "rule__LiteralWordPart__ValuesAssignment_1_0_1_1");
					put(grammarAccess.getLiteralWordPartAccess().getValuesAssignment_1_0_2_1(), "rule__LiteralWordPart__ValuesAssignment_1_0_2_1");
					put(grammarAccess.getCondOrAndAccess().getRightAssignment_1_2(), "rule__CondOrAnd__RightAssignment_1_2");
					put(grammarAccess.getCondExpAccess().getOpAssignment_0_1(), "rule__CondExp__OpAssignment_0_1");
					put(grammarAccess.getCondExpAccess().getOperandAssignment_0_2(), "rule__CondExp__OperandAssignment_0_2");
					put(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_0_0(), "rule__CondExp__OpAssignment_1_1_1_0_0");
					put(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_0_1(), "rule__CondExp__RightAssignment_1_1_1_0_1");
					put(grammarAccess.getCondExpAccess().getOpAssignment_1_1_1_1_0(), "rule__CondExp__OpAssignment_1_1_1_1_0");
					put(grammarAccess.getCondExpAccess().getRightAssignment_1_1_1_1_1(), "rule__CondExp__RightAssignment_1_1_1_1_1");
					put(grammarAccess.getCondConstAccess().getValueAssignment(), "rule__CondConst__ValueAssignment");
					put(grammarAccess.getRegularExpressionAccess().getOpAssignment_1_1(), "rule__RegularExpression__OpAssignment_1_1");
					put(grammarAccess.getRegularExpressionAccess().getRightAssignment_1_2(), "rule__RegularExpression__RightAssignment_1_2");
					put(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_0_1(), "rule__RegularElements__PartsAssignment_1_0_1");
					put(grammarAccess.getRegularElementsAccess().getPartsAssignment_1_1(), "rule__RegularElements__PartsAssignment_1_1");
					put(grammarAccess.getIndexEvaluationAccess().getEndAssignment_1(), "rule__IndexEvaluation__EndAssignment_1");
					put(grammarAccess.getIndexEvaluationStartAccess().getExpressionAssignment_1(), "rule__IndexEvaluationStart__ExpressionAssignment_1");
					put(grammarAccess.getArithmeticExpansionStartAccess().getExpressionAssignment_1(), "rule__ArithmeticExpansionStart__ExpressionAssignment_1");
					put(grammarAccess.getParameterExpansionAccess().getEndAssignment_0_1(), "rule__ParameterExpansion__EndAssignment_0_1");
					put(grammarAccess.getParameterExpansionAccess().getRefAssignment_1_1(), "rule__ParameterExpansion__RefAssignment_1_1");
					put(grammarAccess.getParameterExpansionStartAccess().getHashAssignment_2(), "rule__ParameterExpansionStart__HashAssignment_2");
					put(grammarAccess.getParameterExpansionStartAccess().getRefAssignment_3_0(), "rule__ParameterExpansionStart__RefAssignment_3_0");
					put(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_1(), "rule__ParameterExpansionStart__ValueAssignment_3_1");
					put(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_2(), "rule__ParameterExpansionStart__ValueAssignment_3_2");
					put(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_3(), "rule__ParameterExpansionStart__ValueAssignment_3_3");
					put(grammarAccess.getParameterExpansionStartAccess().getValueAssignment_3_4(), "rule__ParameterExpansionStart__ValueAssignment_3_4");
					put(grammarAccess.getParameterExpansionStartAccess().getIndexAssignment_4_1_2(), "rule__ParameterExpansionStart__IndexAssignment_4_1_2");
					put(grammarAccess.getParameterExpansionStartAccess().getReplacerAssignment_5(), "rule__ParameterExpansionStart__ReplacerAssignment_5");
					put(grammarAccess.getParameterProcessorAccess().getOpAssignment_0_1(), "rule__ParameterProcessor__OpAssignment_0_1");
					put(grammarAccess.getParameterProcessorAccess().getWordAssignment_0_2(), "rule__ParameterProcessor__WordAssignment_0_2");
					put(grammarAccess.getParameterProcessorAccess().getOpAssignment_1_1(), "rule__ParameterProcessor__OpAssignment_1_1");
					put(grammarAccess.getParameterProcessorAccess().getOriginalAssignment_1_2_0(), "rule__ParameterProcessor__OriginalAssignment_1_2_0");
					put(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_1_2_1_1(), "rule__ParameterProcessor__ReplaceAssignment_1_2_1_1");
					put(grammarAccess.getParameterProcessorAccess().getOpAssignment_2_1(), "rule__ParameterProcessor__OpAssignment_2_1");
					put(grammarAccess.getParameterProcessorAccess().getReplaceAssignment_2_3(), "rule__ParameterProcessor__ReplaceAssignment_2_3");
					put(grammarAccess.getParameterProcessorAccess().getStartAssignment_3_2_0(), "rule__ParameterProcessor__StartAssignment_3_2_0");
					put(grammarAccess.getParameterProcessorAccess().getLengthAssignment_3_2_1_1(), "rule__ParameterProcessor__LengthAssignment_3_2_1_1");
					put(grammarAccess.getParameterProcessorAccess().getLengthAssignment_4_3(), "rule__ParameterProcessor__LengthAssignment_4_3");
					put(grammarAccess.getCommandSubstitutionAccess().getEndAssignment_1(), "rule__CommandSubstitution__EndAssignment_1");
					put(grammarAccess.getCommandSubstitutionStartAccess().getCommandsAssignment_1(), "rule__CommandSubstitutionStart__CommandsAssignment_1");
					put(grammarAccess.getProcessSubstitutionAccess().getEndAssignment_1(), "rule__ProcessSubstitution__EndAssignment_1");
					put(grammarAccess.getProcessSubstitutionStartAccess().getOpAssignment_0(), "rule__ProcessSubstitutionStart__OpAssignment_0");
					put(grammarAccess.getProcessSubstitutionStartAccess().getBodyAssignment_1(), "rule__ProcessSubstitutionStart__BodyAssignment_1");
					put(grammarAccess.getEvaluationAccess().getOpAssignment_1_1(), "rule__Evaluation__OpAssignment_1_1");
					put(grammarAccess.getEvaluationAccess().getRightAssignment_1_2(), "rule__Evaluation__RightAssignment_1_2");
					put(grammarAccess.getArithmeticAccess().getLeftAssignment_0_1(), "rule__Arithmetic__LeftAssignment_0_1");
					put(grammarAccess.getArithmeticAccess().getOpAssignment_0_2(), "rule__Arithmetic__OpAssignment_0_2");
					put(grammarAccess.getArithmeticAccess().getRightAssignment_0_3(), "rule__Arithmetic__RightAssignment_0_3");
					put(grammarAccess.getConditionalOperatorAccess().getFirstAssignment_1_2(), "rule__ConditionalOperator__FirstAssignment_1_2");
					put(grammarAccess.getConditionalOperatorAccess().getRightAssignment_1_4(), "rule__ConditionalOperator__RightAssignment_1_4");
					put(grammarAccess.getLogicOrAccess().getOpAssignment_1_1(), "rule__LogicOr__OpAssignment_1_1");
					put(grammarAccess.getLogicOrAccess().getRightAssignment_1_2(), "rule__LogicOr__RightAssignment_1_2");
					put(grammarAccess.getLogicAndAccess().getOpAssignment_1_1(), "rule__LogicAnd__OpAssignment_1_1");
					put(grammarAccess.getLogicAndAccess().getRightAssignment_1_2(), "rule__LogicAnd__RightAssignment_1_2");
					put(grammarAccess.getBitwiseORAccess().getOpAssignment_1_1(), "rule__BitwiseOR__OpAssignment_1_1");
					put(grammarAccess.getBitwiseORAccess().getRightAssignment_1_2(), "rule__BitwiseOR__RightAssignment_1_2");
					put(grammarAccess.getBitwiseExclusiveORAccess().getOpAssignment_1_1(), "rule__BitwiseExclusiveOR__OpAssignment_1_1");
					put(grammarAccess.getBitwiseExclusiveORAccess().getRightAssignment_1_2(), "rule__BitwiseExclusiveOR__RightAssignment_1_2");
					put(grammarAccess.getBitwiseANDAccess().getOpAssignment_1_1(), "rule__BitwiseAND__OpAssignment_1_1");
					put(grammarAccess.getBitwiseANDAccess().getRightAssignment_1_2(), "rule__BitwiseAND__RightAssignment_1_2");
					put(grammarAccess.getEqualityAndInequalityAccess().getOpAssignment_1_1(), "rule__EqualityAndInequality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAndInequalityAccess().getRightAssignment_1_2(), "rule__EqualityAndInequality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getBitwiseShiftsAccess().getOpAssignment_1_1(), "rule__BitwiseShifts__OpAssignment_1_1");
					put(grammarAccess.getBitwiseShiftsAccess().getRightAssignment_1_2(), "rule__BitwiseShifts__RightAssignment_1_2");
					put(grammarAccess.getAdditionSubtractionAccess().getOpAssignment_1_1(), "rule__AdditionSubtraction__OpAssignment_1_1");
					put(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2(), "rule__AdditionSubtraction__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAssignment_1_1(), "rule__MultiplicationDivisionRemainder__OpAssignment_1_1");
					put(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightAssignment_1_2(), "rule__MultiplicationDivisionRemainder__RightAssignment_1_2");
					put(grammarAccess.getExponentiationAccess().getOpAssignment_1_1(), "rule__Exponentiation__OpAssignment_1_1");
					put(grammarAccess.getExponentiationAccess().getRightAssignment_1_2(), "rule__Exponentiation__RightAssignment_1_2");
					put(grammarAccess.getLogicalAndBitwiseNegationAccess().getOpAssignment_0_1(), "rule__LogicalAndBitwiseNegation__OpAssignment_0_1");
					put(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandAssignment_0_2(), "rule__LogicalAndBitwiseNegation__OperandAssignment_0_2");
					put(grammarAccess.getUnaryMinusAndPlusAccess().getOpAssignment_0_1(), "rule__UnaryMinusAndPlus__OpAssignment_0_1");
					put(grammarAccess.getUnaryMinusAndPlusAccess().getOperandAssignment_0_2(), "rule__UnaryMinusAndPlus__OperandAssignment_0_2");
					put(grammarAccess.getPreDecrementAccess().getOpAssignment_0_1(), "rule__PreDecrement__OpAssignment_0_1");
					put(grammarAccess.getPreDecrementAccess().getOperandAssignment_0_2(), "rule__PreDecrement__OperandAssignment_0_2");
					put(grammarAccess.getPostDecrementAccess().getOpAssignment_1_1(), "rule__PostDecrement__OpAssignment_1_1");
					put(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_0_1(), "rule__PrimaryItem__PrefixAssignment_0_1");
					put(grammarAccess.getPrimaryItemAccess().getValueAssignment_0_2(), "rule__PrimaryItem__ValueAssignment_0_2");
					put(grammarAccess.getPrimaryItemAccess().getPrefixAssignment_2_1(), "rule__PrimaryItem__PrefixAssignment_2_1");
					put(grammarAccess.getPrimaryItemAccess().getValueAssignment_2_2(), "rule__PrimaryItem__ValueAssignment_2_2");
					put(grammarAccess.getVariableIdAccess().getRefAssignment_1(), "rule__VariableId__RefAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyBashParser typedParser = (InternalMyBashParser) parser;
			typedParser.entryRuleBash();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE" };
	}

	public MyBashGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyBashGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
