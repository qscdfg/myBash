/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.mydsl.myBash.Bash;
import org.xtext.example.mydsl.myBash.SimpleCommand;
import org.xtext.example.mydsl.myBash.Word;
import org.xtext.example.mydsl.tests.MyBashInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(MyBashInjectorProvider.class)
@SuppressWarnings("all")
public class MyBashParsingTest {
  @Inject
  @Extension
  private ParseHelper<Bash> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void loadModel() {
  }
  
  @Test
  public void testWord() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a $a $(a) ${a} a$a$(a)${a} a$a$(a) a$(a)${a} a");
      _builder.newLine();
      final Bash result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      this._validationTestHelper.assertNoIssues(result);
      List<Word> wordList = EcoreUtil2.<Word>getAllContentsOfType(result, Word.class);
      List<SimpleCommand> simpleCommands = EcoreUtil2.<SimpleCommand>getAllContentsOfType(result, SimpleCommand.class);
      int _size = simpleCommands.size();
      Assert.assertEquals(5, _size);
      int _size_1 = wordList.size();
      Assert.assertEquals(7, _size_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
