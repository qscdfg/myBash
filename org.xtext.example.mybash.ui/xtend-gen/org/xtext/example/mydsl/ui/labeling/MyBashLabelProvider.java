/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.xtext.example.mydsl.myBash.FunctionDefine;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class MyBashLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public MyBashLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final FunctionDefine function) {
    String _name = function.getName();
    return (_name + " : function");
  }
  
  public String text(final EObject obj) {
    String _xblockexpression = null;
    {
      EStructuralFeature c = obj.eContainingFeature();
      String start = "";
      boolean _notEquals = (!Objects.equal(c, null));
      if (_notEquals) {
        String _name = c.getName();
        start = _name;
      }
      EClass _eClass = obj.eClass();
      String _name_1 = _eClass.getName();
      _xblockexpression = ((start + " : ") + _name_1);
    }
    return _xblockexpression;
  }
}
