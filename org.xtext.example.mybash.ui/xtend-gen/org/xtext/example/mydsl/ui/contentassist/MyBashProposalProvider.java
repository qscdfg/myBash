/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.ui.contentassist;

import com.google.common.base.Objects;
import java.util.Collections;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Pair;
import org.xtext.example.mydsl.myBash.FollowWordOp;
import org.xtext.example.mydsl.ui.contentassist.AbstractMyBashProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class MyBashProposalProvider extends AbstractMyBashProposalProvider {
  private final static Map<Object, Object> BUILDINS = new Function0<Map<Object, Object>>() {
    public Map<Object, Object> apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("source filename [arguments]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Read and execute commands from filename in the current shell environment and return the exit");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("status of the last command executed from filename. If filename does not contain a slash, ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("filenames in PATH are used to find the directory containing filename. The file searched for");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("in PATH need not be executable. When bash is not in posix mode, the current directory is ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("searched if no file is found in PATH. If the sourcepath option to the shopt builtin command");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("is turned off, the PATH is not searched. If any arguments are supplied, they become the ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("positional parameters when filename is executed. Otherwise the positional parameters are ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("unchanged. The return status is the status of the last command exited within the script ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("(0 if no commands are executed), and false if filename is not found or cannot be read.");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("source ", _builder.toString());
      return Collections.<Object, Object>unmodifiableMap(CollectionLiterals.<Object, Object>newHashMap(_mappedTo));
    }
  }.apply();
  
  @Override
  public void complete_CommandName(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final BiConsumer<Object, Object> _function = (Object $0, Object $1) -> {
      ICompletionProposal p = this.createCompletionProposal(((String) $0), context);
      ((ConfigurableCompletionProposal) p).setAdditionalProposalInfo($1);
      acceptor.accept(p);
    };
    MyBashProposalProvider.BUILDINS.forEach(_function);
  }
  
  @Override
  public void complete_ParameterProcessor(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final Consumer<FollowWordOp> _function = (FollowWordOp it) -> {
      String _literal = it.getLiteral();
      ICompletionProposal p = this.createCompletionProposal(((String) _literal), context);
      boolean _notEquals = (!Objects.equal(p, null));
      if (_notEquals) {
        String _name = it.getName();
        ((ConfigurableCompletionProposal) p).setAdditionalProposalInfo(_name);
        acceptor.accept(p);
      }
    };
    FollowWordOp.VALUES.forEach(_function);
  }
}
