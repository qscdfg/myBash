/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.ui;

import com.google.inject.Binder;
import com.google.inject.binder.AnnotatedBindingBuilder;
import com.google.inject.binder.LinkedBindingBuilder;
import com.google.inject.name.Named;
import com.google.inject.name.Names;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor;
import org.eclipse.xtext.documentation.IEObjectDocumentationProvider;
import org.eclipse.xtext.ide.LexerIdeBindings;
import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;
import org.eclipse.xtext.parser.antlr.Lexer;
import org.eclipse.xtext.parser.antlr.LexerProvider;
import org.eclipse.xtext.resource.EObjectAtOffsetHelper;
import org.eclipse.xtext.ui.editor.XtextPresentationReconciler;
import org.eclipse.xtext.ui.editor.contentassist.IProposalConflictHelper;
import org.eclipse.xtext.ui.editor.hover.IEObjectHover;
import org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider;
import org.eclipse.xtext.ui.editor.model.DocumentTokenSource;
import org.eclipse.xtext.ui.editor.model.ITokenTypeToPartitionTypeMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.xtext.example.mydsl.ide.contentassist.antlr.lexer.InternalMyBashLexer;
import org.xtext.example.mydsl.lexer.MyInnerLexer;
import org.xtext.example.mydsl.ui.AbstractMyBashUiModule;
import org.xtext.example.mydsl.ui.contentassist.MyBashProposalConflictHelper;
import org.xtext.example.mydsl.ui.contentassist.MyBashTerminalsTokenTypeToPartitionMapper;
import org.xtext.example.mydsl.ui.documentation.MyBashDocumentationProvider;
import org.xtext.example.mydsl.ui.hover.MyBashDispatchingEObjectTextHover;
import org.xtext.example.mydsl.ui.hover.MyBashEObjectAtOffsetHelper;
import org.xtext.example.mydsl.ui.hover.MyBashEObjectHoverProvider;
import org.xtext.example.mydsl.ui.semantic.color.FullDocumentTokenSource;
import org.xtext.example.mydsl.ui.semantic.color.MyBashHighlightingConfiguration;
import org.xtext.example.mydsl.ui.semantic.color.MyBashPresentationReconciler;
import org.xtext.example.mydsl.ui.semantic.color.MyBashSemanticHighlightingCalculator;
import org.xtext.example.mydsl.ui.semantic.color.MyBashTokenToAttributeIdMapper;

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
@SuppressWarnings("all")
public class MyBashUiModule extends AbstractMyBashUiModule {
  public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
    return MyBashTokenToAttributeIdMapper.class;
  }
  
  public Class<? extends ISemanticHighlightingCalculator> bindIdeSemanticHighlightingCalculator() {
    return MyBashSemanticHighlightingCalculator.class;
  }
  
  @Override
  public void configureHighlightingLexer(final Binder binder) {
    AnnotatedBindingBuilder<Lexer> _bind = binder.<Lexer>bind(Lexer.class);
    Named _named = Names.named(LexerIdeBindings.HIGHLIGHTING);
    LinkedBindingBuilder<Lexer> _annotatedWith = _bind.annotatedWith(_named);
    _annotatedWith.to(MyInnerLexer.class);
  }
  
  public Class<? extends DocumentTokenSource> bindDocumentTokenSource() {
    return FullDocumentTokenSource.class;
  }
  
  public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
    return MyBashHighlightingConfiguration.class;
  }
  
  public Class<? extends ITokenTypeToPartitionTypeMapper> bindITokenTypeToPartitionTypeMapper() {
    return MyBashTerminalsTokenTypeToPartitionMapper.class;
  }
  
  @Override
  public void configureContentAssistLexer(final Binder binder) {
    AnnotatedBindingBuilder<org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer> _bind = binder.<org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer>bind(org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer.class);
    Named _named = Names.named(LexerIdeBindings.CONTENT_ASSIST);
    LinkedBindingBuilder<org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer> _annotatedWith = _bind.annotatedWith(_named);
    _annotatedWith.to(org.xtext.example.mybash.ide.lexer.MyInnerLexer.class);
  }
  
  @Override
  public void configureContentAssistLexerProvider(final Binder binder) {
    AnnotatedBindingBuilder<InternalMyBashLexer> _bind = binder.<InternalMyBashLexer>bind(InternalMyBashLexer.class);
    LexerProvider<org.xtext.example.mybash.ide.lexer.MyInnerLexer> _create = LexerProvider.<org.xtext.example.mybash.ide.lexer.MyInnerLexer>create(org.xtext.example.mybash.ide.lexer.MyInnerLexer.class);
    _bind.toProvider(_create);
  }
  
  @Override
  public Class<? extends IEObjectHover> bindIEObjectHover() {
    return MyBashDispatchingEObjectTextHover.class;
  }
  
  public Class<? extends IEObjectDocumentationProvider> bindIEObjectDocumentationProvider() {
    return MyBashDocumentationProvider.class;
  }
  
  public Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider() {
    return MyBashEObjectHoverProvider.class;
  }
  
  public Class<? extends EObjectAtOffsetHelper> bindEObjectAtOffsetHelper() {
    return MyBashEObjectAtOffsetHelper.class;
  }
  
  @Override
  public Class<? extends IProposalConflictHelper> bindIProposalConflictHelper() {
    return MyBashProposalConflictHelper.class;
  }
  
  public Class<? extends XtextPresentationReconciler> bindXtextPresentationReconciler() {
    return MyBashPresentationReconciler.class;
  }
  
  public MyBashUiModule(final AbstractUIPlugin plugin) {
    super(plugin);
  }
}
