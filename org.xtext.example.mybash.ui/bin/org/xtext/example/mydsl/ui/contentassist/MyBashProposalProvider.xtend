/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.ui.contentassist

import java.util.Map
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.xtext.example.mydsl.myBash.FollowWordOp

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MyBashProposalProvider extends AbstractMyBashProposalProvider {

	static final Map<Object, Object> BUILDINS = #{'source ' -> '''
		source filename [arguments]
			Read and execute commands from filename in the current shell environment and return the exit
			status of the last command executed from filename. If filename does not contain a slash, 
			filenames in PATH are used to find the directory containing filename. The file searched for
			in PATH need not be executable. When bash is not in posix mode, the current directory is 
			searched if no file is found in PATH. If the sourcepath option to the shopt builtin command
			is turned off, the PATH is not searched. If any arguments are supplied, they become the 
			positional parameters when filename is executed. Otherwise the positional parameters are 
			unchanged. The return status is the status of the last command exited within the script 
			(0 if no commands are executed), and false if filename is not found or cannot be read.
	'''}

	override void complete_CommandName(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		BUILDINS.forEach [
			var p = createCompletionProposal($0 as String, context);
			(p as ConfigurableCompletionProposal).additionalProposalInfo = $1
			acceptor.accept(p)
		]
	}

	override void complete_ParameterProcessor(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		FollowWordOp.VALUES.forEach [
			var p = createCompletionProposal(literal as String, context);
			if(p != null) {
				(p as ConfigurableCompletionProposal).additionalProposalInfo = it.getName
				acceptor.accept(p)
			}
		]
	}
}
