/*
 * generated by Xtext 2.9.2
 */
lexer grammar InternalMyBashLexer;

@header {
package org.xtext.example.mydsl.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

Function : 'function';

While : 'while';

Case : 'case';

Done : 'done';

Elif : 'elif';

Else : 'else';

Esac : 'esac';

Then : 'then';

DollarSignLeftParenthesisLeftParenthesis : '$((';

AmpersandGreaterThanSignGreaterThanSign : '&>>';

SemicolonSemicolonAmpersand : ';;&';

LessThanSignLessThanSignEqualsSign : '<<=';

GreaterThanSignGreaterThanSignEqualsSign : '>>=';

For : 'for';

ExclamationMarkEqualsSign : '!=';

NumberSignNumberSign : '##';

DollarSignLeftCurlyBracket : '${';

PercentSignPercentSign : '%%';

PercentSignEqualsSign : '%=';

AmpersandAmpersand : '&&';

AmpersandEqualsSign : '&=';

AmpersandGreaterThanSign : '&>';

LeftParenthesisLeftParenthesis : '((';

RightParenthesisRightParenthesis : '))';

AsteriskAsterisk : '**';

AsteriskEqualsSign : '*=';

PlusSignPlusSign : '++';

PlusSignEqualsSign : '+=';

CommaComma : ',,';

HyphenMinusHyphenMinus : '--';

HyphenMinusEqualsSign : '-=';

SolidusSolidus : '//';

SolidusEqualsSign : '/=';

ColonPlusSign : ':+';

ColonHyphenMinus : ':-';

ColonEqualsSign : ':=';

ColonQuestionMark : ':?';

SemicolonAmpersand : ';&';

SemicolonSemicolon : ';;';

LessThanSignAmpersand : '<&';

LessThanSignLeftParenthesis : '<(';

LessThanSignLessThanSign : '<<';

LessThanSignEqualsSign : '<=';

LessThanSignGreaterThanSign : '<>';

LessThanSignVerticalLine : '<|';

EqualsSignEqualsSign : '==';

EqualsSignTilde : '=~';

GreaterThanSignAmpersand : '>&';

GreaterThanSignLeftParenthesis : '>(';

GreaterThanSignEqualsSign : '>=';

GreaterThanSignGreaterThanSign : '>>';

GreaterThanSignVerticalLine : '>|';

LeftSquareBracketLeftSquareBracket : '[[';

RightSquareBracketRightSquareBracket : ']]';

CircumflexAccentEqualsSign : '^=';

CircumflexAccentCircumflexAccent : '^^';

Do : 'do';

Fi : 'fi';

If : 'if';

In : 'in';

VerticalLineAmpersand : '|&';

VerticalLineEqualsSign : '|=';

VerticalLineVerticalLine : '||';

ExclamationMark : '!';

QuotationMark : '"';

NumberSign : '#';

PercentSign : '%';

Ampersand : '&';

Apostrophe : '\'';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

CommercialAt : '@';

LeftSquareBracket : '[';

RightSquareBracket : ']';

CircumflexAccent : '^';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

Tilde : '~';

// Rules duplicated to allow inter-rule references

RULE_I_NUMBER : ('0'..'9')+;

RULE_NEW_LINE : '\r'? '\n';

RULE_WS : (' '|'\t');

RULE_HIDEN_NEW_LINE : '__HIDEN_NEW_LINE__';

RULE_NAME : '__NAME__';

RULE_S_WORD_PART : '__S_WORD_PART__';

RULE_WORD_PART : '__WORD_PART__';

RULE_SL_COMMENT : '__SL_COMMENT__';

RULE_VARIABLE : '__VARIABLE__';

RULE_A_PREFIX : '__A_PREFIX__';

RULE_C_S_OP : '__C_S_OP__';

RULE_C_B_OP : '__C_B_OP__';

RULE_C_LINE : '__C_LINE__';

RULE_CS_START : '__CS_START__';

RULE_CS_END : '__CS_END__';

RULE_HERE_DOC_WORD : '__HERE_DOC_WORD__';

RULE_HERE_DOC_START : '__HERE_DOC_START__';

RULE_HERE_DOC_END : '__HERE_DOC_END__';

RULE_HERE_DOC_PART : '__HERE_DOC_PART__';
