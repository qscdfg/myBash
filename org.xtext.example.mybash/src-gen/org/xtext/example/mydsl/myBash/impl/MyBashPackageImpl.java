/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myBash.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl.myBash.ArithmeticCommand;
import org.xtext.example.mydsl.myBash.ArithmeticExpansion;
import org.xtext.example.mydsl.myBash.ArithmeticForStatement;
import org.xtext.example.mydsl.myBash.Array;
import org.xtext.example.mydsl.myBash.Assignable;
import org.xtext.example.mydsl.myBash.Assignment;
import org.xtext.example.mydsl.myBash.Bash;
import org.xtext.example.mydsl.myBash.BinaryExpression;
import org.xtext.example.mydsl.myBash.CasePattern;
import org.xtext.example.mydsl.myBash.CaseStatement;
import org.xtext.example.mydsl.myBash.CommandName;
import org.xtext.example.mydsl.myBash.CommandSubstitution;
import org.xtext.example.mydsl.myBash.CommandUnit;
import org.xtext.example.mydsl.myBash.CompoundList;
import org.xtext.example.mydsl.myBash.CondBinaryExpression;
import org.xtext.example.mydsl.myBash.CondCommand;
import org.xtext.example.mydsl.myBash.CondConst;
import org.xtext.example.mydsl.myBash.CondExpression;
import org.xtext.example.mydsl.myBash.CondUnaryExpression;
import org.xtext.example.mydsl.myBash.ConditionalOperator;
import org.xtext.example.mydsl.myBash.ConstPrimaryItem;
import org.xtext.example.mydsl.myBash.DQString;
import org.xtext.example.mydsl.myBash.ElseIfBlock;
import org.xtext.example.mydsl.myBash.Expansion;
import org.xtext.example.mydsl.myBash.Expression;
import org.xtext.example.mydsl.myBash.FollowWordOp;
import org.xtext.example.mydsl.myBash.ForStatement;
import org.xtext.example.mydsl.myBash.FunctionDefine;
import org.xtext.example.mydsl.myBash.GroupCommand;
import org.xtext.example.mydsl.myBash.IfStatement;
import org.xtext.example.mydsl.myBash.IndexEvaluation;
import org.xtext.example.mydsl.myBash.LAssignment;
import org.xtext.example.mydsl.myBash.Literal;
import org.xtext.example.mydsl.myBash.MyBashFactory;
import org.xtext.example.mydsl.myBash.MyBashPackage;
import org.xtext.example.mydsl.myBash.ParameterExpansion;
import org.xtext.example.mydsl.myBash.ParameterProcessor;
import org.xtext.example.mydsl.myBash.Pattern;
import org.xtext.example.mydsl.myBash.Pipeline;
import org.xtext.example.mydsl.myBash.PipelineCommand;
import org.xtext.example.mydsl.myBash.PrefixExpression;
import org.xtext.example.mydsl.myBash.PrimaryItem;
import org.xtext.example.mydsl.myBash.ProcessSubstitution;
import org.xtext.example.mydsl.myBash.Redirection;
import org.xtext.example.mydsl.myBash.RegularConst;
import org.xtext.example.mydsl.myBash.RegularExpression;
import org.xtext.example.mydsl.myBash.ReplaceProcessor;
import org.xtext.example.mydsl.myBash.ShellCommand;
import org.xtext.example.mydsl.myBash.SimpleCommand;
import org.xtext.example.mydsl.myBash.SimpleList;
import org.xtext.example.mydsl.myBash.SingleProcessor;
import org.xtext.example.mydsl.myBash.SubStringProcessor;
import org.xtext.example.mydsl.myBash.Subshell;
import org.xtext.example.mydsl.myBash.SuffixExpression;
import org.xtext.example.mydsl.myBash.VariableId;
import org.xtext.example.mydsl.myBash.WhileStatement;
import org.xtext.example.mydsl.myBash.Word;
import org.xtext.example.mydsl.myBash.WordElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyBashPackageImpl extends EPackageImpl implements MyBashPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bashEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compoundListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass commandUnitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionDefineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shellCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass groupCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subshellEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wordEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass casePatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass elseIfBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whileStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass redirectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrayEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass literalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dqStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expansionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wordElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condConstEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regularExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regularConstEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticExpansionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexEvaluationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterExpansionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterProcessorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass commandSubstitutionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass processSubstitutionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableIdEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pipelineCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pipelineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass commandNameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticForStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condUnaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condBinaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleProcessorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass replaceProcessorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subStringProcessorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalOperatorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass prefixExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass suffixExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constPrimaryItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primaryItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum followWordOpEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl.myBash.MyBashPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MyBashPackageImpl()
  {
    super(eNS_URI, MyBashFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MyBashPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MyBashPackage init()
  {
    if (isInited) return (MyBashPackage)EPackage.Registry.INSTANCE.getEPackage(MyBashPackage.eNS_URI);

    // Obtain or create and register package
    MyBashPackageImpl theMyBashPackage = (MyBashPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MyBashPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MyBashPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theMyBashPackage.createPackageContents();

    // Initialize created meta-data
    theMyBashPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMyBashPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MyBashPackage.eNS_URI, theMyBashPackage);
    return theMyBashPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBash()
  {
    return bashEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBash_Commands()
  {
    return (EReference)bashEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBash_Error()
  {
    return (EAttribute)bashEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCompoundList()
  {
    return compoundListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCompoundList_Commands()
  {
    return (EReference)compoundListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCommandUnit()
  {
    return commandUnitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCommandUnit_Backend()
  {
    return (EAttribute)commandUnitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionDefine()
  {
    return functionDefineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionDefine_Name()
  {
    return (EAttribute)functionDefineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionDefine_Body()
  {
    return (EReference)functionDefineEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSimpleCommand()
  {
    return simpleCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleCommand_Assignments()
  {
    return (EReference)simpleCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleCommand_Command()
  {
    return (EReference)simpleCommandEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleCommand_Parameters()
  {
    return (EReference)simpleCommandEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleCommand_R()
  {
    return (EReference)simpleCommandEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getShellCommand()
  {
    return shellCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getShellCommand_Redirects()
  {
    return (EReference)shellCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getGroupCommand()
  {
    return groupCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getGroupCommand_Body()
  {
    return (EReference)groupCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondCommand()
  {
    return condCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondCommand_Expression()
  {
    return (EReference)condCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArithmeticCommand()
  {
    return arithmeticCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticCommand_Expression()
  {
    return (EReference)arithmeticCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSubshell()
  {
    return subshellEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSubshell_Body()
  {
    return (EReference)subshellEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWord()
  {
    return wordEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWord_Elements()
  {
    return (EReference)wordEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCaseStatement()
  {
    return caseStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseStatement_Variable()
  {
    return (EReference)caseStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseStatement_Patterns()
  {
    return (EReference)caseStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCasePattern()
  {
    return casePatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCasePattern_Condition()
  {
    return (EReference)casePatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCasePattern_Body()
  {
    return (EReference)casePatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCasePattern_Follow()
  {
    return (EAttribute)casePatternEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPattern()
  {
    return patternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPattern_Parts()
  {
    return (EReference)patternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIfStatement()
  {
    return ifStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_Condition()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_Then()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_ElseIfBlock()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfStatement_Else()
  {
    return (EReference)ifStatementEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getElseIfBlock()
  {
    return elseIfBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getElseIfBlock_Condition()
  {
    return (EReference)elseIfBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getElseIfBlock_Then()
  {
    return (EReference)elseIfBlockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForStatement()
  {
    return forStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getForStatement_Variable()
  {
    return (EAttribute)forStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_Words()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForStatement_Body()
  {
    return (EReference)forStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWhileStatement()
  {
    return whileStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWhileStatement_C()
  {
    return (EReference)whileStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWhileStatement_D()
  {
    return (EReference)whileStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRedirection()
  {
    return redirectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRedirection_Op()
  {
    return (EAttribute)redirectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRedirection_Target()
  {
    return (EReference)redirectionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArray()
  {
    return arrayEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArray_Words()
  {
    return (EReference)arrayEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLiteral()
  {
    return literalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLiteral_Values()
  {
    return (EAttribute)literalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignment()
  {
    return assignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAssignment_Name()
  {
    return (EAttribute)assignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAssignment_Index()
  {
    return (EReference)assignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAssignment_Value()
  {
    return (EReference)assignmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLAssignment()
  {
    return lAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLAssignment_Name()
  {
    return (EAttribute)lAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLAssignment_Index()
  {
    return (EReference)lAssignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLAssignment_Value()
  {
    return (EReference)lAssignmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignable()
  {
    return assignableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDQString()
  {
    return dqStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDQString_Elements()
  {
    return (EReference)dqStringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpansion()
  {
    return expansionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWordElement()
  {
    return wordElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondExpression()
  {
    return condExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondConst()
  {
    return condConstEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondConst_Value()
  {
    return (EReference)condConstEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRegularExpression()
  {
    return regularExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRegularExpression_Left()
  {
    return (EReference)regularExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRegularExpression_Op()
  {
    return (EAttribute)regularExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRegularExpression_Right()
  {
    return (EReference)regularExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRegularConst()
  {
    return regularConstEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRegularConst_Parts()
  {
    return (EReference)regularConstEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArithmeticExpansion()
  {
    return arithmeticExpansionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticExpansion_Expression()
  {
    return (EReference)arithmeticExpansionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexEvaluation()
  {
    return indexEvaluationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndexEvaluation_End()
  {
    return (EAttribute)indexEvaluationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexEvaluation_Expression()
  {
    return (EReference)indexEvaluationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameterExpansion()
  {
    return parameterExpansionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterExpansion_End()
  {
    return (EAttribute)parameterExpansionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameterExpansion_Ref()
  {
    return (EReference)parameterExpansionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterExpansion_Hash()
  {
    return (EAttribute)parameterExpansionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterExpansion_Value()
  {
    return (EAttribute)parameterExpansionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameterExpansion_Index()
  {
    return (EReference)parameterExpansionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameterExpansion_Replacer()
  {
    return (EReference)parameterExpansionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameterProcessor()
  {
    return parameterProcessorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCommandSubstitution()
  {
    return commandSubstitutionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCommandSubstitution_End()
  {
    return (EAttribute)commandSubstitutionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCommandSubstitution_Commands()
  {
    return (EReference)commandSubstitutionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProcessSubstitution()
  {
    return processSubstitutionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProcessSubstitution_End()
  {
    return (EAttribute)processSubstitutionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProcessSubstitution_Op()
  {
    return (EAttribute)processSubstitutionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProcessSubstitution_Body()
  {
    return (EReference)processSubstitutionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVariableId()
  {
    return variableIdEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getVariableId_Ref()
  {
    return (EReference)variableIdEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSimpleList()
  {
    return simpleListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleList_Left()
  {
    return (EReference)simpleListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSimpleList_Op()
  {
    return (EAttribute)simpleListEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleList_Right()
  {
    return (EReference)simpleListEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPipelineCommand()
  {
    return pipelineCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPipelineCommand_Not()
  {
    return (EAttribute)pipelineCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPipelineCommand_Pipeline()
  {
    return (EReference)pipelineCommandEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPipeline()
  {
    return pipelineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPipeline_Left()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPipeline_Op()
  {
    return (EAttribute)pipelineEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPipeline_Right()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCommandName()
  {
    return commandNameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCommandName_Ref()
  {
    return (EReference)commandNameEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArithmeticForStatement()
  {
    return arithmeticForStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticForStatement_Init()
  {
    return (EReference)arithmeticForStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticForStatement_Condition()
  {
    return (EReference)arithmeticForStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArithmeticForStatement_Step()
  {
    return (EReference)arithmeticForStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondUnaryExpression()
  {
    return condUnaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondUnaryExpression_Left()
  {
    return (EReference)condUnaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondUnaryExpression_Right()
  {
    return (EReference)condUnaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCondUnaryExpression_Op()
  {
    return (EAttribute)condUnaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondUnaryExpression_Operand()
  {
    return (EReference)condUnaryExpressionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondBinaryExpression()
  {
    return condBinaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondBinaryExpression_Left()
  {
    return (EReference)condBinaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCondBinaryExpression_Op()
  {
    return (EAttribute)condBinaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondBinaryExpression_Right()
  {
    return (EReference)condBinaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleProcessor()
  {
    return singleProcessorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSingleProcessor_Op()
  {
    return (EAttribute)singleProcessorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSingleProcessor_Word()
  {
    return (EReference)singleProcessorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReplaceProcessor()
  {
    return replaceProcessorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReplaceProcessor_Op()
  {
    return (EAttribute)replaceProcessorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReplaceProcessor_Original()
  {
    return (EReference)replaceProcessorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReplaceProcessor_Replace()
  {
    return (EReference)replaceProcessorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSubStringProcessor()
  {
    return subStringProcessorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSubStringProcessor_Start()
  {
    return (EReference)subStringProcessorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSubStringProcessor_Length()
  {
    return (EReference)subStringProcessorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinaryExpression()
  {
    return binaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Left()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBinaryExpression_Op()
  {
    return (EAttribute)binaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Right()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConditionalOperator()
  {
    return conditionalOperatorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalOperator_Condition()
  {
    return (EReference)conditionalOperatorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalOperator_First()
  {
    return (EReference)conditionalOperatorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalOperator_Right()
  {
    return (EReference)conditionalOperatorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrefixExpression()
  {
    return prefixExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPrefixExpression_Op()
  {
    return (EAttribute)prefixExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPrefixExpression_Operand()
  {
    return (EReference)prefixExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSuffixExpression()
  {
    return suffixExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSuffixExpression_Operand()
  {
    return (EReference)suffixExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSuffixExpression_Op()
  {
    return (EAttribute)suffixExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConstPrimaryItem()
  {
    return constPrimaryItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConstPrimaryItem_Prefix()
  {
    return (EAttribute)constPrimaryItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConstPrimaryItem_Value()
  {
    return (EAttribute)constPrimaryItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrimaryItem()
  {
    return primaryItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPrimaryItem_Prefix()
  {
    return (EAttribute)primaryItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPrimaryItem_Value()
  {
    return (EReference)primaryItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getFollowWordOp()
  {
    return followWordOpEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyBashFactory getMyBashFactory()
  {
    return (MyBashFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    bashEClass = createEClass(BASH);
    createEReference(bashEClass, BASH__COMMANDS);
    createEAttribute(bashEClass, BASH__ERROR);

    compoundListEClass = createEClass(COMPOUND_LIST);
    createEReference(compoundListEClass, COMPOUND_LIST__COMMANDS);

    commandUnitEClass = createEClass(COMMAND_UNIT);
    createEAttribute(commandUnitEClass, COMMAND_UNIT__BACKEND);

    functionDefineEClass = createEClass(FUNCTION_DEFINE);
    createEAttribute(functionDefineEClass, FUNCTION_DEFINE__NAME);
    createEReference(functionDefineEClass, FUNCTION_DEFINE__BODY);

    simpleCommandEClass = createEClass(SIMPLE_COMMAND);
    createEReference(simpleCommandEClass, SIMPLE_COMMAND__ASSIGNMENTS);
    createEReference(simpleCommandEClass, SIMPLE_COMMAND__COMMAND);
    createEReference(simpleCommandEClass, SIMPLE_COMMAND__PARAMETERS);
    createEReference(simpleCommandEClass, SIMPLE_COMMAND__R);

    shellCommandEClass = createEClass(SHELL_COMMAND);
    createEReference(shellCommandEClass, SHELL_COMMAND__REDIRECTS);

    groupCommandEClass = createEClass(GROUP_COMMAND);
    createEReference(groupCommandEClass, GROUP_COMMAND__BODY);

    condCommandEClass = createEClass(COND_COMMAND);
    createEReference(condCommandEClass, COND_COMMAND__EXPRESSION);

    arithmeticCommandEClass = createEClass(ARITHMETIC_COMMAND);
    createEReference(arithmeticCommandEClass, ARITHMETIC_COMMAND__EXPRESSION);

    subshellEClass = createEClass(SUBSHELL);
    createEReference(subshellEClass, SUBSHELL__BODY);

    wordEClass = createEClass(WORD);
    createEReference(wordEClass, WORD__ELEMENTS);

    caseStatementEClass = createEClass(CASE_STATEMENT);
    createEReference(caseStatementEClass, CASE_STATEMENT__VARIABLE);
    createEReference(caseStatementEClass, CASE_STATEMENT__PATTERNS);

    casePatternEClass = createEClass(CASE_PATTERN);
    createEReference(casePatternEClass, CASE_PATTERN__CONDITION);
    createEReference(casePatternEClass, CASE_PATTERN__BODY);
    createEAttribute(casePatternEClass, CASE_PATTERN__FOLLOW);

    patternEClass = createEClass(PATTERN);
    createEReference(patternEClass, PATTERN__PARTS);

    ifStatementEClass = createEClass(IF_STATEMENT);
    createEReference(ifStatementEClass, IF_STATEMENT__CONDITION);
    createEReference(ifStatementEClass, IF_STATEMENT__THEN);
    createEReference(ifStatementEClass, IF_STATEMENT__ELSE_IF_BLOCK);
    createEReference(ifStatementEClass, IF_STATEMENT__ELSE);

    elseIfBlockEClass = createEClass(ELSE_IF_BLOCK);
    createEReference(elseIfBlockEClass, ELSE_IF_BLOCK__CONDITION);
    createEReference(elseIfBlockEClass, ELSE_IF_BLOCK__THEN);

    forStatementEClass = createEClass(FOR_STATEMENT);
    createEAttribute(forStatementEClass, FOR_STATEMENT__VARIABLE);
    createEReference(forStatementEClass, FOR_STATEMENT__WORDS);
    createEReference(forStatementEClass, FOR_STATEMENT__BODY);

    whileStatementEClass = createEClass(WHILE_STATEMENT);
    createEReference(whileStatementEClass, WHILE_STATEMENT__C);
    createEReference(whileStatementEClass, WHILE_STATEMENT__D);

    redirectionEClass = createEClass(REDIRECTION);
    createEAttribute(redirectionEClass, REDIRECTION__OP);
    createEReference(redirectionEClass, REDIRECTION__TARGET);

    arrayEClass = createEClass(ARRAY);
    createEReference(arrayEClass, ARRAY__WORDS);

    literalEClass = createEClass(LITERAL);
    createEAttribute(literalEClass, LITERAL__VALUES);

    assignmentEClass = createEClass(ASSIGNMENT);
    createEAttribute(assignmentEClass, ASSIGNMENT__NAME);
    createEReference(assignmentEClass, ASSIGNMENT__INDEX);
    createEReference(assignmentEClass, ASSIGNMENT__VALUE);

    lAssignmentEClass = createEClass(LASSIGNMENT);
    createEAttribute(lAssignmentEClass, LASSIGNMENT__NAME);
    createEReference(lAssignmentEClass, LASSIGNMENT__INDEX);
    createEReference(lAssignmentEClass, LASSIGNMENT__VALUE);

    assignableEClass = createEClass(ASSIGNABLE);

    dqStringEClass = createEClass(DQ_STRING);
    createEReference(dqStringEClass, DQ_STRING__ELEMENTS);

    expansionEClass = createEClass(EXPANSION);

    wordElementEClass = createEClass(WORD_ELEMENT);

    condExpressionEClass = createEClass(COND_EXPRESSION);

    condConstEClass = createEClass(COND_CONST);
    createEReference(condConstEClass, COND_CONST__VALUE);

    regularExpressionEClass = createEClass(REGULAR_EXPRESSION);
    createEReference(regularExpressionEClass, REGULAR_EXPRESSION__LEFT);
    createEAttribute(regularExpressionEClass, REGULAR_EXPRESSION__OP);
    createEReference(regularExpressionEClass, REGULAR_EXPRESSION__RIGHT);

    regularConstEClass = createEClass(REGULAR_CONST);
    createEReference(regularConstEClass, REGULAR_CONST__PARTS);

    arithmeticExpansionEClass = createEClass(ARITHMETIC_EXPANSION);
    createEReference(arithmeticExpansionEClass, ARITHMETIC_EXPANSION__EXPRESSION);

    indexEvaluationEClass = createEClass(INDEX_EVALUATION);
    createEAttribute(indexEvaluationEClass, INDEX_EVALUATION__END);
    createEReference(indexEvaluationEClass, INDEX_EVALUATION__EXPRESSION);

    parameterExpansionEClass = createEClass(PARAMETER_EXPANSION);
    createEAttribute(parameterExpansionEClass, PARAMETER_EXPANSION__END);
    createEReference(parameterExpansionEClass, PARAMETER_EXPANSION__REF);
    createEAttribute(parameterExpansionEClass, PARAMETER_EXPANSION__HASH);
    createEAttribute(parameterExpansionEClass, PARAMETER_EXPANSION__VALUE);
    createEReference(parameterExpansionEClass, PARAMETER_EXPANSION__INDEX);
    createEReference(parameterExpansionEClass, PARAMETER_EXPANSION__REPLACER);

    parameterProcessorEClass = createEClass(PARAMETER_PROCESSOR);

    commandSubstitutionEClass = createEClass(COMMAND_SUBSTITUTION);
    createEAttribute(commandSubstitutionEClass, COMMAND_SUBSTITUTION__END);
    createEReference(commandSubstitutionEClass, COMMAND_SUBSTITUTION__COMMANDS);

    processSubstitutionEClass = createEClass(PROCESS_SUBSTITUTION);
    createEAttribute(processSubstitutionEClass, PROCESS_SUBSTITUTION__END);
    createEAttribute(processSubstitutionEClass, PROCESS_SUBSTITUTION__OP);
    createEReference(processSubstitutionEClass, PROCESS_SUBSTITUTION__BODY);

    expressionEClass = createEClass(EXPRESSION);

    variableIdEClass = createEClass(VARIABLE_ID);
    createEReference(variableIdEClass, VARIABLE_ID__REF);

    simpleListEClass = createEClass(SIMPLE_LIST);
    createEReference(simpleListEClass, SIMPLE_LIST__LEFT);
    createEAttribute(simpleListEClass, SIMPLE_LIST__OP);
    createEReference(simpleListEClass, SIMPLE_LIST__RIGHT);

    pipelineCommandEClass = createEClass(PIPELINE_COMMAND);
    createEAttribute(pipelineCommandEClass, PIPELINE_COMMAND__NOT);
    createEReference(pipelineCommandEClass, PIPELINE_COMMAND__PIPELINE);

    pipelineEClass = createEClass(PIPELINE);
    createEReference(pipelineEClass, PIPELINE__LEFT);
    createEAttribute(pipelineEClass, PIPELINE__OP);
    createEReference(pipelineEClass, PIPELINE__RIGHT);

    commandNameEClass = createEClass(COMMAND_NAME);
    createEReference(commandNameEClass, COMMAND_NAME__REF);

    arithmeticForStatementEClass = createEClass(ARITHMETIC_FOR_STATEMENT);
    createEReference(arithmeticForStatementEClass, ARITHMETIC_FOR_STATEMENT__INIT);
    createEReference(arithmeticForStatementEClass, ARITHMETIC_FOR_STATEMENT__CONDITION);
    createEReference(arithmeticForStatementEClass, ARITHMETIC_FOR_STATEMENT__STEP);

    condUnaryExpressionEClass = createEClass(COND_UNARY_EXPRESSION);
    createEReference(condUnaryExpressionEClass, COND_UNARY_EXPRESSION__LEFT);
    createEReference(condUnaryExpressionEClass, COND_UNARY_EXPRESSION__RIGHT);
    createEAttribute(condUnaryExpressionEClass, COND_UNARY_EXPRESSION__OP);
    createEReference(condUnaryExpressionEClass, COND_UNARY_EXPRESSION__OPERAND);

    condBinaryExpressionEClass = createEClass(COND_BINARY_EXPRESSION);
    createEReference(condBinaryExpressionEClass, COND_BINARY_EXPRESSION__LEFT);
    createEAttribute(condBinaryExpressionEClass, COND_BINARY_EXPRESSION__OP);
    createEReference(condBinaryExpressionEClass, COND_BINARY_EXPRESSION__RIGHT);

    singleProcessorEClass = createEClass(SINGLE_PROCESSOR);
    createEAttribute(singleProcessorEClass, SINGLE_PROCESSOR__OP);
    createEReference(singleProcessorEClass, SINGLE_PROCESSOR__WORD);

    replaceProcessorEClass = createEClass(REPLACE_PROCESSOR);
    createEAttribute(replaceProcessorEClass, REPLACE_PROCESSOR__OP);
    createEReference(replaceProcessorEClass, REPLACE_PROCESSOR__ORIGINAL);
    createEReference(replaceProcessorEClass, REPLACE_PROCESSOR__REPLACE);

    subStringProcessorEClass = createEClass(SUB_STRING_PROCESSOR);
    createEReference(subStringProcessorEClass, SUB_STRING_PROCESSOR__START);
    createEReference(subStringProcessorEClass, SUB_STRING_PROCESSOR__LENGTH);

    binaryExpressionEClass = createEClass(BINARY_EXPRESSION);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__LEFT);
    createEAttribute(binaryExpressionEClass, BINARY_EXPRESSION__OP);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__RIGHT);

    conditionalOperatorEClass = createEClass(CONDITIONAL_OPERATOR);
    createEReference(conditionalOperatorEClass, CONDITIONAL_OPERATOR__CONDITION);
    createEReference(conditionalOperatorEClass, CONDITIONAL_OPERATOR__FIRST);
    createEReference(conditionalOperatorEClass, CONDITIONAL_OPERATOR__RIGHT);

    prefixExpressionEClass = createEClass(PREFIX_EXPRESSION);
    createEAttribute(prefixExpressionEClass, PREFIX_EXPRESSION__OP);
    createEReference(prefixExpressionEClass, PREFIX_EXPRESSION__OPERAND);

    suffixExpressionEClass = createEClass(SUFFIX_EXPRESSION);
    createEReference(suffixExpressionEClass, SUFFIX_EXPRESSION__OPERAND);
    createEAttribute(suffixExpressionEClass, SUFFIX_EXPRESSION__OP);

    constPrimaryItemEClass = createEClass(CONST_PRIMARY_ITEM);
    createEAttribute(constPrimaryItemEClass, CONST_PRIMARY_ITEM__PREFIX);
    createEAttribute(constPrimaryItemEClass, CONST_PRIMARY_ITEM__VALUE);

    primaryItemEClass = createEClass(PRIMARY_ITEM);
    createEAttribute(primaryItemEClass, PRIMARY_ITEM__PREFIX);
    createEReference(primaryItemEClass, PRIMARY_ITEM__VALUE);

    // Create enums
    followWordOpEEnum = createEEnum(FOLLOW_WORD_OP);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    functionDefineEClass.getESuperTypes().add(this.getCommandUnit());
    simpleCommandEClass.getESuperTypes().add(this.getCommandUnit());
    shellCommandEClass.getESuperTypes().add(this.getCommandUnit());
    groupCommandEClass.getESuperTypes().add(this.getShellCommand());
    condCommandEClass.getESuperTypes().add(this.getShellCommand());
    arithmeticCommandEClass.getESuperTypes().add(this.getShellCommand());
    subshellEClass.getESuperTypes().add(this.getShellCommand());
    wordEClass.getESuperTypes().add(this.getAssignable());
    caseStatementEClass.getESuperTypes().add(this.getShellCommand());
    ifStatementEClass.getESuperTypes().add(this.getShellCommand());
    forStatementEClass.getESuperTypes().add(this.getShellCommand());
    whileStatementEClass.getESuperTypes().add(this.getShellCommand());
    arrayEClass.getESuperTypes().add(this.getAssignable());
    literalEClass.getESuperTypes().add(this.getWordElement());
    dqStringEClass.getESuperTypes().add(this.getWordElement());
    expansionEClass.getESuperTypes().add(this.getWordElement());
    condConstEClass.getESuperTypes().add(this.getCondExpression());
    regularConstEClass.getESuperTypes().add(this.getRegularExpression());
    arithmeticExpansionEClass.getESuperTypes().add(this.getExpansion());
    parameterExpansionEClass.getESuperTypes().add(this.getExpansion());
    commandSubstitutionEClass.getESuperTypes().add(this.getExpansion());
    processSubstitutionEClass.getESuperTypes().add(this.getExpansion());
    variableIdEClass.getESuperTypes().add(this.getExpression());
    simpleListEClass.getESuperTypes().add(this.getCommandUnit());
    pipelineCommandEClass.getESuperTypes().add(this.getCommandUnit());
    pipelineEClass.getESuperTypes().add(this.getCommandUnit());
    commandNameEClass.getESuperTypes().add(this.getWord());
    arithmeticForStatementEClass.getESuperTypes().add(this.getForStatement());
    condUnaryExpressionEClass.getESuperTypes().add(this.getCondExpression());
    condBinaryExpressionEClass.getESuperTypes().add(this.getCondExpression());
    singleProcessorEClass.getESuperTypes().add(this.getParameterProcessor());
    replaceProcessorEClass.getESuperTypes().add(this.getParameterProcessor());
    subStringProcessorEClass.getESuperTypes().add(this.getParameterProcessor());
    binaryExpressionEClass.getESuperTypes().add(this.getExpression());
    conditionalOperatorEClass.getESuperTypes().add(this.getExpression());
    prefixExpressionEClass.getESuperTypes().add(this.getExpression());
    suffixExpressionEClass.getESuperTypes().add(this.getExpression());
    constPrimaryItemEClass.getESuperTypes().add(this.getExpression());
    primaryItemEClass.getESuperTypes().add(this.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(bashEClass, Bash.class, "Bash", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBash_Commands(), this.getCommandUnit(), null, "commands", null, 0, -1, Bash.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBash_Error(), ecorePackage.getEBoolean(), "error", null, 0, 1, Bash.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(compoundListEClass, CompoundList.class, "CompoundList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompoundList_Commands(), this.getCommandUnit(), null, "commands", null, 0, -1, CompoundList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(commandUnitEClass, CommandUnit.class, "CommandUnit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCommandUnit_Backend(), ecorePackage.getEBoolean(), "backend", null, 0, 1, CommandUnit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionDefineEClass, FunctionDefine.class, "FunctionDefine", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionDefine_Name(), ecorePackage.getEString(), "name", null, 0, 1, FunctionDefine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDefine_Body(), this.getShellCommand(), null, "body", null, 0, 1, FunctionDefine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simpleCommandEClass, SimpleCommand.class, "SimpleCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSimpleCommand_Assignments(), this.getAssignment(), null, "assignments", null, 0, -1, SimpleCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleCommand_Command(), this.getWord(), null, "command", null, 0, 1, SimpleCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleCommand_Parameters(), ecorePackage.getEObject(), null, "parameters", null, 0, -1, SimpleCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleCommand_R(), this.getRedirection(), null, "r", null, 0, -1, SimpleCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(shellCommandEClass, ShellCommand.class, "ShellCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getShellCommand_Redirects(), this.getRedirection(), null, "redirects", null, 0, -1, ShellCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(groupCommandEClass, GroupCommand.class, "GroupCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getGroupCommand_Body(), this.getCompoundList(), null, "body", null, 0, 1, GroupCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condCommandEClass, CondCommand.class, "CondCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondCommand_Expression(), this.getCondExpression(), null, "expression", null, 0, 1, CondCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticCommandEClass, ArithmeticCommand.class, "ArithmeticCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArithmeticCommand_Expression(), this.getExpression(), null, "expression", null, 0, 1, ArithmeticCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subshellEClass, Subshell.class, "Subshell", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSubshell_Body(), this.getCompoundList(), null, "body", null, 0, 1, Subshell.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(wordEClass, Word.class, "Word", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWord_Elements(), this.getWordElement(), null, "elements", null, 0, -1, Word.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseStatementEClass, CaseStatement.class, "CaseStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseStatement_Variable(), this.getWord(), null, "variable", null, 0, 1, CaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseStatement_Patterns(), this.getCasePattern(), null, "patterns", null, 0, -1, CaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(casePatternEClass, CasePattern.class, "CasePattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCasePattern_Condition(), this.getPattern(), null, "condition", null, 0, 1, CasePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCasePattern_Body(), this.getCompoundList(), null, "body", null, 0, 1, CasePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCasePattern_Follow(), ecorePackage.getEString(), "follow", null, 0, 1, CasePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternEClass, Pattern.class, "Pattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPattern_Parts(), this.getWord(), null, "parts", null, 0, -1, Pattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ifStatementEClass, IfStatement.class, "IfStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfStatement_Condition(), this.getCompoundList(), null, "condition", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStatement_Then(), this.getCompoundList(), null, "then", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStatement_ElseIfBlock(), this.getElseIfBlock(), null, "elseIfBlock", null, 0, -1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStatement_Else(), this.getCompoundList(), null, "else", null, 0, 1, IfStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(elseIfBlockEClass, ElseIfBlock.class, "ElseIfBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getElseIfBlock_Condition(), this.getCompoundList(), null, "condition", null, 0, 1, ElseIfBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getElseIfBlock_Then(), this.getCompoundList(), null, "then", null, 0, 1, ElseIfBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forStatementEClass, ForStatement.class, "ForStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getForStatement_Variable(), ecorePackage.getEString(), "variable", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForStatement_Words(), this.getWord(), null, "words", null, 0, -1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForStatement_Body(), this.getCompoundList(), null, "body", null, 0, 1, ForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whileStatementEClass, WhileStatement.class, "WhileStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWhileStatement_C(), this.getCompoundList(), null, "c", null, 0, 1, WhileStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhileStatement_D(), this.getCompoundList(), null, "d", null, 0, 1, WhileStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(redirectionEClass, Redirection.class, "Redirection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRedirection_Op(), ecorePackage.getEString(), "op", null, 0, 1, Redirection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRedirection_Target(), this.getWord(), null, "target", null, 0, 1, Redirection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arrayEClass, Array.class, "Array", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArray_Words(), this.getWord(), null, "words", null, 0, -1, Array.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(literalEClass, Literal.class, "Literal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLiteral_Values(), ecorePackage.getEString(), "values", null, 0, -1, Literal.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignmentEClass, Assignment.class, "Assignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAssignment_Name(), ecorePackage.getEString(), "name", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAssignment_Index(), this.getIndexEvaluation(), null, "index", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAssignment_Value(), this.getAssignable(), null, "value", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lAssignmentEClass, LAssignment.class, "LAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLAssignment_Name(), ecorePackage.getEString(), "name", null, 0, 1, LAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLAssignment_Index(), this.getIndexEvaluation(), null, "index", null, 0, 1, LAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLAssignment_Value(), this.getAssignable(), null, "value", null, 0, 1, LAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignableEClass, Assignable.class, "Assignable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dqStringEClass, DQString.class, "DQString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDQString_Elements(), this.getWordElement(), null, "elements", null, 0, -1, DQString.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expansionEClass, Expansion.class, "Expansion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wordElementEClass, WordElement.class, "WordElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(condExpressionEClass, CondExpression.class, "CondExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(condConstEClass, CondConst.class, "CondConst", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondConst_Value(), this.getWord(), null, "value", null, 0, 1, CondConst.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regularExpressionEClass, RegularExpression.class, "RegularExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegularExpression_Left(), this.getRegularExpression(), null, "left", null, 0, 1, RegularExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRegularExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, RegularExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRegularExpression_Right(), this.getRegularConst(), null, "right", null, 0, 1, RegularExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regularConstEClass, RegularConst.class, "RegularConst", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegularConst_Parts(), this.getWord(), null, "parts", null, 0, -1, RegularConst.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticExpansionEClass, ArithmeticExpansion.class, "ArithmeticExpansion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArithmeticExpansion_Expression(), this.getExpression(), null, "expression", null, 0, 1, ArithmeticExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexEvaluationEClass, IndexEvaluation.class, "IndexEvaluation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIndexEvaluation_End(), ecorePackage.getEString(), "end", null, 0, 1, IndexEvaluation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexEvaluation_Expression(), this.getExpression(), null, "expression", null, 0, 1, IndexEvaluation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterExpansionEClass, ParameterExpansion.class, "ParameterExpansion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameterExpansion_End(), ecorePackage.getEString(), "end", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterExpansion_Ref(), this.getAssignment(), null, "ref", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterExpansion_Hash(), ecorePackage.getEBoolean(), "hash", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterExpansion_Value(), ecorePackage.getEString(), "value", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterExpansion_Index(), this.getExpression(), null, "index", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterExpansion_Replacer(), this.getParameterProcessor(), null, "replacer", null, 0, 1, ParameterExpansion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterProcessorEClass, ParameterProcessor.class, "ParameterProcessor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(commandSubstitutionEClass, CommandSubstitution.class, "CommandSubstitution", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCommandSubstitution_End(), ecorePackage.getEString(), "end", null, 0, 1, CommandSubstitution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCommandSubstitution_Commands(), this.getCompoundList(), null, "commands", null, 0, 1, CommandSubstitution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(processSubstitutionEClass, ProcessSubstitution.class, "ProcessSubstitution", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getProcessSubstitution_End(), ecorePackage.getEString(), "end", null, 0, 1, ProcessSubstitution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProcessSubstitution_Op(), ecorePackage.getEString(), "op", null, 0, 1, ProcessSubstitution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcessSubstitution_Body(), this.getCompoundList(), null, "body", null, 0, 1, ProcessSubstitution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableIdEClass, VariableId.class, "VariableId", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableId_Ref(), this.getAssignment(), null, "ref", null, 0, 1, VariableId.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simpleListEClass, SimpleList.class, "SimpleList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSimpleList_Left(), this.getCommandUnit(), null, "left", null, 0, 1, SimpleList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSimpleList_Op(), ecorePackage.getEString(), "op", null, 0, 1, SimpleList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleList_Right(), this.getCommandUnit(), null, "right", null, 0, 1, SimpleList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pipelineCommandEClass, PipelineCommand.class, "PipelineCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPipelineCommand_Not(), ecorePackage.getEBoolean(), "not", null, 0, 1, PipelineCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipelineCommand_Pipeline(), this.getCommandUnit(), null, "pipeline", null, 0, 1, PipelineCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pipelineEClass, Pipeline.class, "Pipeline", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPipeline_Left(), this.getCommandUnit(), null, "left", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPipeline_Op(), ecorePackage.getEString(), "op", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipeline_Right(), this.getCommandUnit(), null, "right", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(commandNameEClass, CommandName.class, "CommandName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCommandName_Ref(), this.getFunctionDefine(), null, "ref", null, 0, 1, CommandName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticForStatementEClass, ArithmeticForStatement.class, "ArithmeticForStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArithmeticForStatement_Init(), this.getExpression(), null, "init", null, 0, 1, ArithmeticForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArithmeticForStatement_Condition(), this.getExpression(), null, "condition", null, 0, 1, ArithmeticForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArithmeticForStatement_Step(), this.getExpression(), null, "step", null, 0, 1, ArithmeticForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condUnaryExpressionEClass, CondUnaryExpression.class, "CondUnaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondUnaryExpression_Left(), this.getCondExpression(), null, "left", null, 0, 1, CondUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondUnaryExpression_Right(), this.getCondExpression(), null, "right", null, 0, 1, CondUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCondUnaryExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, CondUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondUnaryExpression_Operand(), this.getWord(), null, "operand", null, 0, 1, CondUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condBinaryExpressionEClass, CondBinaryExpression.class, "CondBinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondBinaryExpression_Left(), this.getCondConst(), null, "left", null, 0, 1, CondBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCondBinaryExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, CondBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondBinaryExpression_Right(), ecorePackage.getEObject(), null, "right", null, 0, 1, CondBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleProcessorEClass, SingleProcessor.class, "SingleProcessor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSingleProcessor_Op(), this.getFollowWordOp(), "op", null, 0, 1, SingleProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSingleProcessor_Word(), this.getWord(), null, "word", null, 0, 1, SingleProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(replaceProcessorEClass, ReplaceProcessor.class, "ReplaceProcessor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReplaceProcessor_Op(), ecorePackage.getEString(), "op", null, 0, 1, ReplaceProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReplaceProcessor_Original(), this.getWord(), null, "original", null, 0, 1, ReplaceProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReplaceProcessor_Replace(), this.getWord(), null, "replace", null, 0, 1, ReplaceProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subStringProcessorEClass, SubStringProcessor.class, "SubStringProcessor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSubStringProcessor_Start(), this.getExpression(), null, "start", null, 0, 1, SubStringProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubStringProcessor_Length(), this.getExpression(), null, "length", null, 0, 1, SubStringProcessor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(binaryExpressionEClass, BinaryExpression.class, "BinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBinaryExpression_Left(), this.getExpression(), null, "left", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBinaryExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinaryExpression_Right(), this.getExpression(), null, "right", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalOperatorEClass, ConditionalOperator.class, "ConditionalOperator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalOperator_Condition(), this.getExpression(), null, "condition", null, 0, 1, ConditionalOperator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalOperator_First(), this.getExpression(), null, "first", null, 0, 1, ConditionalOperator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalOperator_Right(), this.getExpression(), null, "right", null, 0, 1, ConditionalOperator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(prefixExpressionEClass, PrefixExpression.class, "PrefixExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPrefixExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, PrefixExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPrefixExpression_Operand(), this.getExpression(), null, "operand", null, 0, 1, PrefixExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(suffixExpressionEClass, SuffixExpression.class, "SuffixExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSuffixExpression_Operand(), this.getVariableId(), null, "operand", null, 0, 1, SuffixExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSuffixExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, SuffixExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constPrimaryItemEClass, ConstPrimaryItem.class, "ConstPrimaryItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstPrimaryItem_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, ConstPrimaryItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstPrimaryItem_Value(), ecorePackage.getEString(), "value", null, 0, 1, ConstPrimaryItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(primaryItemEClass, PrimaryItem.class, "PrimaryItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPrimaryItem_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, PrimaryItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPrimaryItem_Value(), this.getExpansion(), null, "value", null, 0, 1, PrimaryItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(followWordOpEEnum, FollowWordOp.class, "FollowWordOp");
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.GREEDY_REMOVE_SUFFIX);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.REMOVE_SUFFIX);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.GREEY_REMOVE_PREFIX);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.REMOVE_PREFIX);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.GREEDY_LOWERCASE);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.LOWERCASE);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.GREEDY_UPPERCASE);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.UPPERCASE);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.USE_ALTERNATE);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.USE_DEFAULT);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.ASSIGN_DEFAULT);
    addEEnumLiteral(followWordOpEEnum, FollowWordOp.ERROR_DEFAULT);

    // Create resource
    createResource(eNS_URI);
  }

} //MyBashPackageImpl
