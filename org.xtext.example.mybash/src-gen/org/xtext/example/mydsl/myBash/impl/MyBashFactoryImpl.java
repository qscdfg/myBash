/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myBash.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myBash.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyBashFactoryImpl extends EFactoryImpl implements MyBashFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyBashFactory init()
  {
    try
    {
      MyBashFactory theMyBashFactory = (MyBashFactory)EPackage.Registry.INSTANCE.getEFactory(MyBashPackage.eNS_URI);
      if (theMyBashFactory != null)
      {
        return theMyBashFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyBashFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyBashFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyBashPackage.BASH: return createBash();
      case MyBashPackage.COMPOUND_LIST: return createCompoundList();
      case MyBashPackage.COMMAND_UNIT: return createCommandUnit();
      case MyBashPackage.FUNCTION_DEFINE: return createFunctionDefine();
      case MyBashPackage.SIMPLE_COMMAND: return createSimpleCommand();
      case MyBashPackage.SHELL_COMMAND: return createShellCommand();
      case MyBashPackage.GROUP_COMMAND: return createGroupCommand();
      case MyBashPackage.COND_COMMAND: return createCondCommand();
      case MyBashPackage.ARITHMETIC_COMMAND: return createArithmeticCommand();
      case MyBashPackage.SUBSHELL: return createSubshell();
      case MyBashPackage.WORD: return createWord();
      case MyBashPackage.CASE_STATEMENT: return createCaseStatement();
      case MyBashPackage.CASE_PATTERN: return createCasePattern();
      case MyBashPackage.PATTERN: return createPattern();
      case MyBashPackage.IF_STATEMENT: return createIfStatement();
      case MyBashPackage.ELSE_IF_BLOCK: return createElseIfBlock();
      case MyBashPackage.FOR_STATEMENT: return createForStatement();
      case MyBashPackage.WHILE_STATEMENT: return createWhileStatement();
      case MyBashPackage.REDIRECTION: return createRedirection();
      case MyBashPackage.ARRAY: return createArray();
      case MyBashPackage.LITERAL: return createLiteral();
      case MyBashPackage.ASSIGNMENT: return createAssignment();
      case MyBashPackage.LASSIGNMENT: return createLAssignment();
      case MyBashPackage.ASSIGNABLE: return createAssignable();
      case MyBashPackage.DQ_STRING: return createDQString();
      case MyBashPackage.EXPANSION: return createExpansion();
      case MyBashPackage.WORD_ELEMENT: return createWordElement();
      case MyBashPackage.COND_EXPRESSION: return createCondExpression();
      case MyBashPackage.COND_CONST: return createCondConst();
      case MyBashPackage.REGULAR_EXPRESSION: return createRegularExpression();
      case MyBashPackage.REGULAR_CONST: return createRegularConst();
      case MyBashPackage.ARITHMETIC_EXPANSION: return createArithmeticExpansion();
      case MyBashPackage.INDEX_EVALUATION: return createIndexEvaluation();
      case MyBashPackage.PARAMETER_EXPANSION: return createParameterExpansion();
      case MyBashPackage.PARAMETER_PROCESSOR: return createParameterProcessor();
      case MyBashPackage.COMMAND_SUBSTITUTION: return createCommandSubstitution();
      case MyBashPackage.PROCESS_SUBSTITUTION: return createProcessSubstitution();
      case MyBashPackage.EXPRESSION: return createExpression();
      case MyBashPackage.VARIABLE_ID: return createVariableId();
      case MyBashPackage.SIMPLE_LIST: return createSimpleList();
      case MyBashPackage.PIPELINE_COMMAND: return createPipelineCommand();
      case MyBashPackage.PIPELINE: return createPipeline();
      case MyBashPackage.COMMAND_NAME: return createCommandName();
      case MyBashPackage.ARITHMETIC_FOR_STATEMENT: return createArithmeticForStatement();
      case MyBashPackage.COND_UNARY_EXPRESSION: return createCondUnaryExpression();
      case MyBashPackage.COND_BINARY_EXPRESSION: return createCondBinaryExpression();
      case MyBashPackage.SINGLE_PROCESSOR: return createSingleProcessor();
      case MyBashPackage.REPLACE_PROCESSOR: return createReplaceProcessor();
      case MyBashPackage.SUB_STRING_PROCESSOR: return createSubStringProcessor();
      case MyBashPackage.BINARY_EXPRESSION: return createBinaryExpression();
      case MyBashPackage.CONDITIONAL_OPERATOR: return createConditionalOperator();
      case MyBashPackage.PREFIX_EXPRESSION: return createPrefixExpression();
      case MyBashPackage.SUFFIX_EXPRESSION: return createSuffixExpression();
      case MyBashPackage.CONST_PRIMARY_ITEM: return createConstPrimaryItem();
      case MyBashPackage.PRIMARY_ITEM: return createPrimaryItem();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyBashPackage.FOLLOW_WORD_OP:
        return createFollowWordOpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyBashPackage.FOLLOW_WORD_OP:
        return convertFollowWordOpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bash createBash()
  {
    BashImpl bash = new BashImpl();
    return bash;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompoundList createCompoundList()
  {
    CompoundListImpl compoundList = new CompoundListImpl();
    return compoundList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandUnit createCommandUnit()
  {
    CommandUnitImpl commandUnit = new CommandUnitImpl();
    return commandUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDefine createFunctionDefine()
  {
    FunctionDefineImpl functionDefine = new FunctionDefineImpl();
    return functionDefine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleCommand createSimpleCommand()
  {
    SimpleCommandImpl simpleCommand = new SimpleCommandImpl();
    return simpleCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShellCommand createShellCommand()
  {
    ShellCommandImpl shellCommand = new ShellCommandImpl();
    return shellCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupCommand createGroupCommand()
  {
    GroupCommandImpl groupCommand = new GroupCommandImpl();
    return groupCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondCommand createCondCommand()
  {
    CondCommandImpl condCommand = new CondCommandImpl();
    return condCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticCommand createArithmeticCommand()
  {
    ArithmeticCommandImpl arithmeticCommand = new ArithmeticCommandImpl();
    return arithmeticCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subshell createSubshell()
  {
    SubshellImpl subshell = new SubshellImpl();
    return subshell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Word createWord()
  {
    WordImpl word = new WordImpl();
    return word;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaseStatement createCaseStatement()
  {
    CaseStatementImpl caseStatement = new CaseStatementImpl();
    return caseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CasePattern createCasePattern()
  {
    CasePatternImpl casePattern = new CasePatternImpl();
    return casePattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElseIfBlock createElseIfBlock()
  {
    ElseIfBlockImpl elseIfBlock = new ElseIfBlockImpl();
    return elseIfBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Redirection createRedirection()
  {
    RedirectionImpl redirection = new RedirectionImpl();
    return redirection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LAssignment createLAssignment()
  {
    LAssignmentImpl lAssignment = new LAssignmentImpl();
    return lAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignable createAssignable()
  {
    AssignableImpl assignable = new AssignableImpl();
    return assignable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DQString createDQString()
  {
    DQStringImpl dqString = new DQStringImpl();
    return dqString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expansion createExpansion()
  {
    ExpansionImpl expansion = new ExpansionImpl();
    return expansion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordElement createWordElement()
  {
    WordElementImpl wordElement = new WordElementImpl();
    return wordElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondExpression createCondExpression()
  {
    CondExpressionImpl condExpression = new CondExpressionImpl();
    return condExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondConst createCondConst()
  {
    CondConstImpl condConst = new CondConstImpl();
    return condConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularExpression createRegularExpression()
  {
    RegularExpressionImpl regularExpression = new RegularExpressionImpl();
    return regularExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularConst createRegularConst()
  {
    RegularConstImpl regularConst = new RegularConstImpl();
    return regularConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticExpansion createArithmeticExpansion()
  {
    ArithmeticExpansionImpl arithmeticExpansion = new ArithmeticExpansionImpl();
    return arithmeticExpansion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexEvaluation createIndexEvaluation()
  {
    IndexEvaluationImpl indexEvaluation = new IndexEvaluationImpl();
    return indexEvaluation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterExpansion createParameterExpansion()
  {
    ParameterExpansionImpl parameterExpansion = new ParameterExpansionImpl();
    return parameterExpansion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterProcessor createParameterProcessor()
  {
    ParameterProcessorImpl parameterProcessor = new ParameterProcessorImpl();
    return parameterProcessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandSubstitution createCommandSubstitution()
  {
    CommandSubstitutionImpl commandSubstitution = new CommandSubstitutionImpl();
    return commandSubstitution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessSubstitution createProcessSubstitution()
  {
    ProcessSubstitutionImpl processSubstitution = new ProcessSubstitutionImpl();
    return processSubstitution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableId createVariableId()
  {
    VariableIdImpl variableId = new VariableIdImpl();
    return variableId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleList createSimpleList()
  {
    SimpleListImpl simpleList = new SimpleListImpl();
    return simpleList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PipelineCommand createPipelineCommand()
  {
    PipelineCommandImpl pipelineCommand = new PipelineCommandImpl();
    return pipelineCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pipeline createPipeline()
  {
    PipelineImpl pipeline = new PipelineImpl();
    return pipeline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandName createCommandName()
  {
    CommandNameImpl commandName = new CommandNameImpl();
    return commandName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticForStatement createArithmeticForStatement()
  {
    ArithmeticForStatementImpl arithmeticForStatement = new ArithmeticForStatementImpl();
    return arithmeticForStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondUnaryExpression createCondUnaryExpression()
  {
    CondUnaryExpressionImpl condUnaryExpression = new CondUnaryExpressionImpl();
    return condUnaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CondBinaryExpression createCondBinaryExpression()
  {
    CondBinaryExpressionImpl condBinaryExpression = new CondBinaryExpressionImpl();
    return condBinaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleProcessor createSingleProcessor()
  {
    SingleProcessorImpl singleProcessor = new SingleProcessorImpl();
    return singleProcessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReplaceProcessor createReplaceProcessor()
  {
    ReplaceProcessorImpl replaceProcessor = new ReplaceProcessorImpl();
    return replaceProcessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubStringProcessor createSubStringProcessor()
  {
    SubStringProcessorImpl subStringProcessor = new SubStringProcessorImpl();
    return subStringProcessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryExpression createBinaryExpression()
  {
    BinaryExpressionImpl binaryExpression = new BinaryExpressionImpl();
    return binaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalOperator createConditionalOperator()
  {
    ConditionalOperatorImpl conditionalOperator = new ConditionalOperatorImpl();
    return conditionalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixExpression createPrefixExpression()
  {
    PrefixExpressionImpl prefixExpression = new PrefixExpressionImpl();
    return prefixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SuffixExpression createSuffixExpression()
  {
    SuffixExpressionImpl suffixExpression = new SuffixExpressionImpl();
    return suffixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstPrimaryItem createConstPrimaryItem()
  {
    ConstPrimaryItemImpl constPrimaryItem = new ConstPrimaryItemImpl();
    return constPrimaryItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryItem createPrimaryItem()
  {
    PrimaryItemImpl primaryItem = new PrimaryItemImpl();
    return primaryItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FollowWordOp createFollowWordOpFromString(EDataType eDataType, String initialValue)
  {
    FollowWordOp result = FollowWordOp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFollowWordOpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyBashPackage getMyBashPackage()
  {
    return (MyBashPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyBashPackage getPackage()
  {
    return MyBashPackage.eINSTANCE;
  }

} //MyBashFactoryImpl
