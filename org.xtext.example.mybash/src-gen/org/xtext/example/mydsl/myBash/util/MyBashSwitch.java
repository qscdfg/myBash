/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myBash.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myBash.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myBash.MyBashPackage
 * @generated
 */
public class MyBashSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyBashPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyBashSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyBashPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyBashPackage.BASH:
      {
        Bash bash = (Bash)theEObject;
        T result = caseBash(bash);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COMPOUND_LIST:
      {
        CompoundList compoundList = (CompoundList)theEObject;
        T result = caseCompoundList(compoundList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COMMAND_UNIT:
      {
        CommandUnit commandUnit = (CommandUnit)theEObject;
        T result = caseCommandUnit(commandUnit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.FUNCTION_DEFINE:
      {
        FunctionDefine functionDefine = (FunctionDefine)theEObject;
        T result = caseFunctionDefine(functionDefine);
        if (result == null) result = caseCommandUnit(functionDefine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SIMPLE_COMMAND:
      {
        SimpleCommand simpleCommand = (SimpleCommand)theEObject;
        T result = caseSimpleCommand(simpleCommand);
        if (result == null) result = caseCommandUnit(simpleCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SHELL_COMMAND:
      {
        ShellCommand shellCommand = (ShellCommand)theEObject;
        T result = caseShellCommand(shellCommand);
        if (result == null) result = caseCommandUnit(shellCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.GROUP_COMMAND:
      {
        GroupCommand groupCommand = (GroupCommand)theEObject;
        T result = caseGroupCommand(groupCommand);
        if (result == null) result = caseShellCommand(groupCommand);
        if (result == null) result = caseCommandUnit(groupCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COND_COMMAND:
      {
        CondCommand condCommand = (CondCommand)theEObject;
        T result = caseCondCommand(condCommand);
        if (result == null) result = caseShellCommand(condCommand);
        if (result == null) result = caseCommandUnit(condCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ARITHMETIC_COMMAND:
      {
        ArithmeticCommand arithmeticCommand = (ArithmeticCommand)theEObject;
        T result = caseArithmeticCommand(arithmeticCommand);
        if (result == null) result = caseShellCommand(arithmeticCommand);
        if (result == null) result = caseCommandUnit(arithmeticCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SUBSHELL:
      {
        Subshell subshell = (Subshell)theEObject;
        T result = caseSubshell(subshell);
        if (result == null) result = caseShellCommand(subshell);
        if (result == null) result = caseCommandUnit(subshell);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.WORD:
      {
        Word word = (Word)theEObject;
        T result = caseWord(word);
        if (result == null) result = caseAssignable(word);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.CASE_STATEMENT:
      {
        CaseStatement caseStatement = (CaseStatement)theEObject;
        T result = caseCaseStatement(caseStatement);
        if (result == null) result = caseShellCommand(caseStatement);
        if (result == null) result = caseCommandUnit(caseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.CASE_PATTERN:
      {
        CasePattern casePattern = (CasePattern)theEObject;
        T result = caseCasePattern(casePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseShellCommand(ifStatement);
        if (result == null) result = caseCommandUnit(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ELSE_IF_BLOCK:
      {
        ElseIfBlock elseIfBlock = (ElseIfBlock)theEObject;
        T result = caseElseIfBlock(elseIfBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.FOR_STATEMENT:
      {
        ForStatement forStatement = (ForStatement)theEObject;
        T result = caseForStatement(forStatement);
        if (result == null) result = caseShellCommand(forStatement);
        if (result == null) result = caseCommandUnit(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.WHILE_STATEMENT:
      {
        WhileStatement whileStatement = (WhileStatement)theEObject;
        T result = caseWhileStatement(whileStatement);
        if (result == null) result = caseShellCommand(whileStatement);
        if (result == null) result = caseCommandUnit(whileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.REDIRECTION:
      {
        Redirection redirection = (Redirection)theEObject;
        T result = caseRedirection(redirection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ARRAY:
      {
        Array array = (Array)theEObject;
        T result = caseArray(array);
        if (result == null) result = caseAssignable(array);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseWordElement(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.LASSIGNMENT:
      {
        LAssignment lAssignment = (LAssignment)theEObject;
        T result = caseLAssignment(lAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ASSIGNABLE:
      {
        Assignable assignable = (Assignable)theEObject;
        T result = caseAssignable(assignable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.DQ_STRING:
      {
        DQString dqString = (DQString)theEObject;
        T result = caseDQString(dqString);
        if (result == null) result = caseWordElement(dqString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.EXPANSION:
      {
        Expansion expansion = (Expansion)theEObject;
        T result = caseExpansion(expansion);
        if (result == null) result = caseWordElement(expansion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.WORD_ELEMENT:
      {
        WordElement wordElement = (WordElement)theEObject;
        T result = caseWordElement(wordElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COND_EXPRESSION:
      {
        CondExpression condExpression = (CondExpression)theEObject;
        T result = caseCondExpression(condExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COND_CONST:
      {
        CondConst condConst = (CondConst)theEObject;
        T result = caseCondConst(condConst);
        if (result == null) result = caseCondExpression(condConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.REGULAR_EXPRESSION:
      {
        RegularExpression regularExpression = (RegularExpression)theEObject;
        T result = caseRegularExpression(regularExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.REGULAR_CONST:
      {
        RegularConst regularConst = (RegularConst)theEObject;
        T result = caseRegularConst(regularConst);
        if (result == null) result = caseRegularExpression(regularConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ARITHMETIC_EXPANSION:
      {
        ArithmeticExpansion arithmeticExpansion = (ArithmeticExpansion)theEObject;
        T result = caseArithmeticExpansion(arithmeticExpansion);
        if (result == null) result = caseExpansion(arithmeticExpansion);
        if (result == null) result = caseWordElement(arithmeticExpansion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.INDEX_EVALUATION:
      {
        IndexEvaluation indexEvaluation = (IndexEvaluation)theEObject;
        T result = caseIndexEvaluation(indexEvaluation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PARAMETER_EXPANSION:
      {
        ParameterExpansion parameterExpansion = (ParameterExpansion)theEObject;
        T result = caseParameterExpansion(parameterExpansion);
        if (result == null) result = caseExpansion(parameterExpansion);
        if (result == null) result = caseWordElement(parameterExpansion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PARAMETER_PROCESSOR:
      {
        ParameterProcessor parameterProcessor = (ParameterProcessor)theEObject;
        T result = caseParameterProcessor(parameterProcessor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COMMAND_SUBSTITUTION:
      {
        CommandSubstitution commandSubstitution = (CommandSubstitution)theEObject;
        T result = caseCommandSubstitution(commandSubstitution);
        if (result == null) result = caseExpansion(commandSubstitution);
        if (result == null) result = caseWordElement(commandSubstitution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PROCESS_SUBSTITUTION:
      {
        ProcessSubstitution processSubstitution = (ProcessSubstitution)theEObject;
        T result = caseProcessSubstitution(processSubstitution);
        if (result == null) result = caseExpansion(processSubstitution);
        if (result == null) result = caseWordElement(processSubstitution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.VARIABLE_ID:
      {
        VariableId variableId = (VariableId)theEObject;
        T result = caseVariableId(variableId);
        if (result == null) result = caseExpression(variableId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SIMPLE_LIST:
      {
        SimpleList simpleList = (SimpleList)theEObject;
        T result = caseSimpleList(simpleList);
        if (result == null) result = caseCommandUnit(simpleList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PIPELINE_COMMAND:
      {
        PipelineCommand pipelineCommand = (PipelineCommand)theEObject;
        T result = casePipelineCommand(pipelineCommand);
        if (result == null) result = caseCommandUnit(pipelineCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PIPELINE:
      {
        Pipeline pipeline = (Pipeline)theEObject;
        T result = casePipeline(pipeline);
        if (result == null) result = caseCommandUnit(pipeline);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COMMAND_NAME:
      {
        CommandName commandName = (CommandName)theEObject;
        T result = caseCommandName(commandName);
        if (result == null) result = caseWord(commandName);
        if (result == null) result = caseAssignable(commandName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.ARITHMETIC_FOR_STATEMENT:
      {
        ArithmeticForStatement arithmeticForStatement = (ArithmeticForStatement)theEObject;
        T result = caseArithmeticForStatement(arithmeticForStatement);
        if (result == null) result = caseForStatement(arithmeticForStatement);
        if (result == null) result = caseShellCommand(arithmeticForStatement);
        if (result == null) result = caseCommandUnit(arithmeticForStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COND_UNARY_EXPRESSION:
      {
        CondUnaryExpression condUnaryExpression = (CondUnaryExpression)theEObject;
        T result = caseCondUnaryExpression(condUnaryExpression);
        if (result == null) result = caseCondExpression(condUnaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.COND_BINARY_EXPRESSION:
      {
        CondBinaryExpression condBinaryExpression = (CondBinaryExpression)theEObject;
        T result = caseCondBinaryExpression(condBinaryExpression);
        if (result == null) result = caseCondExpression(condBinaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SINGLE_PROCESSOR:
      {
        SingleProcessor singleProcessor = (SingleProcessor)theEObject;
        T result = caseSingleProcessor(singleProcessor);
        if (result == null) result = caseParameterProcessor(singleProcessor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.REPLACE_PROCESSOR:
      {
        ReplaceProcessor replaceProcessor = (ReplaceProcessor)theEObject;
        T result = caseReplaceProcessor(replaceProcessor);
        if (result == null) result = caseParameterProcessor(replaceProcessor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SUB_STRING_PROCESSOR:
      {
        SubStringProcessor subStringProcessor = (SubStringProcessor)theEObject;
        T result = caseSubStringProcessor(subStringProcessor);
        if (result == null) result = caseParameterProcessor(subStringProcessor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.BINARY_EXPRESSION:
      {
        BinaryExpression binaryExpression = (BinaryExpression)theEObject;
        T result = caseBinaryExpression(binaryExpression);
        if (result == null) result = caseExpression(binaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.CONDITIONAL_OPERATOR:
      {
        ConditionalOperator conditionalOperator = (ConditionalOperator)theEObject;
        T result = caseConditionalOperator(conditionalOperator);
        if (result == null) result = caseExpression(conditionalOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PREFIX_EXPRESSION:
      {
        PrefixExpression prefixExpression = (PrefixExpression)theEObject;
        T result = casePrefixExpression(prefixExpression);
        if (result == null) result = caseExpression(prefixExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.SUFFIX_EXPRESSION:
      {
        SuffixExpression suffixExpression = (SuffixExpression)theEObject;
        T result = caseSuffixExpression(suffixExpression);
        if (result == null) result = caseExpression(suffixExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.CONST_PRIMARY_ITEM:
      {
        ConstPrimaryItem constPrimaryItem = (ConstPrimaryItem)theEObject;
        T result = caseConstPrimaryItem(constPrimaryItem);
        if (result == null) result = caseExpression(constPrimaryItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyBashPackage.PRIMARY_ITEM:
      {
        PrimaryItem primaryItem = (PrimaryItem)theEObject;
        T result = casePrimaryItem(primaryItem);
        if (result == null) result = caseExpression(primaryItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bash</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bash</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBash(Bash object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compound List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compound List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompoundList(CompoundList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandUnit(CommandUnit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Define</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Define</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDefine(FunctionDefine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleCommand(SimpleCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shell Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shell Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShellCommand(ShellCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroupCommand(GroupCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondCommand(CondCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticCommand(ArithmeticCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subshell</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subshell</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubshell(Subshell object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWord(Word object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseStatement(CaseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCasePattern(CasePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else If Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else If Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseIfBlock(ElseIfBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStatement(ForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileStatement(WhileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Redirection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Redirection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRedirection(Redirection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArray(Array object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LAssignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LAssignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLAssignment(LAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignable(Assignable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DQ String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DQ String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDQString(DQString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expansion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expansion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpansion(Expansion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordElement(WordElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondExpression(CondExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondConst(CondConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularExpression(RegularExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularConst(RegularConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expansion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expansion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpansion(ArithmeticExpansion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Evaluation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Evaluation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexEvaluation(IndexEvaluation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Expansion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Expansion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterExpansion(ParameterExpansion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Processor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Processor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterProcessor(ParameterProcessor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Substitution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Substitution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandSubstitution(CommandSubstitution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Substitution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Substitution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessSubstitution(ProcessSubstitution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableId(VariableId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleList(SimpleList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineCommand(PipelineCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipeline(Pipeline object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandName(CommandName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticForStatement(ArithmeticForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Unary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Unary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondUnaryExpression(CondUnaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cond Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cond Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondBinaryExpression(CondBinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Processor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Processor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleProcessor(SingleProcessor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Replace Processor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Replace Processor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplaceProcessor(ReplaceProcessor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub String Processor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub String Processor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubStringProcessor(SubStringProcessor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryExpression(BinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalOperator(ConditionalOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixExpression(PrefixExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Suffix Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Suffix Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuffixExpression(SuffixExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Primary Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Primary Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstPrimaryItem(ConstPrimaryItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryItem(PrimaryItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyBashSwitch
