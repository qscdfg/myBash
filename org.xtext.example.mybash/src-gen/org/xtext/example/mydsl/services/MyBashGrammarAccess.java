/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyBashGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Bash");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBashAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cCommandsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cCommandsSimpleListParserRuleCall_0_2_0_0 = (RuleCall)cCommandsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final RuleCall cNewLineParserRuleCall_0_2_1_0 = (RuleCall)cGroup_0_2_1.eContents().get(0);
		private final Assignment cCommandsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cCommandsSimpleListParserRuleCall_0_2_1_1_0 = (RuleCall)cCommandsAssignment_0_2_1_1.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_0_2_2 = (RuleCall)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cErrorAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cErrorWordParserRuleCall_1_1_0_0 = (RuleCall)cErrorAssignment_1_1_0.eContents().get(0);
		private final Assignment cErrorAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cErrorAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cErrorAssignment_1_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Bash:
		//	{Bash} MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)?
		//	//
		//	| WS (error?=Word | error?=Assignment) WS;
		@Override public ParserRule getRule() { return rule; }
		
		//{Bash} MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)? //
		//| WS (error?=Word | error?=Assignment) WS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Bash} MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Bash}
		public Action getBashAction_0_0() { return cBashAction_0_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_0_1() { return cMaybeNewLineParserRuleCall_0_1; }
		
		//(commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//commands+=SimpleList
		public Assignment getCommandsAssignment_0_2_0() { return cCommandsAssignment_0_2_0; }
		
		//SimpleList
		public RuleCall getCommandsSimpleListParserRuleCall_0_2_0_0() { return cCommandsSimpleListParserRuleCall_0_2_0_0; }
		
		//(NewLine commands+=SimpleList)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//NewLine
		public RuleCall getNewLineParserRuleCall_0_2_1_0() { return cNewLineParserRuleCall_0_2_1_0; }
		
		//commands+=SimpleList
		public Assignment getCommandsAssignment_0_2_1_1() { return cCommandsAssignment_0_2_1_1; }
		
		//SimpleList
		public RuleCall getCommandsSimpleListParserRuleCall_0_2_1_1_0() { return cCommandsSimpleListParserRuleCall_0_2_1_1_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_0_2_2() { return cMaybeNewLineParserRuleCall_0_2_2; }
		
		//WS (error?=Word | error?=Assignment) WS
		public Group getGroup_1() { return cGroup_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }
		
		//(error?=Word | error?=Assignment)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//error?=Word
		public Assignment getErrorAssignment_1_1_0() { return cErrorAssignment_1_1_0; }
		
		//Word
		public RuleCall getErrorWordParserRuleCall_1_1_0_0() { return cErrorWordParserRuleCall_1_1_0_0; }
		
		//error?=Assignment
		public Assignment getErrorAssignment_1_1_1() { return cErrorAssignment_1_1_1; }
		
		//Assignment
		public RuleCall getErrorAssignmentParserRuleCall_1_1_1_0() { return cErrorAssignmentParserRuleCall_1_1_1_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_2() { return cWSTerminalRuleCall_1_2; }
	}
	public class CompoundListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CompoundList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMaybeNewLineParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCommandsSimpleListParserRuleCall_1_0_0 = (RuleCall)cCommandsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cNewLineParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCommandsSimpleListParserRuleCall_1_1_1_0 = (RuleCall)cCommandsAssignment_1_1_1.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//CompoundList:
		//	MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine);
		@Override public ParserRule getRule() { return rule; }
		
		//MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)
		public Group getGroup() { return cGroup; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_0() { return cMaybeNewLineParserRuleCall_0; }
		
		//(commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)
		public Group getGroup_1() { return cGroup_1; }
		
		//commands+=SimpleList
		public Assignment getCommandsAssignment_1_0() { return cCommandsAssignment_1_0; }
		
		//SimpleList
		public RuleCall getCommandsSimpleListParserRuleCall_1_0_0() { return cCommandsSimpleListParserRuleCall_1_0_0; }
		
		//(NewLine commands+=SimpleList)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//NewLine
		public RuleCall getNewLineParserRuleCall_1_1_0() { return cNewLineParserRuleCall_1_1_0; }
		
		//commands+=SimpleList
		public Assignment getCommandsAssignment_1_1_1() { return cCommandsAssignment_1_1_1; }
		
		//SimpleList
		public RuleCall getCommandsSimpleListParserRuleCall_1_1_1_0() { return cCommandsSimpleListParserRuleCall_1_1_1_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_2() { return cMaybeNewLineParserRuleCall_1_2; }
	}
	public class SimpleListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.SimpleList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPipelineCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleListLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cOpAlternatives_1_1_0_0_0 = (Alternatives)cOpAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0_0_0 = (Keyword)cOpAlternatives_1_1_0_0_0.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1 = (Keyword)cOpAlternatives_1_1_0_0_0.eContents().get(1);
		private final RuleCall cMaybeNewLineParserRuleCall_1_1_0_1 = (RuleCall)cGroup_1_1_0.eContents().get(1);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpSemicolonKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPipelineCommandParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBackendAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cBackendAmpersandKeyword_2_0_0 = (Keyword)cBackendAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//SimpleList CommandUnit:
		//	PipelineCommand ({SimpleList.left=current} (op=('&&' | '||') MaybeNewLine | op=('&' | ';')) right=PipelineCommand)*
		//	(backend?='&' | ';')?
		@Override public ParserRule getRule() { return rule; }
		
		//PipelineCommand ({SimpleList.left=current} (op=('&&' | '||') MaybeNewLine | op=('&' | ';')) right=PipelineCommand)*
		//(backend?='&' | ';')?
		public Group getGroup() { return cGroup; }
		
		//PipelineCommand
		public RuleCall getPipelineCommandParserRuleCall_0() { return cPipelineCommandParserRuleCall_0; }
		
		//({SimpleList.left=current} (op=('&&' | '||') MaybeNewLine | op=('&' | ';')) right=PipelineCommand)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SimpleList.left=current}
		public Action getSimpleListLeftAction_1_0() { return cSimpleListLeftAction_1_0; }
		
		//(op=('&&' | '||') MaybeNewLine | op=('&' | ';'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//op=('&&' | '||') MaybeNewLine
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//op=('&&' | '||')
		public Assignment getOpAssignment_1_1_0_0() { return cOpAssignment_1_1_0_0; }
		
		//('&&' | '||')
		public Alternatives getOpAlternatives_1_1_0_0_0() { return cOpAlternatives_1_1_0_0_0; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0_0_0() { return cOpAmpersandAmpersandKeyword_1_1_0_0_0_0; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_1_0_1() { return cMaybeNewLineParserRuleCall_1_1_0_1; }
		
		//op=('&' | ';')
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }
		
		//('&' | ';')
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_1_0_0() { return cOpAmpersandKeyword_1_1_1_0_0; }
		
		//';'
		public Keyword getOpSemicolonKeyword_1_1_1_0_1() { return cOpSemicolonKeyword_1_1_1_0_1; }
		
		//right=PipelineCommand
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PipelineCommand
		public RuleCall getRightPipelineCommandParserRuleCall_1_2_0() { return cRightPipelineCommandParserRuleCall_1_2_0; }
		
		//(backend?='&' | ';')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//backend?='&'
		public Assignment getBackendAssignment_2_0() { return cBackendAssignment_2_0; }
		
		//'&'
		public Keyword getBackendAmpersandKeyword_2_0_0() { return cBackendAmpersandKeyword_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class PipelineCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.PipelineCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPipelineCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNotAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNotExclamationMarkKeyword_0_1_0 = (Keyword)cNotAssignment_0_1.eContents().get(0);
		private final Assignment cPipelineAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPipelinePipelineParserRuleCall_0_2_0 = (RuleCall)cPipelineAssignment_0_2.eContents().get(0);
		private final RuleCall cPipelineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PipelineCommand CommandUnit:
		//	{PipelineCommand} not?='!' pipeline=Pipeline
		//	| Pipeline
		@Override public ParserRule getRule() { return rule; }
		
		//{PipelineCommand} not?='!' pipeline=Pipeline | Pipeline
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PipelineCommand} not?='!' pipeline=Pipeline
		public Group getGroup_0() { return cGroup_0; }
		
		//{PipelineCommand}
		public Action getPipelineCommandAction_0_0() { return cPipelineCommandAction_0_0; }
		
		//not?='!'
		public Assignment getNotAssignment_0_1() { return cNotAssignment_0_1; }
		
		//'!'
		public Keyword getNotExclamationMarkKeyword_0_1_0() { return cNotExclamationMarkKeyword_0_1_0; }
		
		//pipeline=Pipeline
		public Assignment getPipelineAssignment_0_2() { return cPipelineAssignment_0_2; }
		
		//Pipeline
		public RuleCall getPipelinePipelineParserRuleCall_0_2_0() { return cPipelinePipelineParserRuleCall_0_2_0; }
		
		//Pipeline
		public RuleCall getPipelineParserRuleCall_1() { return cPipelineParserRuleCall_1; }
	}
	public class PipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Pipeline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPipelineLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineAmpersandKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cMaybeNewLineParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightCommandParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//Pipeline CommandUnit:
		//	Command ({Pipeline.left=current} op=('|' | '|&') MaybeNewLine right=Command)*
		@Override public ParserRule getRule() { return rule; }
		
		//Command ({Pipeline.left=current} op=('|' | '|&') MaybeNewLine right=Command)*
		public Group getGroup() { return cGroup; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//({Pipeline.left=current} op=('|' | '|&') MaybeNewLine right=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Pipeline.left=current}
		public Action getPipelineLeftAction_1_0() { return cPipelineLeftAction_1_0; }
		
		//op=('|' | '|&')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('|' | '|&')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0_0() { return cOpVerticalLineKeyword_1_1_0_0; }
		
		//'|&'
		public Keyword getOpVerticalLineAmpersandKeyword_1_1_0_1() { return cOpVerticalLineAmpersandKeyword_1_1_0_1; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_2() { return cMaybeNewLineParserRuleCall_1_2; }
		
		//right=Command
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//Command
		public RuleCall getRightCommandParserRuleCall_1_3_0() { return cRightCommandParserRuleCall_1_3_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cShellCommandParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cRedirectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRedirectsRedirectionParserRuleCall_2_1_0 = (RuleCall)cRedirectsAssignment_2_1.eContents().get(0);
		
		//Command CommandUnit:
		//	FunctionDefine | SimpleCommand | ShellCommand redirects+=Redirection*
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDefine | SimpleCommand | ShellCommand redirects+=Redirection*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionDefine
		public RuleCall getFunctionDefineParserRuleCall_0() { return cFunctionDefineParserRuleCall_0; }
		
		//SimpleCommand
		public RuleCall getSimpleCommandParserRuleCall_1() { return cSimpleCommandParserRuleCall_1; }
		
		//ShellCommand redirects+=Redirection*
		public Group getGroup_2() { return cGroup_2; }
		
		//ShellCommand
		public RuleCall getShellCommandParserRuleCall_2_0() { return cShellCommandParserRuleCall_2_0; }
		
		//redirects+=Redirection*
		public Assignment getRedirectsAssignment_2_1() { return cRedirectsAssignment_2_1; }
		
		//Redirection
		public RuleCall getRedirectsRedirectionParserRuleCall_2_1_0() { return cRedirectsRedirectionParserRuleCall_2_1_0; }
	}
	public class FunctionDefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.FunctionDefine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionDefineAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFunctionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameFunctionNameParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cGroup_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_0_0 = (Keyword)cGroup_0_3_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_0_1 = (Keyword)cGroup_0_3_0.eContents().get(1);
		private final RuleCall cMaybeNewLineParserRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Assignment cBodyAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cBodyShellCommandParserRuleCall_0_4_0 = (RuleCall)cBodyAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionDefineAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameFunctionNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cMaybeNewLineParserRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Assignment cBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBodyShellCommandParserRuleCall_1_3_0 = (RuleCall)cBodyAssignment_1_3.eContents().get(0);
		
		//FunctionDefine:
		//	{FunctionDefine} 'function' name=FunctionName ((-> '(' ')')? MaybeNewLine) body=ShellCommand
		//	| {FunctionDefine} name=FunctionName ('(' ')' MaybeNewLine) body=ShellCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefine} 'function' name=FunctionName ((-> '(' ')')? MaybeNewLine) body=ShellCommand | {FunctionDefine}
		//name=FunctionName ('(' ')' MaybeNewLine) body=ShellCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunctionDefine} 'function' name=FunctionName ((-> '(' ')')? MaybeNewLine) body=ShellCommand
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionDefine}
		public Action getFunctionDefineAction_0_0() { return cFunctionDefineAction_0_0; }
		
		//'function'
		public Keyword getFunctionKeyword_0_1() { return cFunctionKeyword_0_1; }
		
		//name=FunctionName
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_2_0() { return cNameFunctionNameParserRuleCall_0_2_0; }
		
		//((-> '(' ')')? MaybeNewLine)
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//(-> '(' ')')?
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }
		
		//-> '('
		public Keyword getLeftParenthesisKeyword_0_3_0_0() { return cLeftParenthesisKeyword_0_3_0_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_0_1() { return cRightParenthesisKeyword_0_3_0_1; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_0_3_1() { return cMaybeNewLineParserRuleCall_0_3_1; }
		
		//body=ShellCommand
		public Assignment getBodyAssignment_0_4() { return cBodyAssignment_0_4; }
		
		//ShellCommand
		public RuleCall getBodyShellCommandParserRuleCall_0_4_0() { return cBodyShellCommandParserRuleCall_0_4_0; }
		
		//{FunctionDefine} name=FunctionName ('(' ')' MaybeNewLine) body=ShellCommand
		public Group getGroup_1() { return cGroup_1; }
		
		//{FunctionDefine}
		public Action getFunctionDefineAction_1_0() { return cFunctionDefineAction_1_0; }
		
		//name=FunctionName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_1_0() { return cNameFunctionNameParserRuleCall_1_1_0; }
		
		//('(' ')' MaybeNewLine)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_1() { return cRightParenthesisKeyword_1_2_1; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_2_2() { return cMaybeNewLineParserRuleCall_1_2_2; }
		
		//body=ShellCommand
		public Assignment getBodyAssignment_1_3() { return cBodyAssignment_1_3; }
		
		//ShellCommand
		public RuleCall getBodyShellCommandParserRuleCall_1_3_0() { return cBodyShellCommandParserRuleCall_1_3_0; }
	}
	public class SimpleCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.SimpleCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAssignmentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_0_0_0 = (RuleCall)cAssignmentsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cCommandAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cCommandCommandNameParserRuleCall_0_1_0_0 = (RuleCall)cCommandAssignment_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cParametersAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cParametersWordParserRuleCall_0_1_1_0_0 = (RuleCall)cParametersAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cRAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cRRedirectionParserRuleCall_0_1_1_1_0 = (RuleCall)cRAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCommandAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCommandCommandNameParserRuleCall_1_0_0 = (RuleCall)cCommandAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Alternatives cParametersAlternatives_1_1_0_0 = (Alternatives)cParametersAssignment_1_1_0.eContents().get(0);
		private final RuleCall cParametersWordParserRuleCall_1_1_0_0_0 = (RuleCall)cParametersAlternatives_1_1_0_0.eContents().get(0);
		private final RuleCall cParametersLAssignmentParserRuleCall_1_1_0_0_1 = (RuleCall)cParametersAlternatives_1_1_0_0.eContents().get(1);
		private final Assignment cRAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cRRedirectionParserRuleCall_1_1_1_0 = (RuleCall)cRAssignment_1_1_1.eContents().get(0);
		private final Assignment cRAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRRedirectionParserRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		
		//SimpleCommand:
		//	assignments+=Assignment+ (command=CommandName (parameters+=Word | r+=Redirection)*)?
		//	| command=CommandName (parameters+=(Word | LAssignment) | r+=Redirection)*
		//	| r+=Redirection+;
		@Override public ParserRule getRule() { return rule; }
		
		//assignments+=Assignment+ (command=CommandName (parameters+=Word | r+=Redirection)*)? | command=CommandName
		//(parameters+=(Word | LAssignment) | r+=Redirection)* | r+=Redirection+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assignments+=Assignment+ (command=CommandName (parameters+=Word | r+=Redirection)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//assignments+=Assignment+
		public Assignment getAssignmentsAssignment_0_0() { return cAssignmentsAssignment_0_0; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_0_0_0() { return cAssignmentsAssignmentParserRuleCall_0_0_0; }
		
		//(command=CommandName (parameters+=Word | r+=Redirection)*)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//command=CommandName
		public Assignment getCommandAssignment_0_1_0() { return cCommandAssignment_0_1_0; }
		
		//CommandName
		public RuleCall getCommandCommandNameParserRuleCall_0_1_0_0() { return cCommandCommandNameParserRuleCall_0_1_0_0; }
		
		//(parameters+=Word | r+=Redirection)*
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//parameters+=Word
		public Assignment getParametersAssignment_0_1_1_0() { return cParametersAssignment_0_1_1_0; }
		
		//Word
		public RuleCall getParametersWordParserRuleCall_0_1_1_0_0() { return cParametersWordParserRuleCall_0_1_1_0_0; }
		
		//r+=Redirection
		public Assignment getRAssignment_0_1_1_1() { return cRAssignment_0_1_1_1; }
		
		//Redirection
		public RuleCall getRRedirectionParserRuleCall_0_1_1_1_0() { return cRRedirectionParserRuleCall_0_1_1_1_0; }
		
		//command=CommandName (parameters+=(Word | LAssignment) | r+=Redirection)*
		public Group getGroup_1() { return cGroup_1; }
		
		//command=CommandName
		public Assignment getCommandAssignment_1_0() { return cCommandAssignment_1_0; }
		
		//CommandName
		public RuleCall getCommandCommandNameParserRuleCall_1_0_0() { return cCommandCommandNameParserRuleCall_1_0_0; }
		
		//(parameters+=(Word | LAssignment) | r+=Redirection)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//parameters+=(Word | LAssignment)
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }
		
		//(Word | LAssignment)
		public Alternatives getParametersAlternatives_1_1_0_0() { return cParametersAlternatives_1_1_0_0; }
		
		//Word
		public RuleCall getParametersWordParserRuleCall_1_1_0_0_0() { return cParametersWordParserRuleCall_1_1_0_0_0; }
		
		//LAssignment
		public RuleCall getParametersLAssignmentParserRuleCall_1_1_0_0_1() { return cParametersLAssignmentParserRuleCall_1_1_0_0_1; }
		
		//r+=Redirection
		public Assignment getRAssignment_1_1_1() { return cRAssignment_1_1_1; }
		
		//Redirection
		public RuleCall getRRedirectionParserRuleCall_1_1_1_0() { return cRRedirectionParserRuleCall_1_1_1_0; }
		
		//r+=Redirection+
		public Assignment getRAssignment_2() { return cRAssignment_2; }
		
		//Redirection
		public RuleCall getRRedirectionParserRuleCall_2_0() { return cRRedirectionParserRuleCall_2_0; }
	}
	public class ShellCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ShellCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCaseStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubshellParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCondCommandParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cArithmeticCommandParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ShellCommand:
		//	GroupCommand | IfStatement | WhileStatement | ForStatement | CaseStatement | Subshell | CondCommand |
		//	ArithmeticCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//GroupCommand | IfStatement | WhileStatement | ForStatement | CaseStatement | Subshell | CondCommand | ArithmeticCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GroupCommand
		public RuleCall getGroupCommandParserRuleCall_0() { return cGroupCommandParserRuleCall_0; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_1() { return cIfStatementParserRuleCall_1; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_3() { return cForStatementParserRuleCall_3; }
		
		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_4() { return cCaseStatementParserRuleCall_4; }
		
		//Subshell
		public RuleCall getSubshellParserRuleCall_5() { return cSubshellParserRuleCall_5; }
		
		//CondCommand
		public RuleCall getCondCommandParserRuleCall_6() { return cCondCommandParserRuleCall_6; }
		
		//ArithmeticCommand
		public RuleCall getArithmeticCommandParserRuleCall_7() { return cArithmeticCommandParserRuleCall_7; }
	}
	public class GroupCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.GroupCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyCompoundListParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GroupCommand:
		//	{GroupCommand} '{' body=CompoundList '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupCommand} '{' body=CompoundList '}'
		public Group getGroup() { return cGroup; }
		
		//{GroupCommand}
		public Action getGroupCommandAction_0() { return cGroupCommandAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_2_0() { return cBodyCompoundListParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CondCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CondCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionCondOrAndParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CondCommand:
		//	'[[' expression=CondOrAnd ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' expression=CondOrAnd ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//expression=CondOrAnd
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//CondOrAnd
		public RuleCall getExpressionCondOrAndParserRuleCall_1_0() { return cExpressionCondOrAndParserRuleCall_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_2() { return cRightSquareBracketRightSquareBracketKeyword_2; }
	}
	public class ArithmeticCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArithmeticCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEvaluationParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArithmeticCommand:
		//	'((' expression=Evaluation '))';
		@Override public ParserRule getRule() { return rule; }
		
		//'((' expression=Evaluation '))'
		public Group getGroup() { return cGroup; }
		
		//'(('
		public Keyword getLeftParenthesisLeftParenthesisKeyword_0() { return cLeftParenthesisLeftParenthesisKeyword_0; }
		
		//expression=Evaluation
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Evaluation
		public RuleCall getExpressionEvaluationParserRuleCall_1_0() { return cExpressionEvaluationParserRuleCall_1_0; }
		
		//'))'
		public Keyword getRightParenthesisRightParenthesisKeyword_2() { return cRightParenthesisRightParenthesisKeyword_2; }
	}
	public class SubshellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Subshell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCompoundListParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Subshell:
		//	'(' body=CompoundList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' body=CompoundList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_1_0() { return cBodyCompoundListParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CommandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CommandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandNameAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRefFunctionDefineCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefFunctionDefineFunctionNameParserRuleCall_0_1_0_1 = (RuleCall)cRefFunctionDefineCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cWordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommandName Word:
		//	{CommandName} ref=[FunctionDefine|FunctionName] | Words
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandName} ref=[FunctionDefine|FunctionName] | Words
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CommandName} ref=[FunctionDefine|FunctionName]
		public Group getGroup_0() { return cGroup_0; }
		
		//{CommandName}
		public Action getCommandNameAction_0_0() { return cCommandNameAction_0_0; }
		
		//ref=[FunctionDefine|FunctionName]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//[FunctionDefine|FunctionName]
		public CrossReference getRefFunctionDefineCrossReference_0_1_0() { return cRefFunctionDefineCrossReference_0_1_0; }
		
		//FunctionName
		public RuleCall getRefFunctionDefineFunctionNameParserRuleCall_0_1_0_1() { return cRefFunctionDefineFunctionNameParserRuleCall_0_1_0_1; }
		
		//Words
		public RuleCall getWordsParserRuleCall_1() { return cWordsParserRuleCall_1; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableWordParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cMaybeNewLineParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPatternsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPatternsCasePatternParserRuleCall_6_0_0 = (RuleCall)cPatternsAssignment_6_0.eContents().get(0);
		private final Assignment cPatternsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPatternsCasePatternContinueParserRuleCall_6_1_0 = (RuleCall)cPatternsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Alternatives cAlternatives_6_2_0 = (Alternatives)cGroup_6_2.eContents().get(0);
		private final Keyword cSemicolonSemicolonKeyword_6_2_0_0 = (Keyword)cAlternatives_6_2_0.eContents().get(0);
		private final Keyword cSemicolonAmpersandKeyword_6_2_0_1 = (Keyword)cAlternatives_6_2_0.eContents().get(1);
		private final Keyword cSemicolonSemicolonAmpersandKeyword_6_2_0_2 = (Keyword)cAlternatives_6_2_0.eContents().get(2);
		private final RuleCall cMaybeNewLineParserRuleCall_6_2_1 = (RuleCall)cGroup_6_2.eContents().get(1);
		private final Keyword cEsacKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CaseStatement:
		//	{CaseStatement}
		//	'case' variable=Word MaybeNewLine 'in' MaybeNewLine (patterns+=CasePattern
		//	patterns+=CasePatternContinue* ((';;' | ';&' | ';;&') MaybeNewLine)?)?
		//	'esac';
		@Override public ParserRule getRule() { return rule; }
		
		//{CaseStatement} 'case' variable=Word MaybeNewLine 'in' MaybeNewLine (patterns+=CasePattern
		//patterns+=CasePatternContinue* ((';;' | ';&' | ';;&') MaybeNewLine)?)? 'esac'
		public Group getGroup() { return cGroup; }
		
		//{CaseStatement}
		public Action getCaseStatementAction_0() { return cCaseStatementAction_0; }
		
		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//variable=Word
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Word
		public RuleCall getVariableWordParserRuleCall_2_0() { return cVariableWordParserRuleCall_2_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_3() { return cMaybeNewLineParserRuleCall_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_5() { return cMaybeNewLineParserRuleCall_5; }
		
		//(patterns+=CasePattern patterns+=CasePatternContinue* ((';;' | ';&' | ';;&') MaybeNewLine)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//patterns+=CasePattern
		public Assignment getPatternsAssignment_6_0() { return cPatternsAssignment_6_0; }
		
		//CasePattern
		public RuleCall getPatternsCasePatternParserRuleCall_6_0_0() { return cPatternsCasePatternParserRuleCall_6_0_0; }
		
		//patterns+=CasePatternContinue*
		public Assignment getPatternsAssignment_6_1() { return cPatternsAssignment_6_1; }
		
		//CasePatternContinue
		public RuleCall getPatternsCasePatternContinueParserRuleCall_6_1_0() { return cPatternsCasePatternContinueParserRuleCall_6_1_0; }
		
		//((';;' | ';&' | ';;&') MaybeNewLine)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//(';;' | ';&' | ';;&')
		public Alternatives getAlternatives_6_2_0() { return cAlternatives_6_2_0; }
		
		//';;'
		public Keyword getSemicolonSemicolonKeyword_6_2_0_0() { return cSemicolonSemicolonKeyword_6_2_0_0; }
		
		//';&'
		public Keyword getSemicolonAmpersandKeyword_6_2_0_1() { return cSemicolonAmpersandKeyword_6_2_0_1; }
		
		//';;&'
		public Keyword getSemicolonSemicolonAmpersandKeyword_6_2_0_2() { return cSemicolonSemicolonAmpersandKeyword_6_2_0_2; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_6_2_1() { return cMaybeNewLineParserRuleCall_6_2_1; }
		
		//'esac'
		public Keyword getEsacKeyword_7() { return cEsacKeyword_7; }
	}
	public class CasePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CasePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionPatternParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyCompoundListParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//CasePattern:
		//	'('? condition=Pattern ')' body=CompoundList;
		@Override public ParserRule getRule() { return rule; }
		
		//'('? condition=Pattern ')' body=CompoundList
		public Group getGroup() { return cGroup; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//condition=Pattern
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Pattern
		public RuleCall getConditionPatternParserRuleCall_1_0() { return cConditionPatternParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_3_0() { return cBodyCompoundListParserRuleCall_3_0; }
	}
	public class CasePatternContinueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CasePatternContinue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFollowAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cFollowAlternatives_0_0_0 = (Alternatives)cFollowAssignment_0_0.eContents().get(0);
		private final Keyword cFollowSemicolonSemicolonKeyword_0_0_0_0 = (Keyword)cFollowAlternatives_0_0_0.eContents().get(0);
		private final Keyword cFollowSemicolonAmpersandKeyword_0_0_0_1 = (Keyword)cFollowAlternatives_0_0_0.eContents().get(1);
		private final Keyword cFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2 = (Keyword)cFollowAlternatives_0_0_0.eContents().get(2);
		private final RuleCall cMaybeNewLineParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionPatternParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyCompoundListParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//CasePatternContinue CasePattern:
		//	(follow=(';;' | ';&' | ';;&') MaybeNewLine) '('? condition=Pattern ')' body=CompoundList
		@Override public ParserRule getRule() { return rule; }
		
		//(follow=(';;' | ';&' | ';;&') MaybeNewLine) '('? condition=Pattern ')' body=CompoundList
		public Group getGroup() { return cGroup; }
		
		//(follow=(';;' | ';&' | ';;&') MaybeNewLine)
		public Group getGroup_0() { return cGroup_0; }
		
		//follow=(';;' | ';&' | ';;&')
		public Assignment getFollowAssignment_0_0() { return cFollowAssignment_0_0; }
		
		//(';;' | ';&' | ';;&')
		public Alternatives getFollowAlternatives_0_0_0() { return cFollowAlternatives_0_0_0; }
		
		//';;'
		public Keyword getFollowSemicolonSemicolonKeyword_0_0_0_0() { return cFollowSemicolonSemicolonKeyword_0_0_0_0; }
		
		//';&'
		public Keyword getFollowSemicolonAmpersandKeyword_0_0_0_1() { return cFollowSemicolonAmpersandKeyword_0_0_0_1; }
		
		//';;&'
		public Keyword getFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2() { return cFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_0_1() { return cMaybeNewLineParserRuleCall_0_1; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Pattern
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Pattern
		public RuleCall getConditionPatternParserRuleCall_2_0() { return cConditionPatternParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_4_0() { return cBodyCompoundListParserRuleCall_4_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPartsWordParserRuleCall_0_0 = (RuleCall)cPartsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartsWordParserRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		
		//Pattern:
		//	parts+=Word ('|' parts+=Word)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parts+=Word ('|' parts+=Word)*
		public Group getGroup() { return cGroup; }
		
		//parts+=Word
		public Assignment getPartsAssignment_0() { return cPartsAssignment_0; }
		
		//Word
		public RuleCall getPartsWordParserRuleCall_0_0() { return cPartsWordParserRuleCall_0_0; }
		
		//('|' parts+=Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//parts+=Word
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }
		
		//Word
		public RuleCall getPartsWordParserRuleCall_1_1_0() { return cPartsWordParserRuleCall_1_1_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionCompoundListParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenCompoundListParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Assignment cElseIfBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseIfBlockElseIfBlockParserRuleCall_5_0 = (RuleCall)cElseIfBlockAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseCompoundListParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		private final Keyword cFiKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfStatement:
		//	{IfStatement}
		//	'if' condition=CompoundList
		//	'then' then=CompoundList
		//	elseIfBlock+=ElseIfBlock* ('else' else=CompoundList)?
		//	'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} 'if' condition=CompoundList 'then' then=CompoundList elseIfBlock+=ElseIfBlock* ('else' else=CompoundList)?
		//'fi'
		public Group getGroup() { return cGroup; }
		
		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=CompoundList
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//CompoundList
		public RuleCall getConditionCompoundListParserRuleCall_2_0() { return cConditionCompoundListParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=CompoundList
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//CompoundList
		public RuleCall getThenCompoundListParserRuleCall_4_0() { return cThenCompoundListParserRuleCall_4_0; }
		
		//elseIfBlock+=ElseIfBlock*
		public Assignment getElseIfBlockAssignment_5() { return cElseIfBlockAssignment_5; }
		
		//ElseIfBlock
		public RuleCall getElseIfBlockElseIfBlockParserRuleCall_5_0() { return cElseIfBlockElseIfBlockParserRuleCall_5_0; }
		
		//('else' else=CompoundList)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//else=CompoundList
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }
		
		//CompoundList
		public RuleCall getElseCompoundListParserRuleCall_6_1_0() { return cElseCompoundListParserRuleCall_6_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_7() { return cFiKeyword_7; }
	}
	public class ElseIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ElseIfBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseIfBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionCompoundListParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenCompoundListParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		
		//ElseIfBlock:
		//	{ElseIfBlock} 'elif' condition=CompoundList 'then' then=CompoundList;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseIfBlock} 'elif' condition=CompoundList 'then' then=CompoundList
		public Group getGroup() { return cGroup; }
		
		//{ElseIfBlock}
		public Action getElseIfBlockAction_0() { return cElseIfBlockAction_0; }
		
		//'elif'
		public Keyword getElifKeyword_1() { return cElifKeyword_1; }
		
		//condition=CompoundList
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//CompoundList
		public RuleCall getConditionCompoundListParserRuleCall_2_0() { return cConditionCompoundListParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=CompoundList
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//CompoundList
		public RuleCall getThenCompoundListParserRuleCall_4_0() { return cThenCompoundListParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArithmeticForStatementAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cInitAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cInitEvaluationParserRuleCall_1_0_2_0 = (RuleCall)cInitAssignment_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cConditionAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cConditionEvaluationParserRuleCall_1_0_4_0 = (RuleCall)cConditionAssignment_1_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cStepAssignment_1_0_6 = (Assignment)cGroup_1_0.eContents().get(6);
		private final RuleCall cStepEvaluationParserRuleCall_1_0_6_0 = (RuleCall)cStepAssignment_1_0_6.eContents().get(0);
		private final Keyword cRightParenthesisRightParenthesisKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Group cGroup_1_0_8 = (Group)cGroup_1_0.eContents().get(8);
		private final RuleCall cListTerminatorParserRuleCall_1_0_8_0 = (RuleCall)cGroup_1_0_8.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_1_0_8_1 = (RuleCall)cGroup_1_0_8.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cForStatementAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariableNAMETerminalRuleCall_1_1_1_0 = (RuleCall)cVariableAssignment_1_1_1.eContents().get(0);
		private final Keyword cInKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cWordsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cWordsWordParserRuleCall_1_1_3_0 = (RuleCall)cWordsAssignment_1_1_3.eContents().get(0);
		private final RuleCall cListTerminatorParserRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final RuleCall cMaybeNewLineParserRuleCall_1_1_5 = (RuleCall)cGroup_1_1.eContents().get(5);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyCompoundListParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cDoneKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForStatement:
		//	'for' ({ArithmeticForStatement}
		//	'((' init=Evaluation? ';' condition=Evaluation? ';' step=Evaluation? '))' (ListTerminator MaybeNewLine)?
		//	| {ForStatement} variable=NAME 'in' words+=Word+ ListTerminator MaybeNewLine)
		//	'do'
		//	body=CompoundList
		//	'done';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' ({ArithmeticForStatement} '((' init=Evaluation? ';' condition=Evaluation? ';' step=Evaluation? '))'
		//(ListTerminator MaybeNewLine)? | {ForStatement} variable=NAME 'in' words+=Word+ ListTerminator MaybeNewLine) 'do'
		//body=CompoundList 'done'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//({ArithmeticForStatement} '((' init=Evaluation? ';' condition=Evaluation? ';' step=Evaluation? '))' (ListTerminator
		//MaybeNewLine)? | {ForStatement} variable=NAME 'in' words+=Word+ ListTerminator MaybeNewLine)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ArithmeticForStatement} '((' init=Evaluation? ';' condition=Evaluation? ';' step=Evaluation? '))' (ListTerminator
		//MaybeNewLine)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithmeticForStatement}
		public Action getArithmeticForStatementAction_1_0_0() { return cArithmeticForStatementAction_1_0_0; }
		
		//'(('
		public Keyword getLeftParenthesisLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisLeftParenthesisKeyword_1_0_1; }
		
		//init=Evaluation?
		public Assignment getInitAssignment_1_0_2() { return cInitAssignment_1_0_2; }
		
		//Evaluation
		public RuleCall getInitEvaluationParserRuleCall_1_0_2_0() { return cInitEvaluationParserRuleCall_1_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }
		
		//condition=Evaluation?
		public Assignment getConditionAssignment_1_0_4() { return cConditionAssignment_1_0_4; }
		
		//Evaluation
		public RuleCall getConditionEvaluationParserRuleCall_1_0_4_0() { return cConditionEvaluationParserRuleCall_1_0_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_5() { return cSemicolonKeyword_1_0_5; }
		
		//step=Evaluation?
		public Assignment getStepAssignment_1_0_6() { return cStepAssignment_1_0_6; }
		
		//Evaluation
		public RuleCall getStepEvaluationParserRuleCall_1_0_6_0() { return cStepEvaluationParserRuleCall_1_0_6_0; }
		
		//'))'
		public Keyword getRightParenthesisRightParenthesisKeyword_1_0_7() { return cRightParenthesisRightParenthesisKeyword_1_0_7; }
		
		//(ListTerminator MaybeNewLine)?
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }
		
		//ListTerminator
		public RuleCall getListTerminatorParserRuleCall_1_0_8_0() { return cListTerminatorParserRuleCall_1_0_8_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_0_8_1() { return cMaybeNewLineParserRuleCall_1_0_8_1; }
		
		//{ForStatement} variable=NAME 'in' words+=Word+ ListTerminator MaybeNewLine
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ForStatement}
		public Action getForStatementAction_1_1_0() { return cForStatementAction_1_1_0; }
		
		//variable=NAME
		public Assignment getVariableAssignment_1_1_1() { return cVariableAssignment_1_1_1; }
		
		//NAME
		public RuleCall getVariableNAMETerminalRuleCall_1_1_1_0() { return cVariableNAMETerminalRuleCall_1_1_1_0; }
		
		//'in'
		public Keyword getInKeyword_1_1_2() { return cInKeyword_1_1_2; }
		
		//words+=Word+
		public Assignment getWordsAssignment_1_1_3() { return cWordsAssignment_1_1_3; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_1_1_3_0() { return cWordsWordParserRuleCall_1_1_3_0; }
		
		//ListTerminator
		public RuleCall getListTerminatorParserRuleCall_1_1_4() { return cListTerminatorParserRuleCall_1_1_4; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_1_1_5() { return cMaybeNewLineParserRuleCall_1_1_5; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_3_0() { return cBodyCompoundListParserRuleCall_3_0; }
		
		//'done'
		public Keyword getDoneKeyword_4() { return cDoneKeyword_4; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCCompoundListParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDCompoundListParserRuleCall_3_0 = (RuleCall)cDAssignment_3.eContents().get(0);
		private final Keyword cDoneKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileStatement:
		//	'while' c=CompoundList 'do' d=CompoundList 'done';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' c=CompoundList 'do' d=CompoundList 'done'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//c=CompoundList
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//CompoundList
		public RuleCall getCCompoundListParserRuleCall_1_0() { return cCCompoundListParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//d=CompoundList
		public Assignment getDAssignment_3() { return cDAssignment_3; }
		
		//CompoundList
		public RuleCall getDCompoundListParserRuleCall_3_0() { return cDCompoundListParserRuleCall_3_0; }
		
		//'done'
		public Keyword getDoneKeyword_4() { return cDoneKeyword_4; }
	}
	public class RedirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Redirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRedirectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cI_NUMBERTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignAmpersandKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignAmpersandKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Keyword cOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(5);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(6);
		private final Keyword cOpAmpersandGreaterThanSignKeyword_1_0_1_0_7 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(7);
		private final Keyword cOpLessThanSignVerticalLineKeyword_1_0_1_0_8 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(8);
		private final Keyword cOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(9);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cTargetAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cTargetWordParserRuleCall_1_0_2_0_0 = (RuleCall)cTargetAssignment_1_0_2_0.eContents().get(0);
		private final RuleCall cI_NUMBERTerminalRuleCall_1_0_2_1 = (RuleCall)cAlternatives_1_0_2.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAssignment_1_1_0.eContents().get(0);
		private final RuleCall cHERE_DOC_WORDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Redirection:
		//	{Redirection} (I_NUMBER? op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|') (target=Word |
		//	I_NUMBER) | op='<<' HERE_DOC_WORD);
		@Override public ParserRule getRule() { return rule; }
		
		//{Redirection} (I_NUMBER? op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|') (target=Word |
		//I_NUMBER) | op='<<' HERE_DOC_WORD)
		public Group getGroup() { return cGroup; }
		
		//{Redirection}
		public Action getRedirectionAction_0() { return cRedirectionAction_0; }
		
		//(I_NUMBER? op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|') (target=Word | I_NUMBER) | op='<<'
		//HERE_DOC_WORD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//I_NUMBER? op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|') (target=Word | I_NUMBER)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//I_NUMBER?
		public RuleCall getI_NUMBERTerminalRuleCall_1_0_0() { return cI_NUMBERTerminalRuleCall_1_0_0; }
		
		//op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'>&'
		public Keyword getOpGreaterThanSignAmpersandKeyword_1_0_1_0_0() { return cOpGreaterThanSignAmpersandKeyword_1_0_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1_0_1; }
		
		//'>>'
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_1_0_3() { return cOpLessThanSignKeyword_1_0_1_0_3; }
		
		//'<&'
		public Keyword getOpLessThanSignAmpersandKeyword_1_0_1_0_4() { return cOpLessThanSignAmpersandKeyword_1_0_1_0_4; }
		
		//'&>>'
		public Keyword getOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5() { return cOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5; }
		
		//'<>'
		public Keyword getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6() { return cOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6; }
		
		//'&>'
		public Keyword getOpAmpersandGreaterThanSignKeyword_1_0_1_0_7() { return cOpAmpersandGreaterThanSignKeyword_1_0_1_0_7; }
		
		//'<|'
		public Keyword getOpLessThanSignVerticalLineKeyword_1_0_1_0_8() { return cOpLessThanSignVerticalLineKeyword_1_0_1_0_8; }
		
		//'>|'
		public Keyword getOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9() { return cOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9; }
		
		//(target=Word | I_NUMBER)
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }
		
		//target=Word
		public Assignment getTargetAssignment_1_0_2_0() { return cTargetAssignment_1_0_2_0; }
		
		//Word
		public RuleCall getTargetWordParserRuleCall_1_0_2_0_0() { return cTargetWordParserRuleCall_1_0_2_0_0; }
		
		//I_NUMBER
		public RuleCall getI_NUMBERTerminalRuleCall_1_0_2_1() { return cI_NUMBERTerminalRuleCall_1_0_2_1; }
		
		//op='<<' HERE_DOC_WORD
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//op='<<'
		public Assignment getOpAssignment_1_1_0() { return cOpAssignment_1_1_0; }
		
		//'<<'
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }
		
		//HERE_DOC_WORD
		public RuleCall getHERE_DOC_WORDTerminalRuleCall_1_1_1() { return cHERE_DOC_WORDTerminalRuleCall_1_1_1; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArrayStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArrayEndParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////###########################################################################
		//Array:
		//	ArrayStart ArrayEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayStart ArrayEnd
		public Group getGroup() { return cGroup; }
		
		//ArrayStart
		public RuleCall getArrayStartParserRuleCall_0() { return cArrayStartParserRuleCall_0; }
		
		//ArrayEnd
		public RuleCall getArrayEndParserRuleCall_1() { return cArrayEndParserRuleCall_1; }
	}
	public class ArrayStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArrayStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMaybeNewLineParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cWordsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWordsWordParserRuleCall_2_1_0 = (RuleCall)cWordsAssignment_2_1.eContents().get(0);
		private final RuleCall cMaybeNewLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ArrayStart Array hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	{Array} '(' (MaybeNewLine words+=Word)* MaybeNewLine
		@Override public ParserRule getRule() { return rule; }
		
		//{Array} '(' (MaybeNewLine words+=Word)* MaybeNewLine
		public Group getGroup() { return cGroup; }
		
		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(MaybeNewLine words+=Word)*
		public Group getGroup_2() { return cGroup_2; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_2_0() { return cMaybeNewLineParserRuleCall_2_0; }
		
		//words+=Word
		public Assignment getWordsAssignment_2_1() { return cWordsAssignment_2_1; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_2_1_0() { return cWordsWordParserRuleCall_2_1_0; }
		
		//MaybeNewLine
		public RuleCall getMaybeNewLineParserRuleCall_3() { return cMaybeNewLineParserRuleCall_3; }
	}
	public class ArrayEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArrayEnd");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ArrayEnd hidden(C_LINE):
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//')'
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Word");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementsLiteralWordParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Word:
		//	Words | elements+=LiteralWord;
		@Override public ParserRule getRule() { return rule; }
		
		//Words | elements+=LiteralWord
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Words
		public RuleCall getWordsParserRuleCall_0() { return cWordsParserRuleCall_0; }
		
		//elements+=LiteralWord
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//LiteralWord
		public RuleCall getElementsLiteralWordParserRuleCall_1_0() { return cElementsLiteralWordParserRuleCall_1_0; }
	}
	public class LiteralWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LiteralWord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesS_WORD_PARTTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		
		//LiteralWord Literal:
		//	{Literal} values+=S_WORD_PART
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} values+=S_WORD_PART
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//values+=S_WORD_PART
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//S_WORD_PART
		public RuleCall getValuesS_WORD_PARTTerminalRuleCall_1_0() { return cValuesS_WORD_PARTTerminalRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexEvaluationParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAssignableParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Assignment hidden(C_LINE):
		//	name=NAME index=IndexEvaluation? '=' -> value=Assignable?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME index=IndexEvaluation? '=' -> value=Assignable?
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//index=IndexEvaluation?
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//IndexEvaluation
		public RuleCall getIndexIndexEvaluationParserRuleCall_1_0() { return cIndexIndexEvaluationParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//-> value=Assignable?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Assignable
		public RuleCall getValueAssignableParserRuleCall_3_0() { return cValueAssignableParserRuleCall_3_0; }
	}
	public class LAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexEvaluationParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueAssignableParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//LAssignment hidden(C_LINE):
		//	name=NAME index=IndexEvaluation? ('=' -> value=Assignable)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME index=IndexEvaluation? ('=' -> value=Assignable)?
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//index=IndexEvaluation?
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//IndexEvaluation
		public RuleCall getIndexIndexEvaluationParserRuleCall_1_0() { return cIndexIndexEvaluationParserRuleCall_1_0; }
		
		//('=' -> value=Assignable)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//-> value=Assignable
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Assignable
		public RuleCall getValueAssignableParserRuleCall_2_1_0() { return cValueAssignableParserRuleCall_2_1_0; }
	}
	public class AssignableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Assignable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Assignable:
		//	Word | Array;
		@Override public ParserRule getRule() { return rule; }
		
		//Word | Array
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Word
		public RuleCall getWordParserRuleCall_0() { return cWordParserRuleCall_0; }
		
		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
	}
	public class WordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Words");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsWordElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Words Word hidden(C_LINE):
		//	-> elements+=WordElement+
		@Override public ParserRule getRule() { return rule; }
		
		//-> elements+=WordElement+
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//WordElement
		public RuleCall getElementsWordElementParserRuleCall_0() { return cElementsWordElementParserRuleCall_0; }
	}
	public class DQStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.DQString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDQStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStringElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DQString:
		//	{DQString} '"' elements+=StringElement* '"';
		@Override public ParserRule getRule() { return rule; }
		
		//{DQString} '"' elements+=StringElement* '"'
		public Group getGroup() { return cGroup; }
		
		//{DQString}
		public Action getDQStringAction_0() { return cDQStringAction_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }
		
		//elements+=StringElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//StringElement
		public RuleCall getElementsStringElementParserRuleCall_2_0() { return cElementsStringElementParserRuleCall_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
	}
	public class ExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Expansion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterExpansionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandSubstitutionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticExpansionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcessSubstitutionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expansion:
		//	ParameterExpansion | CommandSubstitution | ArithmeticExpansion | ProcessSubstitution;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterExpansion | CommandSubstitution | ArithmeticExpansion | ProcessSubstitution
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterExpansion
		public RuleCall getParameterExpansionParserRuleCall_0() { return cParameterExpansionParserRuleCall_0; }
		
		//CommandSubstitution
		public RuleCall getCommandSubstitutionParserRuleCall_1() { return cCommandSubstitutionParserRuleCall_1; }
		
		//ArithmeticExpansion
		public RuleCall getArithmeticExpansionParserRuleCall_2() { return cArithmeticExpansionParserRuleCall_2; }
		
		//ProcessSubstitution
		public RuleCall getProcessSubstitutionParserRuleCall_3() { return cProcessSubstitutionParserRuleCall_3; }
	}
	public class WordElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.WordElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralWordPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDQStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpansionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WordElement:
		//	=> LiteralWordPart | DQString | Expansion;
		@Override public ParserRule getRule() { return rule; }
		
		//=> LiteralWordPart | DQString | Expansion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> LiteralWordPart
		public RuleCall getLiteralWordPartParserRuleCall_0() { return cLiteralWordPartParserRuleCall_0; }
		
		//DQString
		public RuleCall getDQStringParserRuleCall_1() { return cDQStringParserRuleCall_1; }
		
		//Expansion
		public RuleCall getExpansionParserRuleCall_2() { return cExpansionParserRuleCall_2; }
	}
	public class StringElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.StringElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralStringPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpansionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringElement WordElement:
		//	LiteralStringPart | Expansion
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralStringPart | Expansion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralStringPart
		public RuleCall getLiteralStringPartParserRuleCall_0() { return cLiteralStringPartParserRuleCall_0; }
		
		//Expansion
		public RuleCall getExpansionParserRuleCall_1() { return cExpansionParserRuleCall_1; }
	}
	public class LiteralStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LiteralStringPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesWORD_PARTTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		
		//LiteralStringPart Literal:
		//	{Literal} => values+=WORD_PART+
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} => values+=WORD_PART+
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//=> values+=WORD_PART+
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//WORD_PART
		public RuleCall getValuesWORD_PARTTerminalRuleCall_1_0() { return cValuesWORD_PARTTerminalRuleCall_1_0; }
	}
	public class LiteralWordPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LiteralWordPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cValuesWORD_PARTTerminalRuleCall_1_0_0_0 = (RuleCall)cValuesAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cApostropheKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cValuesWORD_PARTTerminalRuleCall_1_0_1_1_0 = (RuleCall)cValuesAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cApostropheKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cValuesWORD_PARTTerminalRuleCall_1_0_2_1_0 = (RuleCall)cValuesAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		
		//LiteralWordPart Literal:
		//	{Literal} => (values+=WORD_PART | '\'' values+=WORD_PART? '\'' | '"' values+=WORD_PART* '"')+
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} => (values+=WORD_PART | '\'' values+=WORD_PART? '\'' | '"' values+=WORD_PART* '"')+
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//=> (values+=WORD_PART | '\'' values+=WORD_PART? '\'' | '"' values+=WORD_PART* '"')+
		public Group getGroup_1() { return cGroup_1; }
		
		//(values+=WORD_PART | '\'' values+=WORD_PART? '\'' | '"' values+=WORD_PART* '"')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//values+=WORD_PART
		public Assignment getValuesAssignment_1_0_0() { return cValuesAssignment_1_0_0; }
		
		//WORD_PART
		public RuleCall getValuesWORD_PARTTerminalRuleCall_1_0_0_0() { return cValuesWORD_PARTTerminalRuleCall_1_0_0_0; }
		
		//'\'' values+=WORD_PART? '\''
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'\''
		public Keyword getApostropheKeyword_1_0_1_0() { return cApostropheKeyword_1_0_1_0; }
		
		//values+=WORD_PART?
		public Assignment getValuesAssignment_1_0_1_1() { return cValuesAssignment_1_0_1_1; }
		
		//WORD_PART
		public RuleCall getValuesWORD_PARTTerminalRuleCall_1_0_1_1_0() { return cValuesWORD_PARTTerminalRuleCall_1_0_1_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_1_0_1_2() { return cApostropheKeyword_1_0_1_2; }
		
		//'"' values+=WORD_PART* '"'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_0_2_0() { return cQuotationMarkKeyword_1_0_2_0; }
		
		//values+=WORD_PART*
		public Assignment getValuesAssignment_1_0_2_1() { return cValuesAssignment_1_0_2_1; }
		
		//WORD_PART
		public RuleCall getValuesWORD_PARTTerminalRuleCall_1_0_2_1_0() { return cValuesWORD_PARTTerminalRuleCall_1_0_2_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_0_2_2() { return cQuotationMarkKeyword_1_0_2_2; }
	}
	public class CondOrAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CondOrAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCondExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCondUnaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCondExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////###########################################################################
		//CondOrAnd CondExpression:
		//	CondExp ({CondUnaryExpression.left=current} ('||' | '&&') right=CondExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//CondExp ({CondUnaryExpression.left=current} ('||' | '&&') right=CondExp)*
		public Group getGroup() { return cGroup; }
		
		//CondExp
		public RuleCall getCondExpParserRuleCall_0() { return cCondExpParserRuleCall_0; }
		
		//({CondUnaryExpression.left=current} ('||' | '&&') right=CondExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CondUnaryExpression.left=current}
		public Action getCondUnaryExpressionLeftAction_1_0() { return cCondUnaryExpressionLeftAction_1_0; }
		
		//('||' | '&&')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1_1() { return cAmpersandAmpersandKeyword_1_1_1; }
		
		//right=CondExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CondExp
		public RuleCall getRightCondExpParserRuleCall_1_2_0() { return cRightCondExpParserRuleCall_1_2_0; }
	}
	public class CondExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CondExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCondUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpC_S_OPTerminalRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandWordParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCondConstParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cCondBinaryExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cOpC_B_OPTerminalRuleCall_1_1_1_0_0_0 = (RuleCall)cOpAssignment_1_1_1_0_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cRightWordParserRuleCall_1_1_1_0_1_0 = (RuleCall)cRightAssignment_1_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_1_1_0 = (Assignment)cGroup_1_1_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignTildeKeyword_1_1_1_1_0_0 = (Keyword)cOpAssignment_1_1_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cRightRegularExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cCondOrAndParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//CondExp CondExpression:
		//	{CondUnaryExpression} op=C_S_OP operand=Word | CondConst ({CondBinaryExpression.left=current} (op=C_B_OP
		//	right=Word | op='=~' right=RegularExpression))? | '(' CondOrAnd ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{CondUnaryExpression} op=C_S_OP operand=Word | CondConst ({CondBinaryExpression.left=current} (op=C_B_OP right=Word |
		//op='=~' right=RegularExpression))? | '(' CondOrAnd ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CondUnaryExpression} op=C_S_OP operand=Word
		public Group getGroup_0() { return cGroup_0; }
		
		//{CondUnaryExpression}
		public Action getCondUnaryExpressionAction_0_0() { return cCondUnaryExpressionAction_0_0; }
		
		//op=C_S_OP
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//C_S_OP
		public RuleCall getOpC_S_OPTerminalRuleCall_0_1_0() { return cOpC_S_OPTerminalRuleCall_0_1_0; }
		
		//operand=Word
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//Word
		public RuleCall getOperandWordParserRuleCall_0_2_0() { return cOperandWordParserRuleCall_0_2_0; }
		
		//CondConst ({CondBinaryExpression.left=current} (op=C_B_OP right=Word | op='=~' right=RegularExpression))?
		public Group getGroup_1() { return cGroup_1; }
		
		//CondConst
		public RuleCall getCondConstParserRuleCall_1_0() { return cCondConstParserRuleCall_1_0; }
		
		//({CondBinaryExpression.left=current} (op=C_B_OP right=Word | op='=~' right=RegularExpression))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{CondBinaryExpression.left=current}
		public Action getCondBinaryExpressionLeftAction_1_1_0() { return cCondBinaryExpressionLeftAction_1_1_0; }
		
		//(op=C_B_OP right=Word | op='=~' right=RegularExpression)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//op=C_B_OP right=Word
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//op=C_B_OP
		public Assignment getOpAssignment_1_1_1_0_0() { return cOpAssignment_1_1_1_0_0; }
		
		//C_B_OP
		public RuleCall getOpC_B_OPTerminalRuleCall_1_1_1_0_0_0() { return cOpC_B_OPTerminalRuleCall_1_1_1_0_0_0; }
		
		//right=Word
		public Assignment getRightAssignment_1_1_1_0_1() { return cRightAssignment_1_1_1_0_1; }
		
		//Word
		public RuleCall getRightWordParserRuleCall_1_1_1_0_1_0() { return cRightWordParserRuleCall_1_1_1_0_1_0; }
		
		//op='=~' right=RegularExpression
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//op='=~'
		public Assignment getOpAssignment_1_1_1_1_0() { return cOpAssignment_1_1_1_1_0; }
		
		//'=~'
		public Keyword getOpEqualsSignTildeKeyword_1_1_1_1_0_0() { return cOpEqualsSignTildeKeyword_1_1_1_1_0_0; }
		
		//right=RegularExpression
		public Assignment getRightAssignment_1_1_1_1_1() { return cRightAssignment_1_1_1_1_1; }
		
		//RegularExpression
		public RuleCall getRightRegularExpressionParserRuleCall_1_1_1_1_1_0() { return cRightRegularExpressionParserRuleCall_1_1_1_1_1_0; }
		
		//'(' CondOrAnd ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//CondOrAnd
		public RuleCall getCondOrAndParserRuleCall_2_1() { return cCondOrAndParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class CondConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CondConst");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueWordParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CondConst:
		//	value=Word;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Word
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Word
		public RuleCall getValueWordParserRuleCall_0() { return cValueWordParserRuleCall_0; }
	}
	public class RegularExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.RegularExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegularElementsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegularExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRegularElementsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RegularExpression hidden(C_LINE):
		//	RegularElements ({RegularExpression.left=current} op='|' right=RegularElements)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularElements ({RegularExpression.left=current} op='|' right=RegularElements)*
		public Group getGroup() { return cGroup; }
		
		//RegularElements
		public RuleCall getRegularElementsParserRuleCall_0() { return cRegularElementsParserRuleCall_0; }
		
		//({RegularExpression.left=current} op='|' right=RegularElements)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RegularExpression.left=current}
		public Action getRegularExpressionLeftAction_1_0() { return cRegularExpressionLeftAction_1_0; }
		
		//op='|'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0() { return cOpVerticalLineKeyword_1_1_0; }
		
		//right=RegularElements
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RegularElements
		public RuleCall getRightRegularElementsParserRuleCall_1_2_0() { return cRightRegularElementsParserRuleCall_1_2_0; }
	}
	public class RegularElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.RegularElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegularConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPartsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPartsWordParserRuleCall_1_0_1_0 = (RuleCall)cPartsAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPartsWordParserRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		
		//RegularElements RegularConst:
		//	{RegularConst} ('(' parts+=Word? ')' | parts+=Word)+
		@Override public ParserRule getRule() { return rule; }
		
		//{RegularConst} ('(' parts+=Word? ')' | parts+=Word)+
		public Group getGroup() { return cGroup; }
		
		//{RegularConst}
		public Action getRegularConstAction_0() { return cRegularConstAction_0; }
		
		//('(' parts+=Word? ')' | parts+=Word)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' parts+=Word? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//parts+=Word?
		public Assignment getPartsAssignment_1_0_1() { return cPartsAssignment_1_0_1; }
		
		//Word
		public RuleCall getPartsWordParserRuleCall_1_0_1_0() { return cPartsWordParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//parts+=Word
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }
		
		//Word
		public RuleCall getPartsWordParserRuleCall_1_1_0() { return cPartsWordParserRuleCall_1_1_0; }
	}
	public class ArithmeticExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArithmeticExpansion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpansionStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArithmeticExpansionEndParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////#################################################################################
		//ArithmeticExpansion:
		//	ArithmeticExpansionStart ArithmeticExpansionEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpansionStart ArithmeticExpansionEnd
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpansionStart
		public RuleCall getArithmeticExpansionStartParserRuleCall_0() { return cArithmeticExpansionStartParserRuleCall_0; }
		
		//ArithmeticExpansionEnd
		public RuleCall getArithmeticExpansionEndParserRuleCall_1() { return cArithmeticExpansionEndParserRuleCall_1; }
	}
	public class IndexEvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.IndexEvaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndexEvaluationStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndIndexEvaluationEndParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		
		//IndexEvaluation:
		//	IndexEvaluationStart end=IndexEvaluationEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexEvaluationStart end=IndexEvaluationEnd
		public Group getGroup() { return cGroup; }
		
		//IndexEvaluationStart
		public RuleCall getIndexEvaluationStartParserRuleCall_0() { return cIndexEvaluationStartParserRuleCall_0; }
		
		//end=IndexEvaluationEnd
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//IndexEvaluationEnd
		public RuleCall getEndIndexEvaluationEndParserRuleCall_1_0() { return cEndIndexEvaluationEndParserRuleCall_1_0; }
	}
	public class IndexEvaluationStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.IndexEvaluationStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEvaluationParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//IndexEvaluationStart IndexEvaluation hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	'[' expression=Evaluation
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression=Evaluation
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression=Evaluation
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Evaluation
		public RuleCall getExpressionEvaluationParserRuleCall_1_0() { return cExpressionEvaluationParserRuleCall_1_0; }
	}
	public class IndexEvaluationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.IndexEvaluationEnd");
		private final Keyword cRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//IndexEvaluationEnd hidden(C_LINE):
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//']'
		public Keyword getRightSquareBracketKeyword() { return cRightSquareBracketKeyword; }
	}
	public class ArithmeticExpansionStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArithmeticExpansionStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignLeftParenthesisLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEvaluationParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ArithmeticExpansionStart ArithmeticExpansion hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	'$((' expression=Evaluation
		@Override public ParserRule getRule() { return rule; }
		
		//'$((' expression=Evaluation
		public Group getGroup() { return cGroup; }
		
		//'$(('
		public Keyword getDollarSignLeftParenthesisLeftParenthesisKeyword_0() { return cDollarSignLeftParenthesisLeftParenthesisKeyword_0; }
		
		//expression=Evaluation
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Evaluation
		public RuleCall getExpressionEvaluationParserRuleCall_1_0() { return cExpressionEvaluationParserRuleCall_1_0; }
	}
	public class ArithmeticExpansionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ArithmeticExpansionEnd");
		private final Keyword cRightParenthesisRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ArithmeticExpansionEnd hidden(C_LINE):
		//	'))';
		@Override public ParserRule getRule() { return rule; }
		
		//'))'
		public Keyword getRightParenthesisRightParenthesisKeyword() { return cRightParenthesisRightParenthesisKeyword; }
	}
	public class ParameterExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ParameterExpansion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterExpansionStartParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cEndAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEndParameterExpansionEndParserRuleCall_0_1_0 = (RuleCall)cEndAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParameterExpansionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefAssignmentCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefAssignmentVARIABLETerminalRuleCall_1_1_0_1 = (RuleCall)cRefAssignmentCrossReference_1_1_0.eContents().get(1);
		
		//ParameterExpansion:
		//	ParameterExpansionStart end=ParameterExpansionEnd
		//	| {ParameterExpansion} ref=[Assignment|VARIABLE];
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterExpansionStart end=ParameterExpansionEnd | {ParameterExpansion} ref=[Assignment|VARIABLE]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterExpansionStart end=ParameterExpansionEnd
		public Group getGroup_0() { return cGroup_0; }
		
		//ParameterExpansionStart
		public RuleCall getParameterExpansionStartParserRuleCall_0_0() { return cParameterExpansionStartParserRuleCall_0_0; }
		
		//end=ParameterExpansionEnd
		public Assignment getEndAssignment_0_1() { return cEndAssignment_0_1; }
		
		//ParameterExpansionEnd
		public RuleCall getEndParameterExpansionEndParserRuleCall_0_1_0() { return cEndParameterExpansionEndParserRuleCall_0_1_0; }
		
		//{ParameterExpansion} ref=[Assignment|VARIABLE]
		public Group getGroup_1() { return cGroup_1; }
		
		//{ParameterExpansion}
		public Action getParameterExpansionAction_1_0() { return cParameterExpansionAction_1_0; }
		
		//ref=[Assignment|VARIABLE]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[Assignment|VARIABLE]
		public CrossReference getRefAssignmentCrossReference_1_1_0() { return cRefAssignmentCrossReference_1_1_0; }
		
		//VARIABLE
		public RuleCall getRefAssignmentVARIABLETerminalRuleCall_1_1_0_1() { return cRefAssignmentVARIABLETerminalRuleCall_1_1_0_1; }
	}
	public class ParameterExpansionStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ParameterExpansionStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterExpansionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHashAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cHashNumberSignKeyword_2_0 = (Keyword)cHashAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cRefAssignmentCrossReference_3_0_0 = (CrossReference)cRefAssignment_3_0.eContents().get(0);
		private final RuleCall cRefAssignmentNAMETerminalRuleCall_3_0_0_1 = (RuleCall)cRefAssignmentCrossReference_3_0_0.eContents().get(1);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueI_NUMBERTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final Keyword cValueQuestionMarkKeyword_3_2_0 = (Keyword)cValueAssignment_3_2.eContents().get(0);
		private final Assignment cValueAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final Keyword cValueCommercialAtKeyword_3_3_0 = (Keyword)cValueAssignment_3_3.eContents().get(0);
		private final Assignment cValueAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final Keyword cValueAsteriskKeyword_3_4_0 = (Keyword)cValueAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cCommercialAtKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Assignment cIndexAssignment_4_1_2 = (Assignment)cAlternatives_4_1.eContents().get(2);
		private final RuleCall cIndexEvaluationParserRuleCall_4_1_2_0 = (RuleCall)cIndexAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cReplacerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReplacerParameterProcessorParserRuleCall_5_0 = (RuleCall)cReplacerAssignment_5.eContents().get(0);
		
		//ParameterExpansionStart ParameterExpansion hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	{ParameterExpansion}
		//	'${'
		//	hash?='#'? (ref=[Assignment|NAME] | value=I_NUMBER | value='?' | value='@' | value='*') ('[' ('@' | '*' |
		//	index=Evaluation) ']')?
		//	replacer=ParameterProcessor?
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterExpansion} '${' hash?='#'? (ref=[Assignment|NAME] | value=I_NUMBER | value='?' | value='@' | value='*') ('['
		//('@' | '*' | index=Evaluation) ']')? replacer=ParameterProcessor?
		public Group getGroup() { return cGroup; }
		
		//{ParameterExpansion}
		public Action getParameterExpansionAction_0() { return cParameterExpansionAction_0; }
		
		//'${'
		public Keyword getDollarSignLeftCurlyBracketKeyword_1() { return cDollarSignLeftCurlyBracketKeyword_1; }
		
		//hash?='#'?
		public Assignment getHashAssignment_2() { return cHashAssignment_2; }
		
		//'#'
		public Keyword getHashNumberSignKeyword_2_0() { return cHashNumberSignKeyword_2_0; }
		
		//(ref=[Assignment|NAME] | value=I_NUMBER | value='?' | value='@' | value='*')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//ref=[Assignment|NAME]
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }
		
		//[Assignment|NAME]
		public CrossReference getRefAssignmentCrossReference_3_0_0() { return cRefAssignmentCrossReference_3_0_0; }
		
		//NAME
		public RuleCall getRefAssignmentNAMETerminalRuleCall_3_0_0_1() { return cRefAssignmentNAMETerminalRuleCall_3_0_0_1; }
		
		//value=I_NUMBER
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//I_NUMBER
		public RuleCall getValueI_NUMBERTerminalRuleCall_3_1_0() { return cValueI_NUMBERTerminalRuleCall_3_1_0; }
		
		//value='?'
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//'?'
		public Keyword getValueQuestionMarkKeyword_3_2_0() { return cValueQuestionMarkKeyword_3_2_0; }
		
		//value='@'
		public Assignment getValueAssignment_3_3() { return cValueAssignment_3_3; }
		
		//'@'
		public Keyword getValueCommercialAtKeyword_3_3_0() { return cValueCommercialAtKeyword_3_3_0; }
		
		//value='*'
		public Assignment getValueAssignment_3_4() { return cValueAssignment_3_4; }
		
		//'*'
		public Keyword getValueAsteriskKeyword_3_4_0() { return cValueAsteriskKeyword_3_4_0; }
		
		//('[' ('@' | '*' | index=Evaluation) ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//('@' | '*' | index=Evaluation)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_4_1_0() { return cCommercialAtKeyword_4_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_4_1_1() { return cAsteriskKeyword_4_1_1; }
		
		//index=Evaluation
		public Assignment getIndexAssignment_4_1_2() { return cIndexAssignment_4_1_2; }
		
		//Evaluation
		public RuleCall getIndexEvaluationParserRuleCall_4_1_2_0() { return cIndexEvaluationParserRuleCall_4_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//replacer=ParameterProcessor?
		public Assignment getReplacerAssignment_5() { return cReplacerAssignment_5; }
		
		//ParameterProcessor
		public RuleCall getReplacerParameterProcessorParserRuleCall_5_0() { return cReplacerParameterProcessorParserRuleCall_5_0; }
	}
	public class ParameterExpansionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ParameterExpansionEnd");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//ParameterExpansionEnd hidden(C_LINE):
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}
	public class ParameterProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ParameterProcessor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSingleProcessorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpFollowWordOpEnumRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cWordAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWordWordParserRuleCall_0_2_0 = (RuleCall)cWordAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReplaceProcessorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpSolidusSolidusKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOriginalAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOriginalWordParserRuleCall_1_2_0_0 = (RuleCall)cOriginalAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cSolidusKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cReplaceAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cReplaceWordParserRuleCall_1_2_1_1_0 = (RuleCall)cReplaceAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cReplaceProcessorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cOpAlternatives_2_1_0 = (Alternatives)cOpAssignment_2_1.eContents().get(0);
		private final Keyword cOpSolidusSolidusKeyword_2_1_0_0 = (Keyword)cOpAlternatives_2_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_2_1_0_1 = (Keyword)cOpAlternatives_2_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cReplaceAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cReplaceWordParserRuleCall_2_3_0 = (RuleCall)cReplaceAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSubStringProcessorAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cStartAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cStartEvaluationParserRuleCall_3_2_0_0 = (RuleCall)cStartAssignment_3_2_0.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Keyword cColonKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cLengthAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cLengthEvaluationParserRuleCall_3_2_1_1_0 = (RuleCall)cLengthAssignment_3_2_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSubStringProcessorAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cLengthAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cLengthEvaluationParserRuleCall_4_3_0 = (RuleCall)cLengthAssignment_4_3.eContents().get(0);
		
		//ParameterProcessor:
		//	{SingleProcessor} op=FollowWordOp word=Word?
		//	| {ReplaceProcessor} op=('//' | '/') (original=Word ('/' replace=Word?)?)?
		//	| {ReplaceProcessor} op=('//' | '/') '/' replace=Word?
		//	| {SubStringProcessor} ':' (start=Evaluation (':' length=Evaluation?)?)?
		//	| {SubStringProcessor} ':' ':' length=Evaluation?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleProcessor} op=FollowWordOp word=Word? | {ReplaceProcessor} op=('//' | '/') (original=Word ('/' replace=Word?)?)?
		//| {ReplaceProcessor} op=('//' | '/') '/' replace=Word? | {SubStringProcessor} ':' (start=Evaluation (':'
		//length=Evaluation?)?)? | {SubStringProcessor} ':' ':' length=Evaluation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SingleProcessor} op=FollowWordOp word=Word?
		public Group getGroup_0() { return cGroup_0; }
		
		//{SingleProcessor}
		public Action getSingleProcessorAction_0_0() { return cSingleProcessorAction_0_0; }
		
		//op=FollowWordOp
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//FollowWordOp
		public RuleCall getOpFollowWordOpEnumRuleCall_0_1_0() { return cOpFollowWordOpEnumRuleCall_0_1_0; }
		
		//word=Word?
		public Assignment getWordAssignment_0_2() { return cWordAssignment_0_2; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_0_2_0() { return cWordWordParserRuleCall_0_2_0; }
		
		//{ReplaceProcessor} op=('//' | '/') (original=Word ('/' replace=Word?)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReplaceProcessor}
		public Action getReplaceProcessorAction_1_0() { return cReplaceProcessorAction_1_0; }
		
		//op=('//' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('//' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'//'
		public Keyword getOpSolidusSolidusKeyword_1_1_0_0() { return cOpSolidusSolidusKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//(original=Word ('/' replace=Word?)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//original=Word
		public Assignment getOriginalAssignment_1_2_0() { return cOriginalAssignment_1_2_0; }
		
		//Word
		public RuleCall getOriginalWordParserRuleCall_1_2_0_0() { return cOriginalWordParserRuleCall_1_2_0_0; }
		
		//('/' replace=Word?)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_2_1_0() { return cSolidusKeyword_1_2_1_0; }
		
		//replace=Word?
		public Assignment getReplaceAssignment_1_2_1_1() { return cReplaceAssignment_1_2_1_1; }
		
		//Word
		public RuleCall getReplaceWordParserRuleCall_1_2_1_1_0() { return cReplaceWordParserRuleCall_1_2_1_1_0; }
		
		//{ReplaceProcessor} op=('//' | '/') '/' replace=Word?
		public Group getGroup_2() { return cGroup_2; }
		
		//{ReplaceProcessor}
		public Action getReplaceProcessorAction_2_0() { return cReplaceProcessorAction_2_0; }
		
		//op=('//' | '/')
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//('//' | '/')
		public Alternatives getOpAlternatives_2_1_0() { return cOpAlternatives_2_1_0; }
		
		//'//'
		public Keyword getOpSolidusSolidusKeyword_2_1_0_0() { return cOpSolidusSolidusKeyword_2_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_2_1_0_1() { return cOpSolidusKeyword_2_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2_2() { return cSolidusKeyword_2_2; }
		
		//replace=Word?
		public Assignment getReplaceAssignment_2_3() { return cReplaceAssignment_2_3; }
		
		//Word
		public RuleCall getReplaceWordParserRuleCall_2_3_0() { return cReplaceWordParserRuleCall_2_3_0; }
		
		//{SubStringProcessor} ':' (start=Evaluation (':' length=Evaluation?)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//{SubStringProcessor}
		public Action getSubStringProcessorAction_3_0() { return cSubStringProcessorAction_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//(start=Evaluation (':' length=Evaluation?)?)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//start=Evaluation
		public Assignment getStartAssignment_3_2_0() { return cStartAssignment_3_2_0; }
		
		//Evaluation
		public RuleCall getStartEvaluationParserRuleCall_3_2_0_0() { return cStartEvaluationParserRuleCall_3_2_0_0; }
		
		//(':' length=Evaluation?)?
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//':'
		public Keyword getColonKeyword_3_2_1_0() { return cColonKeyword_3_2_1_0; }
		
		//length=Evaluation?
		public Assignment getLengthAssignment_3_2_1_1() { return cLengthAssignment_3_2_1_1; }
		
		//Evaluation
		public RuleCall getLengthEvaluationParserRuleCall_3_2_1_1_0() { return cLengthEvaluationParserRuleCall_3_2_1_1_0; }
		
		//{SubStringProcessor} ':' ':' length=Evaluation?
		public Group getGroup_4() { return cGroup_4; }
		
		//{SubStringProcessor}
		public Action getSubStringProcessorAction_4_0() { return cSubStringProcessorAction_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//':'
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }
		
		//length=Evaluation?
		public Assignment getLengthAssignment_4_3() { return cLengthAssignment_4_3; }
		
		//Evaluation
		public RuleCall getLengthEvaluationParserRuleCall_4_3_0() { return cLengthEvaluationParserRuleCall_4_3_0; }
	}
	public class CommandSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CommandSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandSubstitutionStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndCommandSubstitutionStartEndParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		
		//CommandSubstitution:
		//	CommandSubstitutionStart end=CommandSubstitutionStartEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//CommandSubstitutionStart end=CommandSubstitutionStartEnd
		public Group getGroup() { return cGroup; }
		
		//CommandSubstitutionStart
		public RuleCall getCommandSubstitutionStartParserRuleCall_0() { return cCommandSubstitutionStartParserRuleCall_0; }
		
		//end=CommandSubstitutionStartEnd
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//CommandSubstitutionStartEnd
		public RuleCall getEndCommandSubstitutionStartEndParserRuleCall_1_0() { return cEndCommandSubstitutionStartEndParserRuleCall_1_0; }
	}
	public class CommandSubstitutionStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CommandSubstitutionStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCS_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsCompoundListParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		
		//CommandSubstitutionStart CommandSubstitution hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	CS_START commands=CompoundList
		@Override public ParserRule getRule() { return rule; }
		
		//CS_START commands=CompoundList
		public Group getGroup() { return cGroup; }
		
		//CS_START
		public RuleCall getCS_STARTTerminalRuleCall_0() { return cCS_STARTTerminalRuleCall_0; }
		
		//commands=CompoundList
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }
		
		//CompoundList
		public RuleCall getCommandsCompoundListParserRuleCall_1_0() { return cCommandsCompoundListParserRuleCall_1_0; }
	}
	public class CommandSubstitutionStartEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CommandSubstitutionStartEnd");
		private final RuleCall cCS_ENDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommandSubstitutionStartEnd hidden(C_LINE):
		//	CS_END;
		@Override public ParserRule getRule() { return rule; }
		
		//CS_END
		public RuleCall getCS_ENDTerminalRuleCall() { return cCS_ENDTerminalRuleCall; }
	}
	public class ProcessSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ProcessSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProcessSubstitutionStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndProcessSubstitutionEndParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		
		//ProcessSubstitution:
		//	ProcessSubstitutionStart end=ProcessSubstitutionEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessSubstitutionStart end=ProcessSubstitutionEnd
		public Group getGroup() { return cGroup; }
		
		//ProcessSubstitutionStart
		public RuleCall getProcessSubstitutionStartParserRuleCall_0() { return cProcessSubstitutionStartParserRuleCall_0; }
		
		//end=ProcessSubstitutionEnd
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//ProcessSubstitutionEnd
		public RuleCall getEndProcessSubstitutionEndParserRuleCall_1_0() { return cEndProcessSubstitutionEndParserRuleCall_1_0; }
	}
	public class ProcessSubstitutionStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ProcessSubstitutionStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpLessThanSignLeftParenthesisKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignLeftParenthesisKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCompoundListParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ProcessSubstitutionStart ProcessSubstitution hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
		//	op=('<(' | '>(') body=CompoundList
		@Override public ParserRule getRule() { return rule; }
		
		//op=('<(' | '>(') body=CompoundList
		public Group getGroup() { return cGroup; }
		
		//op=('<(' | '>(')
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//('<(' | '>(')
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }
		
		//'<('
		public Keyword getOpLessThanSignLeftParenthesisKeyword_0_0_0() { return cOpLessThanSignLeftParenthesisKeyword_0_0_0; }
		
		//'>('
		public Keyword getOpGreaterThanSignLeftParenthesisKeyword_0_0_1() { return cOpGreaterThanSignLeftParenthesisKeyword_0_0_1; }
		
		//body=CompoundList
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CompoundList
		public RuleCall getBodyCompoundListParserRuleCall_1_0() { return cBodyCompoundListParserRuleCall_1_0; }
	}
	public class ProcessSubstitutionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ProcessSubstitutionEnd");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ProcessSubstitutionEnd hidden(C_LINE):
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//')'
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCommaKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////###########################################################################
		//Evaluation Expression:
		//	Arithmetic ({BinaryExpression.left=current} op=',' right=Arithmetic)*
		@Override public ParserRule getRule() { return rule; }
		
		//Arithmetic ({BinaryExpression.left=current} op=',' right=Arithmetic)*
		public Group getGroup() { return cGroup; }
		
		//Arithmetic
		public RuleCall getArithmeticParserRuleCall_0() { return cArithmeticParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=',' right=Arithmetic)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=','
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//','
		public Keyword getOpCommaKeyword_1_1_0() { return cOpCommaKeyword_1_1_0; }
		
		//right=Arithmetic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Arithmetic
		public RuleCall getRightArithmeticParserRuleCall_1_2_0() { return cRightArithmeticParserRuleCall_1_2_0; }
	}
	public class ArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Arithmetic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBinaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftVariableIdParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cOpAlternatives_0_2_0 = (Alternatives)cOpAssignment_0_2.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_0_2_0_0 = (Keyword)cOpAlternatives_0_2_0.eContents().get(0);
		private final Keyword cOpAsteriskEqualsSignKeyword_0_2_0_1 = (Keyword)cOpAlternatives_0_2_0.eContents().get(1);
		private final Keyword cOpSolidusEqualsSignKeyword_0_2_0_2 = (Keyword)cOpAlternatives_0_2_0.eContents().get(2);
		private final Keyword cOpPercentSignEqualsSignKeyword_0_2_0_3 = (Keyword)cOpAlternatives_0_2_0.eContents().get(3);
		private final Keyword cOpPlusSignEqualsSignKeyword_0_2_0_4 = (Keyword)cOpAlternatives_0_2_0.eContents().get(4);
		private final Keyword cOpHyphenMinusEqualsSignKeyword_0_2_0_5 = (Keyword)cOpAlternatives_0_2_0.eContents().get(5);
		private final Keyword cOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6 = (Keyword)cOpAlternatives_0_2_0.eContents().get(6);
		private final Keyword cOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7 = (Keyword)cOpAlternatives_0_2_0.eContents().get(7);
		private final Keyword cOpAmpersandEqualsSignKeyword_0_2_0_8 = (Keyword)cOpAlternatives_0_2_0.eContents().get(8);
		private final Keyword cOpCircumflexAccentEqualsSignKeyword_0_2_0_9 = (Keyword)cOpAlternatives_0_2_0.eContents().get(9);
		private final Keyword cOpVerticalLineEqualsSignKeyword_0_2_0_10 = (Keyword)cOpAlternatives_0_2_0.eContents().get(10);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightArithmeticParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final RuleCall cConditionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Arithmetic Expression:
		//	{BinaryExpression} left=VariableId op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		//	right=Arithmetic | ConditionalOperator
		@Override public ParserRule getRule() { return rule; }
		
		//{BinaryExpression} left=VariableId op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		//right=Arithmetic | ConditionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BinaryExpression} left=VariableId op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		//right=Arithmetic
		public Group getGroup_0() { return cGroup_0; }
		
		//{BinaryExpression}
		public Action getBinaryExpressionAction_0_0() { return cBinaryExpressionAction_0_0; }
		
		//left=VariableId
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }
		
		//VariableId
		public RuleCall getLeftVariableIdParserRuleCall_0_1_0() { return cLeftVariableIdParserRuleCall_0_1_0; }
		
		//op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		public Assignment getOpAssignment_0_2() { return cOpAssignment_0_2; }
		
		//('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		public Alternatives getOpAlternatives_0_2_0() { return cOpAlternatives_0_2_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_0_2_0_0() { return cOpEqualsSignKeyword_0_2_0_0; }
		
		//'*='
		public Keyword getOpAsteriskEqualsSignKeyword_0_2_0_1() { return cOpAsteriskEqualsSignKeyword_0_2_0_1; }
		
		//'/='
		public Keyword getOpSolidusEqualsSignKeyword_0_2_0_2() { return cOpSolidusEqualsSignKeyword_0_2_0_2; }
		
		//'%='
		public Keyword getOpPercentSignEqualsSignKeyword_0_2_0_3() { return cOpPercentSignEqualsSignKeyword_0_2_0_3; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_0_2_0_4() { return cOpPlusSignEqualsSignKeyword_0_2_0_4; }
		
		//'-='
		public Keyword getOpHyphenMinusEqualsSignKeyword_0_2_0_5() { return cOpHyphenMinusEqualsSignKeyword_0_2_0_5; }
		
		//'<<='
		public Keyword getOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6() { return cOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6; }
		
		//'>>='
		public Keyword getOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7() { return cOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7; }
		
		//'&='
		public Keyword getOpAmpersandEqualsSignKeyword_0_2_0_8() { return cOpAmpersandEqualsSignKeyword_0_2_0_8; }
		
		//'^='
		public Keyword getOpCircumflexAccentEqualsSignKeyword_0_2_0_9() { return cOpCircumflexAccentEqualsSignKeyword_0_2_0_9; }
		
		//'|='
		public Keyword getOpVerticalLineEqualsSignKeyword_0_2_0_10() { return cOpVerticalLineEqualsSignKeyword_0_2_0_10; }
		
		//right=Arithmetic
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }
		
		//Arithmetic
		public RuleCall getRightArithmeticParserRuleCall_0_3_0() { return cRightArithmeticParserRuleCall_0_3_0; }
		
		//ConditionalOperator
		public RuleCall getConditionalOperatorParserRuleCall_1() { return cConditionalOperatorParserRuleCall_1; }
	}
	public class ConditionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ConditionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cConditionalOperatorConditionAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cFirstAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFirstConditionalOperatorParserRuleCall_1_2_0 = (RuleCall)cFirstAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightConditionalOperatorParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//ConditionalOperator Expression:
		//	LogicOr ('?' {ConditionalOperator.condition=current} first=ConditionalOperator ':' right=ConditionalOperator)?
		@Override public ParserRule getRule() { return rule; }
		
		//LogicOr ('?' {ConditionalOperator.condition=current} first=ConditionalOperator ':' right=ConditionalOperator)?
		public Group getGroup() { return cGroup; }
		
		//LogicOr
		public RuleCall getLogicOrParserRuleCall_0() { return cLogicOrParserRuleCall_0; }
		
		//('?' {ConditionalOperator.condition=current} first=ConditionalOperator ':' right=ConditionalOperator)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//{ConditionalOperator.condition=current}
		public Action getConditionalOperatorConditionAction_1_1() { return cConditionalOperatorConditionAction_1_1; }
		
		//first=ConditionalOperator
		public Assignment getFirstAssignment_1_2() { return cFirstAssignment_1_2; }
		
		//ConditionalOperator
		public RuleCall getFirstConditionalOperatorParserRuleCall_1_2_0() { return cFirstConditionalOperatorParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//right=ConditionalOperator
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//ConditionalOperator
		public RuleCall getRightConditionalOperatorParserRuleCall_1_4_0() { return cRightConditionalOperatorParserRuleCall_1_4_0; }
	}
	public class LogicOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LogicOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicOr Expression:
		//	LogicAnd ({BinaryExpression.left=current} op='||' right=LogicAnd)*
		@Override public ParserRule getRule() { return rule; }
		
		//LogicAnd ({BinaryExpression.left=current} op='||' right=LogicAnd)*
		public Group getGroup() { return cGroup; }
		
		//LogicAnd
		public RuleCall getLogicAndParserRuleCall_0() { return cLogicAndParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='||' right=LogicAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=LogicAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicAnd
		public RuleCall getRightLogicAndParserRuleCall_1_2_0() { return cRightLogicAndParserRuleCall_1_2_0; }
	}
	public class LogicAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LogicAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitwiseORParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicAnd Expression:
		//	BitwiseOR ({BinaryExpression.left=current} op='&&' right=BitwiseOR)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseOR ({BinaryExpression.left=current} op='&&' right=BitwiseOR)*
		public Group getGroup() { return cGroup; }
		
		//BitwiseOR
		public RuleCall getBitwiseORParserRuleCall_0() { return cBitwiseORParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='&&' right=BitwiseOR)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=BitwiseOR
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitwiseOR
		public RuleCall getRightBitwiseORParserRuleCall_1_2_0() { return cRightBitwiseORParserRuleCall_1_2_0; }
	}
	public class BitwiseORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.BitwiseOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseExclusiveORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitwiseExclusiveORParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitwiseOR Expression:
		//	BitwiseExclusiveOR ({BinaryExpression.left=current} op='|' right=BitwiseExclusiveOR)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseExclusiveOR ({BinaryExpression.left=current} op='|' right=BitwiseExclusiveOR)*
		public Group getGroup() { return cGroup; }
		
		//BitwiseExclusiveOR
		public RuleCall getBitwiseExclusiveORParserRuleCall_0() { return cBitwiseExclusiveORParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='|' right=BitwiseExclusiveOR)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='|'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0() { return cOpVerticalLineKeyword_1_1_0; }
		
		//right=BitwiseExclusiveOR
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitwiseExclusiveOR
		public RuleCall getRightBitwiseExclusiveORParserRuleCall_1_2_0() { return cRightBitwiseExclusiveORParserRuleCall_1_2_0; }
	}
	public class BitwiseExclusiveORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.BitwiseExclusiveOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseANDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitwiseANDParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitwiseExclusiveOR Expression:
		//	BitwiseAND ({BinaryExpression.left=current} op='^' right=BitwiseAND)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseAND ({BinaryExpression.left=current} op='^' right=BitwiseAND)*
		public Group getGroup() { return cGroup; }
		
		//BitwiseAND
		public RuleCall getBitwiseANDParserRuleCall_0() { return cBitwiseANDParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='^' right=BitwiseAND)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='^'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_1_0() { return cOpCircumflexAccentKeyword_1_1_0; }
		
		//right=BitwiseAND
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitwiseAND
		public RuleCall getRightBitwiseANDParserRuleCall_1_2_0() { return cRightBitwiseANDParserRuleCall_1_2_0; }
	}
	public class BitwiseANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.BitwiseAND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityAndInequalityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityAndInequalityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitwiseAND Expression:
		//	EqualityAndInequality ({BinaryExpression.left=current} op='&' right=EqualityAndInequality)*
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityAndInequality ({BinaryExpression.left=current} op='&' right=EqualityAndInequality)*
		public Group getGroup() { return cGroup; }
		
		//EqualityAndInequality
		public RuleCall getEqualityAndInequalityParserRuleCall_0() { return cEqualityAndInequalityParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='&' right=EqualityAndInequality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0() { return cOpAmpersandKeyword_1_1_0; }
		
		//right=EqualityAndInequality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityAndInequality
		public RuleCall getRightEqualityAndInequalityParserRuleCall_1_2_0() { return cRightEqualityAndInequalityParserRuleCall_1_2_0; }
	}
	public class EqualityAndInequalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.EqualityAndInequality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityAndInequality Expression:
		//	Comparison ({BinaryExpression.left=current} op=('==' | '!=') right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({BinaryExpression.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseShiftsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitwiseShiftsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	BitwiseShifts ({BinaryExpression.left=current} op=('<=' | '>=' | '<' | '>') right=BitwiseShifts)*
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseShifts ({BinaryExpression.left=current} op=('<=' | '>=' | '<' | '>') right=BitwiseShifts)*
		public Group getGroup() { return cGroup; }
		
		//BitwiseShifts
		public RuleCall getBitwiseShiftsParserRuleCall_0() { return cBitwiseShiftsParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=('<=' | '>=' | '<' | '>') right=BitwiseShifts)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=('<=' | '>=' | '<' | '>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<=' | '>=' | '<' | '>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_0() { return cOpLessThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_1() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_2() { return cOpLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }
		
		//right=BitwiseShifts
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitwiseShifts
		public RuleCall getRightBitwiseShiftsParserRuleCall_1_2_0() { return cRightBitwiseShiftsParserRuleCall_1_2_0; }
	}
	public class BitwiseShiftsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.BitwiseShifts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionSubtractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitwiseShifts Expression:
		//	AdditionSubtraction ({BinaryExpression.left=current} op=('<<' | '>>') right=AdditionSubtraction)*
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionSubtraction ({BinaryExpression.left=current} op=('<<' | '>>') right=AdditionSubtraction)*
		public Group getGroup() { return cGroup; }
		
		//AdditionSubtraction
		public RuleCall getAdditionSubtractionParserRuleCall_0() { return cAdditionSubtractionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=('<<' | '>>') right=AdditionSubtraction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=('<<' | '>>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<<' | '>>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<<'
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }
		
		//'>>'
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//right=AdditionSubtraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditionSubtraction
		public RuleCall getRightAdditionSubtractionParserRuleCall_1_2_0() { return cRightAdditionSubtractionParserRuleCall_1_2_0; }
	}
	public class AdditionSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.AdditionSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationDivisionRemainderParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationDivisionRemainderParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditionSubtraction Expression:
		//	MultiplicationDivisionRemainder ({BinaryExpression.left=current} op=('+' | '-')
		//	right=MultiplicationDivisionRemainder)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationDivisionRemainder ({BinaryExpression.left=current} op=('+' | '-') right=MultiplicationDivisionRemainder)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationDivisionRemainder
		public RuleCall getMultiplicationDivisionRemainderParserRuleCall_0() { return cMultiplicationDivisionRemainderParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=('+' | '-') right=MultiplicationDivisionRemainder)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultiplicationDivisionRemainder
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicationDivisionRemainder
		public RuleCall getRightMultiplicationDivisionRemainderParserRuleCall_1_2_0() { return cRightMultiplicationDivisionRemainderParserRuleCall_1_2_0; }
	}
	public class MultiplicationDivisionRemainderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.MultiplicationDivisionRemainder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentiationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationDivisionRemainder Expression:
		//	Exponentiation ({BinaryExpression.left=current} op=('*' | '/' | '%') right=Exponentiation)*
		@Override public ParserRule getRule() { return rule; }
		
		//Exponentiation ({BinaryExpression.left=current} op=('*' | '/' | '%') right=Exponentiation)*
		public Group getGroup() { return cGroup; }
		
		//Exponentiation
		public RuleCall getExponentiationParserRuleCall_0() { return cExponentiationParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op=('*' | '/' | '%') right=Exponentiation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }
		
		//right=Exponentiation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Exponentiation
		public RuleCall getRightExponentiationParserRuleCall_1_2_0() { return cRightExponentiationParserRuleCall_1_2_0; }
	}
	public class ExponentiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.Exponentiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndBitwiseNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentiationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Exponentiation Expression:
		//	LogicalAndBitwiseNegation ({BinaryExpression.left=current} op='**' right=Exponentiation)?
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndBitwiseNegation ({BinaryExpression.left=current} op='**' right=Exponentiation)?
		public Group getGroup() { return cGroup; }
		
		//LogicalAndBitwiseNegation
		public RuleCall getLogicalAndBitwiseNegationParserRuleCall_0() { return cLogicalAndBitwiseNegationParserRuleCall_0; }
		
		//({BinaryExpression.left=current} op='**' right=Exponentiation)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//op='**'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'**'
		public Keyword getOpAsteriskAsteriskKeyword_1_1_0() { return cOpAsteriskAsteriskKeyword_1_1_0; }
		
		//right=Exponentiation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Exponentiation
		public RuleCall getRightExponentiationParserRuleCall_1_2_0() { return cRightExponentiationParserRuleCall_1_2_0; }
	}
	public class LogicalAndBitwiseNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.LogicalAndBitwiseNegation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrefixExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpTildeKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cUnaryMinusAndPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LogicalAndBitwiseNegation Expression:
		//	{PrefixExpression} op=('!' | '~') operand=LogicalAndBitwiseNegation | UnaryMinusAndPlus
		@Override public ParserRule getRule() { return rule; }
		
		//{PrefixExpression} op=('!' | '~') operand=LogicalAndBitwiseNegation | UnaryMinusAndPlus
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrefixExpression} op=('!' | '~') operand=LogicalAndBitwiseNegation
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrefixExpression}
		public Action getPrefixExpressionAction_0_0() { return cPrefixExpressionAction_0_0; }
		
		//op=('!' | '~')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//('!' | '~')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_0_1_0_0() { return cOpExclamationMarkKeyword_0_1_0_0; }
		
		//'~'
		public Keyword getOpTildeKeyword_0_1_0_1() { return cOpTildeKeyword_0_1_0_1; }
		
		//operand=LogicalAndBitwiseNegation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//LogicalAndBitwiseNegation
		public RuleCall getOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0() { return cOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0; }
		
		//UnaryMinusAndPlus
		public RuleCall getUnaryMinusAndPlusParserRuleCall_1() { return cUnaryMinusAndPlusParserRuleCall_1; }
	}
	public class UnaryMinusAndPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.UnaryMinusAndPlus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrefixExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryMinusAndPlusParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryMinusAndPlus Expression:
		//	{PrefixExpression} op=('+' | '-') operand=UnaryMinusAndPlus | PrimaryItem
		@Override public ParserRule getRule() { return rule; }
		
		//{PrefixExpression} op=('+' | '-') operand=UnaryMinusAndPlus | PrimaryItem
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrefixExpression} op=('+' | '-') operand=UnaryMinusAndPlus
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrefixExpression}
		public Action getPrefixExpressionAction_0_0() { return cPrefixExpressionAction_0_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_0_1_0_0() { return cOpPlusSignKeyword_0_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1_0_1() { return cOpHyphenMinusKeyword_0_1_0_1; }
		
		//operand=UnaryMinusAndPlus
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//UnaryMinusAndPlus
		public RuleCall getOperandUnaryMinusAndPlusParserRuleCall_0_2_0() { return cOperandUnaryMinusAndPlusParserRuleCall_0_2_0; }
		
		//PrimaryItem
		public RuleCall getPrimaryItemParserRuleCall_1() { return cPrimaryItemParserRuleCall_1; }
	}
	public class PreDecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.PreDecrement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrefixExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpPlusSignPlusSignKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandPostDecrementParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPostDecrementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PreDecrement Expression:
		//	{PrefixExpression} op=('++' | '--') operand=PostDecrement | PostDecrement
		@Override public ParserRule getRule() { return rule; }
		
		//{PrefixExpression} op=('++' | '--') operand=PostDecrement | PostDecrement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrefixExpression} op=('++' | '--') operand=PostDecrement
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrefixExpression}
		public Action getPrefixExpressionAction_0_0() { return cPrefixExpressionAction_0_0; }
		
		//op=('++' | '--')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//('++' | '--')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_0_1_0_0() { return cOpPlusSignPlusSignKeyword_0_1_0_0; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_0_1_0_1() { return cOpHyphenMinusHyphenMinusKeyword_0_1_0_1; }
		
		//operand=PostDecrement
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//PostDecrement
		public RuleCall getOperandPostDecrementParserRuleCall_0_2_0() { return cOperandPostDecrementParserRuleCall_0_2_0; }
		
		//PostDecrement
		public RuleCall getPostDecrementParserRuleCall_1() { return cPostDecrementParserRuleCall_1; }
	}
	public class PostDecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.PostDecrement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableIdParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSuffixExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		
		//PostDecrement Expression:
		//	VariableId ({SuffixExpression.operand=current} op=('++' | '--'))?
		@Override public ParserRule getRule() { return rule; }
		
		//VariableId ({SuffixExpression.operand=current} op=('++' | '--'))?
		public Group getGroup() { return cGroup; }
		
		//VariableId
		public RuleCall getVariableIdParserRuleCall_0() { return cVariableIdParserRuleCall_0; }
		
		//({SuffixExpression.operand=current} op=('++' | '--'))?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SuffixExpression.operand=current}
		public Action getSuffixExpressionOperandAction_1_0() { return cSuffixExpressionOperandAction_1_0; }
		
		//op=('++' | '--')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('++' | '--')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_1_1_0_0() { return cOpPlusSignPlusSignKeyword_1_1_0_0; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusHyphenMinusKeyword_1_1_0_1; }
	}
	public class PrimaryItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.PrimaryItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstPrimaryItemAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cPrefixAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrefixA_PREFIXTerminalRuleCall_0_1_0 = (RuleCall)cPrefixAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueI_NUMBERTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEvaluationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryItemAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrefixA_PREFIXTerminalRuleCall_2_1_0 = (RuleCall)cPrefixAssignment_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueExpansionParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final RuleCall cPreDecrementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryItem Expression:
		//	{ConstPrimaryItem} prefix=A_PREFIX? value=I_NUMBER | '(' Evaluation ')' | {PrimaryItem} prefix=A_PREFIX?
		//	value=Expansion | PreDecrement
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstPrimaryItem} prefix=A_PREFIX? value=I_NUMBER | '(' Evaluation ')' | {PrimaryItem} prefix=A_PREFIX? value=Expansion
		//| PreDecrement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConstPrimaryItem} prefix=A_PREFIX? value=I_NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConstPrimaryItem}
		public Action getConstPrimaryItemAction_0_0() { return cConstPrimaryItemAction_0_0; }
		
		//prefix=A_PREFIX?
		public Assignment getPrefixAssignment_0_1() { return cPrefixAssignment_0_1; }
		
		//A_PREFIX
		public RuleCall getPrefixA_PREFIXTerminalRuleCall_0_1_0() { return cPrefixA_PREFIXTerminalRuleCall_0_1_0; }
		
		//value=I_NUMBER
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//I_NUMBER
		public RuleCall getValueI_NUMBERTerminalRuleCall_0_2_0() { return cValueI_NUMBERTerminalRuleCall_0_2_0; }
		
		//'(' Evaluation ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Evaluation
		public RuleCall getEvaluationParserRuleCall_1_1() { return cEvaluationParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//{PrimaryItem} prefix=A_PREFIX? value=Expansion
		public Group getGroup_2() { return cGroup_2; }
		
		//{PrimaryItem}
		public Action getPrimaryItemAction_2_0() { return cPrimaryItemAction_2_0; }
		
		//prefix=A_PREFIX?
		public Assignment getPrefixAssignment_2_1() { return cPrefixAssignment_2_1; }
		
		//A_PREFIX
		public RuleCall getPrefixA_PREFIXTerminalRuleCall_2_1_0() { return cPrefixA_PREFIXTerminalRuleCall_2_1_0; }
		
		//value=Expansion
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//Expansion
		public RuleCall getValueExpansionParserRuleCall_2_2_0() { return cValueExpansionParserRuleCall_2_2_0; }
		
		//PreDecrement
		public RuleCall getPreDecrementParserRuleCall_3() { return cPreDecrementParserRuleCall_3; }
	}
	public class VariableIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.VariableId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAssignmentCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefAssignmentNAMETerminalRuleCall_1_0_1 = (RuleCall)cRefAssignmentCrossReference_1_0.eContents().get(1);
		
		//VariableId:
		//	{VariableId} ref=[Assignment|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableId} ref=[Assignment|NAME]
		public Group getGroup() { return cGroup; }
		
		//{VariableId}
		public Action getVariableIdAction_0() { return cVariableIdAction_0; }
		
		//ref=[Assignment|NAME]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Assignment|NAME]
		public CrossReference getRefAssignmentCrossReference_1_0() { return cRefAssignmentCrossReference_1_0; }
		
		//NAME
		public RuleCall getRefAssignmentNAMETerminalRuleCall_1_0_1() { return cRefAssignmentNAMETerminalRuleCall_1_0_1; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.FunctionName");
		private final RuleCall cS_WORD_PARTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Data type tokens
		////############################################################################
		//FunctionName:
		//	S_WORD_PART;
		@Override public ParserRule getRule() { return rule; }
		
		//S_WORD_PART
		public RuleCall getS_WORD_PARTTerminalRuleCall() { return cS_WORD_PARTTerminalRuleCall; }
	}
	public class NewLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.NewLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHereDocParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NewLine:
		//	HereDoc* NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//HereDoc* NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//HereDoc*
		public RuleCall getHereDocParserRuleCall_0() { return cHereDocParserRuleCall_0; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_1() { return cNEW_LINETerminalRuleCall_1; }
	}
	public class ListTerminatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.ListTerminator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ListTerminator:
		//	NewLine | ';';
		@Override public ParserRule getRule() { return rule; }
		
		//NewLine | ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NewLine
		public RuleCall getNewLineParserRuleCall_0() { return cNewLineParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MaybeNewLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.MaybeNewLine");
		private final RuleCall cNewLineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MaybeNewLine:
		//	NewLine?;
		@Override public ParserRule getRule() { return rule; }
		
		//NewLine?
		public RuleCall getNewLineParserRuleCall() { return cNewLineParserRuleCall; }
	}
	public class HereDocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HereDoc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHERE_DOC_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cHERE_DOC_PARTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cHERE_DOC_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//HereDoc:
		//	HERE_DOC_START (HERE_DOC_PART | NEW_LINE)* HERE_DOC_END;
		@Override public ParserRule getRule() { return rule; }
		
		//HERE_DOC_START (HERE_DOC_PART | NEW_LINE)* HERE_DOC_END
		public Group getGroup() { return cGroup; }
		
		//HERE_DOC_START
		public RuleCall getHERE_DOC_STARTTerminalRuleCall_0() { return cHERE_DOC_STARTTerminalRuleCall_0; }
		
		//(HERE_DOC_PART | NEW_LINE)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//HERE_DOC_PART
		public RuleCall getHERE_DOC_PARTTerminalRuleCall_1_0() { return cHERE_DOC_PARTTerminalRuleCall_1_0; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_1_1() { return cNEW_LINETerminalRuleCall_1_1; }
		
		//HERE_DOC_END
		public RuleCall getHERE_DOC_ENDTerminalRuleCall_2() { return cHERE_DOC_ENDTerminalRuleCall_2; }
	}
	
	public class FollowWordOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.FollowWordOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreedyRemoveSuffixEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreedyRemoveSuffixPercentSignPercentSignKeyword_0_0 = (Keyword)cGreedyRemoveSuffixEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveSuffixEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoveSuffixPercentSignKeyword_1_0 = (Keyword)cRemoveSuffixEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreeyRemovePrefixEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreeyRemovePrefixNumberSignNumberSignKeyword_2_0 = (Keyword)cGreeyRemovePrefixEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRemovePrefixEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRemovePrefixNumberSignKeyword_3_0 = (Keyword)cRemovePrefixEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreedyLowercaseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreedyLowercaseCommaCommaKeyword_4_0 = (Keyword)cGreedyLowercaseEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLowercaseEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLowercaseCommaKeyword_5_0 = (Keyword)cLowercaseEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGreedyUppercaseEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGreedyUppercaseCircumflexAccentCircumflexAccentKeyword_6_0 = (Keyword)cGreedyUppercaseEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUppercaseEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUppercaseCircumflexAccentKeyword_7_0 = (Keyword)cUppercaseEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUseAlternateEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUseAlternateColonPlusSignKeyword_8_0 = (Keyword)cUseAlternateEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUseAlternateEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUseAlternatePlusSignKeyword_9_0 = (Keyword)cUseAlternateEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cUseDefaultEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cUseDefaultColonHyphenMinusKeyword_10_0 = (Keyword)cUseDefaultEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cUseDefaultEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cUseDefaultHyphenMinusKeyword_11_0 = (Keyword)cUseDefaultEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cAssignDefaultEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cAssignDefaultColonEqualsSignKeyword_12_0 = (Keyword)cAssignDefaultEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cAssignDefaultEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cAssignDefaultEqualsSignKeyword_13_0 = (Keyword)cAssignDefaultEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cErrorDefaultEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cErrorDefaultColonQuestionMarkKeyword_14_0 = (Keyword)cErrorDefaultEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cErrorDefaultEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cErrorDefaultQuestionMarkKeyword_15_0 = (Keyword)cErrorDefaultEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum FollowWordOp:
		//	GreedyRemoveSuffix='%%' | RemoveSuffix='%'
		//	| GreeyRemovePrefix='##' | RemovePrefix='#'
		//	| GreedyLowercase=',,' | Lowercase=','
		//	| GreedyUppercase='^^' | Uppercase='^'
		//	| UseAlternate=':+' | UseAlternate='+'
		//	| UseDefault=':-' | UseDefault='-'
		//	| AssignDefault=':=' | AssignDefault='='
		//	| ErrorDefault=':?' | ErrorDefault='?';
		public EnumRule getRule() { return rule; }
		
		//GreedyRemoveSuffix='%%' | RemoveSuffix='%' | GreeyRemovePrefix='##' | RemovePrefix='#' | GreedyLowercase=',,' |
		//Lowercase=',' | GreedyUppercase='^^' | Uppercase='^' | UseAlternate=':+' | UseAlternate='+' | UseDefault=':-' |
		//UseDefault='-' | AssignDefault=':=' | AssignDefault='=' | ErrorDefault=':?' | ErrorDefault='?'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreedyRemoveSuffix='%%'
		public EnumLiteralDeclaration getGreedyRemoveSuffixEnumLiteralDeclaration_0() { return cGreedyRemoveSuffixEnumLiteralDeclaration_0; }
		
		//'%%'
		public Keyword getGreedyRemoveSuffixPercentSignPercentSignKeyword_0_0() { return cGreedyRemoveSuffixPercentSignPercentSignKeyword_0_0; }
		
		//RemoveSuffix='%'
		public EnumLiteralDeclaration getRemoveSuffixEnumLiteralDeclaration_1() { return cRemoveSuffixEnumLiteralDeclaration_1; }
		
		//'%'
		public Keyword getRemoveSuffixPercentSignKeyword_1_0() { return cRemoveSuffixPercentSignKeyword_1_0; }
		
		//GreeyRemovePrefix='##'
		public EnumLiteralDeclaration getGreeyRemovePrefixEnumLiteralDeclaration_2() { return cGreeyRemovePrefixEnumLiteralDeclaration_2; }
		
		//'##'
		public Keyword getGreeyRemovePrefixNumberSignNumberSignKeyword_2_0() { return cGreeyRemovePrefixNumberSignNumberSignKeyword_2_0; }
		
		//RemovePrefix='#'
		public EnumLiteralDeclaration getRemovePrefixEnumLiteralDeclaration_3() { return cRemovePrefixEnumLiteralDeclaration_3; }
		
		//'#'
		public Keyword getRemovePrefixNumberSignKeyword_3_0() { return cRemovePrefixNumberSignKeyword_3_0; }
		
		//GreedyLowercase=',,'
		public EnumLiteralDeclaration getGreedyLowercaseEnumLiteralDeclaration_4() { return cGreedyLowercaseEnumLiteralDeclaration_4; }
		
		//',,'
		public Keyword getGreedyLowercaseCommaCommaKeyword_4_0() { return cGreedyLowercaseCommaCommaKeyword_4_0; }
		
		//Lowercase=','
		public EnumLiteralDeclaration getLowercaseEnumLiteralDeclaration_5() { return cLowercaseEnumLiteralDeclaration_5; }
		
		//','
		public Keyword getLowercaseCommaKeyword_5_0() { return cLowercaseCommaKeyword_5_0; }
		
		//GreedyUppercase='^^'
		public EnumLiteralDeclaration getGreedyUppercaseEnumLiteralDeclaration_6() { return cGreedyUppercaseEnumLiteralDeclaration_6; }
		
		//'^^'
		public Keyword getGreedyUppercaseCircumflexAccentCircumflexAccentKeyword_6_0() { return cGreedyUppercaseCircumflexAccentCircumflexAccentKeyword_6_0; }
		
		//Uppercase='^'
		public EnumLiteralDeclaration getUppercaseEnumLiteralDeclaration_7() { return cUppercaseEnumLiteralDeclaration_7; }
		
		//'^'
		public Keyword getUppercaseCircumflexAccentKeyword_7_0() { return cUppercaseCircumflexAccentKeyword_7_0; }
		
		//UseAlternate=':+'
		public EnumLiteralDeclaration getUseAlternateEnumLiteralDeclaration_8() { return cUseAlternateEnumLiteralDeclaration_8; }
		
		//':+'
		public Keyword getUseAlternateColonPlusSignKeyword_8_0() { return cUseAlternateColonPlusSignKeyword_8_0; }
		
		//UseAlternate='+'
		public EnumLiteralDeclaration getUseAlternateEnumLiteralDeclaration_9() { return cUseAlternateEnumLiteralDeclaration_9; }
		
		//'+'
		public Keyword getUseAlternatePlusSignKeyword_9_0() { return cUseAlternatePlusSignKeyword_9_0; }
		
		//UseDefault=':-'
		public EnumLiteralDeclaration getUseDefaultEnumLiteralDeclaration_10() { return cUseDefaultEnumLiteralDeclaration_10; }
		
		//':-'
		public Keyword getUseDefaultColonHyphenMinusKeyword_10_0() { return cUseDefaultColonHyphenMinusKeyword_10_0; }
		
		//UseDefault='-'
		public EnumLiteralDeclaration getUseDefaultEnumLiteralDeclaration_11() { return cUseDefaultEnumLiteralDeclaration_11; }
		
		//'-'
		public Keyword getUseDefaultHyphenMinusKeyword_11_0() { return cUseDefaultHyphenMinusKeyword_11_0; }
		
		//AssignDefault=':='
		public EnumLiteralDeclaration getAssignDefaultEnumLiteralDeclaration_12() { return cAssignDefaultEnumLiteralDeclaration_12; }
		
		//':='
		public Keyword getAssignDefaultColonEqualsSignKeyword_12_0() { return cAssignDefaultColonEqualsSignKeyword_12_0; }
		
		//AssignDefault='='
		public EnumLiteralDeclaration getAssignDefaultEnumLiteralDeclaration_13() { return cAssignDefaultEnumLiteralDeclaration_13; }
		
		//'='
		public Keyword getAssignDefaultEqualsSignKeyword_13_0() { return cAssignDefaultEqualsSignKeyword_13_0; }
		
		//ErrorDefault=':?'
		public EnumLiteralDeclaration getErrorDefaultEnumLiteralDeclaration_14() { return cErrorDefaultEnumLiteralDeclaration_14; }
		
		//':?'
		public Keyword getErrorDefaultColonQuestionMarkKeyword_14_0() { return cErrorDefaultColonQuestionMarkKeyword_14_0; }
		
		//ErrorDefault='?'
		public EnumLiteralDeclaration getErrorDefaultEnumLiteralDeclaration_15() { return cErrorDefaultEnumLiteralDeclaration_15; }
		
		//'?'
		public Keyword getErrorDefaultQuestionMarkKeyword_15_0() { return cErrorDefaultQuestionMarkKeyword_15_0; }
	}
	
	private final BashElements pBash;
	private final CompoundListElements pCompoundList;
	private final SimpleListElements pSimpleList;
	private final PipelineCommandElements pPipelineCommand;
	private final PipelineElements pPipeline;
	private final CommandElements pCommand;
	private final FunctionDefineElements pFunctionDefine;
	private final SimpleCommandElements pSimpleCommand;
	private final ShellCommandElements pShellCommand;
	private final GroupCommandElements pGroupCommand;
	private final CondCommandElements pCondCommand;
	private final ArithmeticCommandElements pArithmeticCommand;
	private final SubshellElements pSubshell;
	private final CommandNameElements pCommandName;
	private final CaseStatementElements pCaseStatement;
	private final CasePatternElements pCasePattern;
	private final CasePatternContinueElements pCasePatternContinue;
	private final PatternElements pPattern;
	private final IfStatementElements pIfStatement;
	private final ElseIfBlockElements pElseIfBlock;
	private final ForStatementElements pForStatement;
	private final WhileStatementElements pWhileStatement;
	private final RedirectionElements pRedirection;
	private final ArrayElements pArray;
	private final ArrayStartElements pArrayStart;
	private final ArrayEndElements pArrayEnd;
	private final WordElements pWord;
	private final LiteralWordElements pLiteralWord;
	private final AssignmentElements pAssignment;
	private final LAssignmentElements pLAssignment;
	private final AssignableElements pAssignable;
	private final WordsElements pWords;
	private final DQStringElements pDQString;
	private final ExpansionElements pExpansion;
	private final WordElementElements pWordElement;
	private final StringElementElements pStringElement;
	private final LiteralStringPartElements pLiteralStringPart;
	private final LiteralWordPartElements pLiteralWordPart;
	private final CondOrAndElements pCondOrAnd;
	private final CondExpElements pCondExp;
	private final CondConstElements pCondConst;
	private final RegularExpressionElements pRegularExpression;
	private final RegularElementsElements pRegularElements;
	private final ArithmeticExpansionElements pArithmeticExpansion;
	private final IndexEvaluationElements pIndexEvaluation;
	private final IndexEvaluationStartElements pIndexEvaluationStart;
	private final IndexEvaluationEndElements pIndexEvaluationEnd;
	private final ArithmeticExpansionStartElements pArithmeticExpansionStart;
	private final ArithmeticExpansionEndElements pArithmeticExpansionEnd;
	private final ParameterExpansionElements pParameterExpansion;
	private final ParameterExpansionStartElements pParameterExpansionStart;
	private final ParameterExpansionEndElements pParameterExpansionEnd;
	private final ParameterProcessorElements pParameterProcessor;
	private final FollowWordOpElements eFollowWordOp;
	private final CommandSubstitutionElements pCommandSubstitution;
	private final CommandSubstitutionStartElements pCommandSubstitutionStart;
	private final CommandSubstitutionStartEndElements pCommandSubstitutionStartEnd;
	private final ProcessSubstitutionElements pProcessSubstitution;
	private final ProcessSubstitutionStartElements pProcessSubstitutionStart;
	private final ProcessSubstitutionEndElements pProcessSubstitutionEnd;
	private final EvaluationElements pEvaluation;
	private final ArithmeticElements pArithmetic;
	private final ConditionalOperatorElements pConditionalOperator;
	private final LogicOrElements pLogicOr;
	private final LogicAndElements pLogicAnd;
	private final BitwiseORElements pBitwiseOR;
	private final BitwiseExclusiveORElements pBitwiseExclusiveOR;
	private final BitwiseANDElements pBitwiseAND;
	private final EqualityAndInequalityElements pEqualityAndInequality;
	private final ComparisonElements pComparison;
	private final BitwiseShiftsElements pBitwiseShifts;
	private final AdditionSubtractionElements pAdditionSubtraction;
	private final MultiplicationDivisionRemainderElements pMultiplicationDivisionRemainder;
	private final ExponentiationElements pExponentiation;
	private final LogicalAndBitwiseNegationElements pLogicalAndBitwiseNegation;
	private final UnaryMinusAndPlusElements pUnaryMinusAndPlus;
	private final PreDecrementElements pPreDecrement;
	private final PostDecrementElements pPostDecrement;
	private final PrimaryItemElements pPrimaryItem;
	private final VariableIdElements pVariableId;
	private final FunctionNameElements pFunctionName;
	private final NewLineElements pNewLine;
	private final ListTerminatorElements pListTerminator;
	private final MaybeNewLineElements pMaybeNewLine;
	private final HereDocElements pHereDoc;
	private final TerminalRule tI_NUMBER;
	private final TerminalRule tNEW_LINE;
	private final TerminalRule tWS;
	private final TerminalRule tHIDEN_NEW_LINE;
	private final TerminalRule tNAME;
	private final TerminalRule tS_WORD_PART;
	private final TerminalRule tWORD_PART;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tA_PREFIX;
	private final TerminalRule tC_S_OP;
	private final TerminalRule tC_B_OP;
	private final TerminalRule tC_LINE;
	private final TerminalRule tCS_START;
	private final TerminalRule tCS_END;
	private final TerminalRule tHERE_DOC_WORD;
	private final TerminalRule tHERE_DOC_START;
	private final TerminalRule tHERE_DOC_END;
	private final TerminalRule tHERE_DOC_PART;
	
	private final Grammar grammar;

	@Inject
	public MyBashGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pBash = new BashElements();
		this.pCompoundList = new CompoundListElements();
		this.pSimpleList = new SimpleListElements();
		this.pPipelineCommand = new PipelineCommandElements();
		this.pPipeline = new PipelineElements();
		this.pCommand = new CommandElements();
		this.pFunctionDefine = new FunctionDefineElements();
		this.pSimpleCommand = new SimpleCommandElements();
		this.pShellCommand = new ShellCommandElements();
		this.pGroupCommand = new GroupCommandElements();
		this.pCondCommand = new CondCommandElements();
		this.pArithmeticCommand = new ArithmeticCommandElements();
		this.pSubshell = new SubshellElements();
		this.pCommandName = new CommandNameElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCasePattern = new CasePatternElements();
		this.pCasePatternContinue = new CasePatternContinueElements();
		this.pPattern = new PatternElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIfBlock = new ElseIfBlockElements();
		this.pForStatement = new ForStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pRedirection = new RedirectionElements();
		this.pArray = new ArrayElements();
		this.pArrayStart = new ArrayStartElements();
		this.pArrayEnd = new ArrayEndElements();
		this.pWord = new WordElements();
		this.pLiteralWord = new LiteralWordElements();
		this.pAssignment = new AssignmentElements();
		this.pLAssignment = new LAssignmentElements();
		this.pAssignable = new AssignableElements();
		this.pWords = new WordsElements();
		this.pDQString = new DQStringElements();
		this.pExpansion = new ExpansionElements();
		this.pWordElement = new WordElementElements();
		this.pStringElement = new StringElementElements();
		this.pLiteralStringPart = new LiteralStringPartElements();
		this.pLiteralWordPart = new LiteralWordPartElements();
		this.pCondOrAnd = new CondOrAndElements();
		this.pCondExp = new CondExpElements();
		this.pCondConst = new CondConstElements();
		this.pRegularExpression = new RegularExpressionElements();
		this.pRegularElements = new RegularElementsElements();
		this.pArithmeticExpansion = new ArithmeticExpansionElements();
		this.pIndexEvaluation = new IndexEvaluationElements();
		this.pIndexEvaluationStart = new IndexEvaluationStartElements();
		this.pIndexEvaluationEnd = new IndexEvaluationEndElements();
		this.pArithmeticExpansionStart = new ArithmeticExpansionStartElements();
		this.pArithmeticExpansionEnd = new ArithmeticExpansionEndElements();
		this.pParameterExpansion = new ParameterExpansionElements();
		this.pParameterExpansionStart = new ParameterExpansionStartElements();
		this.pParameterExpansionEnd = new ParameterExpansionEndElements();
		this.pParameterProcessor = new ParameterProcessorElements();
		this.eFollowWordOp = new FollowWordOpElements();
		this.pCommandSubstitution = new CommandSubstitutionElements();
		this.pCommandSubstitutionStart = new CommandSubstitutionStartElements();
		this.pCommandSubstitutionStartEnd = new CommandSubstitutionStartEndElements();
		this.pProcessSubstitution = new ProcessSubstitutionElements();
		this.pProcessSubstitutionStart = new ProcessSubstitutionStartElements();
		this.pProcessSubstitutionEnd = new ProcessSubstitutionEndElements();
		this.pEvaluation = new EvaluationElements();
		this.pArithmetic = new ArithmeticElements();
		this.pConditionalOperator = new ConditionalOperatorElements();
		this.pLogicOr = new LogicOrElements();
		this.pLogicAnd = new LogicAndElements();
		this.pBitwiseOR = new BitwiseORElements();
		this.pBitwiseExclusiveOR = new BitwiseExclusiveORElements();
		this.pBitwiseAND = new BitwiseANDElements();
		this.pEqualityAndInequality = new EqualityAndInequalityElements();
		this.pComparison = new ComparisonElements();
		this.pBitwiseShifts = new BitwiseShiftsElements();
		this.pAdditionSubtraction = new AdditionSubtractionElements();
		this.pMultiplicationDivisionRemainder = new MultiplicationDivisionRemainderElements();
		this.pExponentiation = new ExponentiationElements();
		this.pLogicalAndBitwiseNegation = new LogicalAndBitwiseNegationElements();
		this.pUnaryMinusAndPlus = new UnaryMinusAndPlusElements();
		this.pPreDecrement = new PreDecrementElements();
		this.pPostDecrement = new PostDecrementElements();
		this.pPrimaryItem = new PrimaryItemElements();
		this.pVariableId = new VariableIdElements();
		this.pFunctionName = new FunctionNameElements();
		this.pNewLine = new NewLineElements();
		this.pListTerminator = new ListTerminatorElements();
		this.pMaybeNewLine = new MaybeNewLineElements();
		this.pHereDoc = new HereDocElements();
		this.tI_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.I_NUMBER");
		this.tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.NEW_LINE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.WS");
		this.tHIDEN_NEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HIDEN_NEW_LINE");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.NAME");
		this.tS_WORD_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.S_WORD_PART");
		this.tWORD_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.WORD_PART");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.SL_COMMENT");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.VARIABLE");
		this.tA_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.A_PREFIX");
		this.tC_S_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.C_S_OP");
		this.tC_B_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.C_B_OP");
		this.tC_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.C_LINE");
		this.tCS_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CS_START");
		this.tCS_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.CS_END");
		this.tHERE_DOC_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HERE_DOC_WORD");
		this.tHERE_DOC_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HERE_DOC_START");
		this.tHERE_DOC_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HERE_DOC_END");
		this.tHERE_DOC_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyBash.HERE_DOC_PART");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyBash".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Bash:
	//	{Bash} MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine)?
	//	//
	//	| WS (error?=Word | error?=Assignment) WS;
	public BashElements getBashAccess() {
		return pBash;
	}
	
	public ParserRule getBashRule() {
		return getBashAccess().getRule();
	}
	
	//CompoundList:
	//	MaybeNewLine (commands+=SimpleList (NewLine commands+=SimpleList)* MaybeNewLine);
	public CompoundListElements getCompoundListAccess() {
		return pCompoundList;
	}
	
	public ParserRule getCompoundListRule() {
		return getCompoundListAccess().getRule();
	}
	
	//SimpleList CommandUnit:
	//	PipelineCommand ({SimpleList.left=current} (op=('&&' | '||') MaybeNewLine | op=('&' | ';')) right=PipelineCommand)*
	//	(backend?='&' | ';')?
	public SimpleListElements getSimpleListAccess() {
		return pSimpleList;
	}
	
	public ParserRule getSimpleListRule() {
		return getSimpleListAccess().getRule();
	}
	
	//PipelineCommand CommandUnit:
	//	{PipelineCommand} not?='!' pipeline=Pipeline
	//	| Pipeline
	public PipelineCommandElements getPipelineCommandAccess() {
		return pPipelineCommand;
	}
	
	public ParserRule getPipelineCommandRule() {
		return getPipelineCommandAccess().getRule();
	}
	
	//Pipeline CommandUnit:
	//	Command ({Pipeline.left=current} op=('|' | '|&') MaybeNewLine right=Command)*
	public PipelineElements getPipelineAccess() {
		return pPipeline;
	}
	
	public ParserRule getPipelineRule() {
		return getPipelineAccess().getRule();
	}
	
	//Command CommandUnit:
	//	FunctionDefine | SimpleCommand | ShellCommand redirects+=Redirection*
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//FunctionDefine:
	//	{FunctionDefine} 'function' name=FunctionName ((-> '(' ')')? MaybeNewLine) body=ShellCommand
	//	| {FunctionDefine} name=FunctionName ('(' ')' MaybeNewLine) body=ShellCommand;
	public FunctionDefineElements getFunctionDefineAccess() {
		return pFunctionDefine;
	}
	
	public ParserRule getFunctionDefineRule() {
		return getFunctionDefineAccess().getRule();
	}
	
	//SimpleCommand:
	//	assignments+=Assignment+ (command=CommandName (parameters+=Word | r+=Redirection)*)?
	//	| command=CommandName (parameters+=(Word | LAssignment) | r+=Redirection)*
	//	| r+=Redirection+;
	public SimpleCommandElements getSimpleCommandAccess() {
		return pSimpleCommand;
	}
	
	public ParserRule getSimpleCommandRule() {
		return getSimpleCommandAccess().getRule();
	}
	
	//ShellCommand:
	//	GroupCommand | IfStatement | WhileStatement | ForStatement | CaseStatement | Subshell | CondCommand |
	//	ArithmeticCommand;
	public ShellCommandElements getShellCommandAccess() {
		return pShellCommand;
	}
	
	public ParserRule getShellCommandRule() {
		return getShellCommandAccess().getRule();
	}
	
	//GroupCommand:
	//	{GroupCommand} '{' body=CompoundList '}';
	public GroupCommandElements getGroupCommandAccess() {
		return pGroupCommand;
	}
	
	public ParserRule getGroupCommandRule() {
		return getGroupCommandAccess().getRule();
	}
	
	//CondCommand:
	//	'[[' expression=CondOrAnd ']]';
	public CondCommandElements getCondCommandAccess() {
		return pCondCommand;
	}
	
	public ParserRule getCondCommandRule() {
		return getCondCommandAccess().getRule();
	}
	
	//ArithmeticCommand:
	//	'((' expression=Evaluation '))';
	public ArithmeticCommandElements getArithmeticCommandAccess() {
		return pArithmeticCommand;
	}
	
	public ParserRule getArithmeticCommandRule() {
		return getArithmeticCommandAccess().getRule();
	}
	
	//Subshell:
	//	'(' body=CompoundList ')';
	public SubshellElements getSubshellAccess() {
		return pSubshell;
	}
	
	public ParserRule getSubshellRule() {
		return getSubshellAccess().getRule();
	}
	
	//CommandName Word:
	//	{CommandName} ref=[FunctionDefine|FunctionName] | Words
	public CommandNameElements getCommandNameAccess() {
		return pCommandName;
	}
	
	public ParserRule getCommandNameRule() {
		return getCommandNameAccess().getRule();
	}
	
	//CaseStatement:
	//	{CaseStatement}
	//	'case' variable=Word MaybeNewLine 'in' MaybeNewLine (patterns+=CasePattern
	//	patterns+=CasePatternContinue* ((';;' | ';&' | ';;&') MaybeNewLine)?)?
	//	'esac';
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//CasePattern:
	//	'('? condition=Pattern ')' body=CompoundList;
	public CasePatternElements getCasePatternAccess() {
		return pCasePattern;
	}
	
	public ParserRule getCasePatternRule() {
		return getCasePatternAccess().getRule();
	}
	
	//CasePatternContinue CasePattern:
	//	(follow=(';;' | ';&' | ';;&') MaybeNewLine) '('? condition=Pattern ')' body=CompoundList
	public CasePatternContinueElements getCasePatternContinueAccess() {
		return pCasePatternContinue;
	}
	
	public ParserRule getCasePatternContinueRule() {
		return getCasePatternContinueAccess().getRule();
	}
	
	//Pattern:
	//	parts+=Word ('|' parts+=Word)*;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//IfStatement:
	//	{IfStatement}
	//	'if' condition=CompoundList
	//	'then' then=CompoundList
	//	elseIfBlock+=ElseIfBlock* ('else' else=CompoundList)?
	//	'fi';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseIfBlock:
	//	{ElseIfBlock} 'elif' condition=CompoundList 'then' then=CompoundList;
	public ElseIfBlockElements getElseIfBlockAccess() {
		return pElseIfBlock;
	}
	
	public ParserRule getElseIfBlockRule() {
		return getElseIfBlockAccess().getRule();
	}
	
	//ForStatement:
	//	'for' ({ArithmeticForStatement}
	//	'((' init=Evaluation? ';' condition=Evaluation? ';' step=Evaluation? '))' (ListTerminator MaybeNewLine)?
	//	| {ForStatement} variable=NAME 'in' words+=Word+ ListTerminator MaybeNewLine)
	//	'do'
	//	body=CompoundList
	//	'done';
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' c=CompoundList 'do' d=CompoundList 'done';
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//Redirection:
	//	{Redirection} (I_NUMBER? op=('>&' | '>' | '>>' | '<' | '<&' | '&>>' | '<>' | '&>' | '<|' | '>|') (target=Word |
	//	I_NUMBER) | op='<<' HERE_DOC_WORD);
	public RedirectionElements getRedirectionAccess() {
		return pRedirection;
	}
	
	public ParserRule getRedirectionRule() {
		return getRedirectionAccess().getRule();
	}
	
	////###########################################################################
	//Array:
	//	ArrayStart ArrayEnd;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//ArrayStart Array hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	{Array} '(' (MaybeNewLine words+=Word)* MaybeNewLine
	public ArrayStartElements getArrayStartAccess() {
		return pArrayStart;
	}
	
	public ParserRule getArrayStartRule() {
		return getArrayStartAccess().getRule();
	}
	
	//ArrayEnd hidden(C_LINE):
	//	')';
	public ArrayEndElements getArrayEndAccess() {
		return pArrayEnd;
	}
	
	public ParserRule getArrayEndRule() {
		return getArrayEndAccess().getRule();
	}
	
	//Word:
	//	Words | elements+=LiteralWord;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//LiteralWord Literal:
	//	{Literal} values+=S_WORD_PART
	public LiteralWordElements getLiteralWordAccess() {
		return pLiteralWord;
	}
	
	public ParserRule getLiteralWordRule() {
		return getLiteralWordAccess().getRule();
	}
	
	//Assignment hidden(C_LINE):
	//	name=NAME index=IndexEvaluation? '=' -> value=Assignable?;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//LAssignment hidden(C_LINE):
	//	name=NAME index=IndexEvaluation? ('=' -> value=Assignable)?;
	public LAssignmentElements getLAssignmentAccess() {
		return pLAssignment;
	}
	
	public ParserRule getLAssignmentRule() {
		return getLAssignmentAccess().getRule();
	}
	
	//Assignable:
	//	Word | Array;
	public AssignableElements getAssignableAccess() {
		return pAssignable;
	}
	
	public ParserRule getAssignableRule() {
		return getAssignableAccess().getRule();
	}
	
	//Words Word hidden(C_LINE):
	//	-> elements+=WordElement+
	public WordsElements getWordsAccess() {
		return pWords;
	}
	
	public ParserRule getWordsRule() {
		return getWordsAccess().getRule();
	}
	
	//DQString:
	//	{DQString} '"' elements+=StringElement* '"';
	public DQStringElements getDQStringAccess() {
		return pDQString;
	}
	
	public ParserRule getDQStringRule() {
		return getDQStringAccess().getRule();
	}
	
	//Expansion:
	//	ParameterExpansion | CommandSubstitution | ArithmeticExpansion | ProcessSubstitution;
	public ExpansionElements getExpansionAccess() {
		return pExpansion;
	}
	
	public ParserRule getExpansionRule() {
		return getExpansionAccess().getRule();
	}
	
	//WordElement:
	//	=> LiteralWordPart | DQString | Expansion;
	public WordElementElements getWordElementAccess() {
		return pWordElement;
	}
	
	public ParserRule getWordElementRule() {
		return getWordElementAccess().getRule();
	}
	
	//StringElement WordElement:
	//	LiteralStringPart | Expansion
	public StringElementElements getStringElementAccess() {
		return pStringElement;
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}
	
	//LiteralStringPart Literal:
	//	{Literal} => values+=WORD_PART+
	public LiteralStringPartElements getLiteralStringPartAccess() {
		return pLiteralStringPart;
	}
	
	public ParserRule getLiteralStringPartRule() {
		return getLiteralStringPartAccess().getRule();
	}
	
	//LiteralWordPart Literal:
	//	{Literal} => (values+=WORD_PART | '\'' values+=WORD_PART? '\'' | '"' values+=WORD_PART* '"')+
	public LiteralWordPartElements getLiteralWordPartAccess() {
		return pLiteralWordPart;
	}
	
	public ParserRule getLiteralWordPartRule() {
		return getLiteralWordPartAccess().getRule();
	}
	
	////###########################################################################
	//CondOrAnd CondExpression:
	//	CondExp ({CondUnaryExpression.left=current} ('||' | '&&') right=CondExp)*
	public CondOrAndElements getCondOrAndAccess() {
		return pCondOrAnd;
	}
	
	public ParserRule getCondOrAndRule() {
		return getCondOrAndAccess().getRule();
	}
	
	//CondExp CondExpression:
	//	{CondUnaryExpression} op=C_S_OP operand=Word | CondConst ({CondBinaryExpression.left=current} (op=C_B_OP
	//	right=Word | op='=~' right=RegularExpression))? | '(' CondOrAnd ')'
	public CondExpElements getCondExpAccess() {
		return pCondExp;
	}
	
	public ParserRule getCondExpRule() {
		return getCondExpAccess().getRule();
	}
	
	//CondConst:
	//	value=Word;
	public CondConstElements getCondConstAccess() {
		return pCondConst;
	}
	
	public ParserRule getCondConstRule() {
		return getCondConstAccess().getRule();
	}
	
	//RegularExpression hidden(C_LINE):
	//	RegularElements ({RegularExpression.left=current} op='|' right=RegularElements)*;
	public RegularExpressionElements getRegularExpressionAccess() {
		return pRegularExpression;
	}
	
	public ParserRule getRegularExpressionRule() {
		return getRegularExpressionAccess().getRule();
	}
	
	//RegularElements RegularConst:
	//	{RegularConst} ('(' parts+=Word? ')' | parts+=Word)+
	public RegularElementsElements getRegularElementsAccess() {
		return pRegularElements;
	}
	
	public ParserRule getRegularElementsRule() {
		return getRegularElementsAccess().getRule();
	}
	
	////#################################################################################
	//ArithmeticExpansion:
	//	ArithmeticExpansionStart ArithmeticExpansionEnd;
	public ArithmeticExpansionElements getArithmeticExpansionAccess() {
		return pArithmeticExpansion;
	}
	
	public ParserRule getArithmeticExpansionRule() {
		return getArithmeticExpansionAccess().getRule();
	}
	
	//IndexEvaluation:
	//	IndexEvaluationStart end=IndexEvaluationEnd;
	public IndexEvaluationElements getIndexEvaluationAccess() {
		return pIndexEvaluation;
	}
	
	public ParserRule getIndexEvaluationRule() {
		return getIndexEvaluationAccess().getRule();
	}
	
	//IndexEvaluationStart IndexEvaluation hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	'[' expression=Evaluation
	public IndexEvaluationStartElements getIndexEvaluationStartAccess() {
		return pIndexEvaluationStart;
	}
	
	public ParserRule getIndexEvaluationStartRule() {
		return getIndexEvaluationStartAccess().getRule();
	}
	
	//IndexEvaluationEnd hidden(C_LINE):
	//	']';
	public IndexEvaluationEndElements getIndexEvaluationEndAccess() {
		return pIndexEvaluationEnd;
	}
	
	public ParserRule getIndexEvaluationEndRule() {
		return getIndexEvaluationEndAccess().getRule();
	}
	
	//ArithmeticExpansionStart ArithmeticExpansion hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	'$((' expression=Evaluation
	public ArithmeticExpansionStartElements getArithmeticExpansionStartAccess() {
		return pArithmeticExpansionStart;
	}
	
	public ParserRule getArithmeticExpansionStartRule() {
		return getArithmeticExpansionStartAccess().getRule();
	}
	
	//ArithmeticExpansionEnd hidden(C_LINE):
	//	'))';
	public ArithmeticExpansionEndElements getArithmeticExpansionEndAccess() {
		return pArithmeticExpansionEnd;
	}
	
	public ParserRule getArithmeticExpansionEndRule() {
		return getArithmeticExpansionEndAccess().getRule();
	}
	
	//ParameterExpansion:
	//	ParameterExpansionStart end=ParameterExpansionEnd
	//	| {ParameterExpansion} ref=[Assignment|VARIABLE];
	public ParameterExpansionElements getParameterExpansionAccess() {
		return pParameterExpansion;
	}
	
	public ParserRule getParameterExpansionRule() {
		return getParameterExpansionAccess().getRule();
	}
	
	//ParameterExpansionStart ParameterExpansion hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	{ParameterExpansion}
	//	'${'
	//	hash?='#'? (ref=[Assignment|NAME] | value=I_NUMBER | value='?' | value='@' | value='*') ('[' ('@' | '*' |
	//	index=Evaluation) ']')?
	//	replacer=ParameterProcessor?
	public ParameterExpansionStartElements getParameterExpansionStartAccess() {
		return pParameterExpansionStart;
	}
	
	public ParserRule getParameterExpansionStartRule() {
		return getParameterExpansionStartAccess().getRule();
	}
	
	//ParameterExpansionEnd hidden(C_LINE):
	//	'}';
	public ParameterExpansionEndElements getParameterExpansionEndAccess() {
		return pParameterExpansionEnd;
	}
	
	public ParserRule getParameterExpansionEndRule() {
		return getParameterExpansionEndAccess().getRule();
	}
	
	//ParameterProcessor:
	//	{SingleProcessor} op=FollowWordOp word=Word?
	//	| {ReplaceProcessor} op=('//' | '/') (original=Word ('/' replace=Word?)?)?
	//	| {ReplaceProcessor} op=('//' | '/') '/' replace=Word?
	//	| {SubStringProcessor} ':' (start=Evaluation (':' length=Evaluation?)?)?
	//	| {SubStringProcessor} ':' ':' length=Evaluation?;
	public ParameterProcessorElements getParameterProcessorAccess() {
		return pParameterProcessor;
	}
	
	public ParserRule getParameterProcessorRule() {
		return getParameterProcessorAccess().getRule();
	}
	
	//enum FollowWordOp:
	//	GreedyRemoveSuffix='%%' | RemoveSuffix='%'
	//	| GreeyRemovePrefix='##' | RemovePrefix='#'
	//	| GreedyLowercase=',,' | Lowercase=','
	//	| GreedyUppercase='^^' | Uppercase='^'
	//	| UseAlternate=':+' | UseAlternate='+'
	//	| UseDefault=':-' | UseDefault='-'
	//	| AssignDefault=':=' | AssignDefault='='
	//	| ErrorDefault=':?' | ErrorDefault='?';
	public FollowWordOpElements getFollowWordOpAccess() {
		return eFollowWordOp;
	}
	
	public EnumRule getFollowWordOpRule() {
		return getFollowWordOpAccess().getRule();
	}
	
	//CommandSubstitution:
	//	CommandSubstitutionStart end=CommandSubstitutionStartEnd;
	public CommandSubstitutionElements getCommandSubstitutionAccess() {
		return pCommandSubstitution;
	}
	
	public ParserRule getCommandSubstitutionRule() {
		return getCommandSubstitutionAccess().getRule();
	}
	
	//CommandSubstitutionStart CommandSubstitution hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	CS_START commands=CompoundList
	public CommandSubstitutionStartElements getCommandSubstitutionStartAccess() {
		return pCommandSubstitutionStart;
	}
	
	public ParserRule getCommandSubstitutionStartRule() {
		return getCommandSubstitutionStartAccess().getRule();
	}
	
	//CommandSubstitutionStartEnd hidden(C_LINE):
	//	CS_END;
	public CommandSubstitutionStartEndElements getCommandSubstitutionStartEndAccess() {
		return pCommandSubstitutionStartEnd;
	}
	
	public ParserRule getCommandSubstitutionStartEndRule() {
		return getCommandSubstitutionStartEndAccess().getRule();
	}
	
	//ProcessSubstitution:
	//	ProcessSubstitutionStart end=ProcessSubstitutionEnd;
	public ProcessSubstitutionElements getProcessSubstitutionAccess() {
		return pProcessSubstitution;
	}
	
	public ParserRule getProcessSubstitutionRule() {
		return getProcessSubstitutionAccess().getRule();
	}
	
	//ProcessSubstitutionStart ProcessSubstitution hidden(SL_COMMENT, C_LINE, WS, HIDEN_NEW_LINE):
	//	op=('<(' | '>(') body=CompoundList
	public ProcessSubstitutionStartElements getProcessSubstitutionStartAccess() {
		return pProcessSubstitutionStart;
	}
	
	public ParserRule getProcessSubstitutionStartRule() {
		return getProcessSubstitutionStartAccess().getRule();
	}
	
	//ProcessSubstitutionEnd hidden(C_LINE):
	//	')';
	public ProcessSubstitutionEndElements getProcessSubstitutionEndAccess() {
		return pProcessSubstitutionEnd;
	}
	
	public ParserRule getProcessSubstitutionEndRule() {
		return getProcessSubstitutionEndAccess().getRule();
	}
	
	////###########################################################################
	//Evaluation Expression:
	//	Arithmetic ({BinaryExpression.left=current} op=',' right=Arithmetic)*
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}
	
	//Arithmetic Expression:
	//	{BinaryExpression} left=VariableId op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
	//	right=Arithmetic | ConditionalOperator
	public ArithmeticElements getArithmeticAccess() {
		return pArithmetic;
	}
	
	public ParserRule getArithmeticRule() {
		return getArithmeticAccess().getRule();
	}
	
	//ConditionalOperator Expression:
	//	LogicOr ('?' {ConditionalOperator.condition=current} first=ConditionalOperator ':' right=ConditionalOperator)?
	public ConditionalOperatorElements getConditionalOperatorAccess() {
		return pConditionalOperator;
	}
	
	public ParserRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//LogicOr Expression:
	//	LogicAnd ({BinaryExpression.left=current} op='||' right=LogicAnd)*
	public LogicOrElements getLogicOrAccess() {
		return pLogicOr;
	}
	
	public ParserRule getLogicOrRule() {
		return getLogicOrAccess().getRule();
	}
	
	//LogicAnd Expression:
	//	BitwiseOR ({BinaryExpression.left=current} op='&&' right=BitwiseOR)*
	public LogicAndElements getLogicAndAccess() {
		return pLogicAnd;
	}
	
	public ParserRule getLogicAndRule() {
		return getLogicAndAccess().getRule();
	}
	
	//BitwiseOR Expression:
	//	BitwiseExclusiveOR ({BinaryExpression.left=current} op='|' right=BitwiseExclusiveOR)*
	public BitwiseORElements getBitwiseORAccess() {
		return pBitwiseOR;
	}
	
	public ParserRule getBitwiseORRule() {
		return getBitwiseORAccess().getRule();
	}
	
	//BitwiseExclusiveOR Expression:
	//	BitwiseAND ({BinaryExpression.left=current} op='^' right=BitwiseAND)*
	public BitwiseExclusiveORElements getBitwiseExclusiveORAccess() {
		return pBitwiseExclusiveOR;
	}
	
	public ParserRule getBitwiseExclusiveORRule() {
		return getBitwiseExclusiveORAccess().getRule();
	}
	
	//BitwiseAND Expression:
	//	EqualityAndInequality ({BinaryExpression.left=current} op='&' right=EqualityAndInequality)*
	public BitwiseANDElements getBitwiseANDAccess() {
		return pBitwiseAND;
	}
	
	public ParserRule getBitwiseANDRule() {
		return getBitwiseANDAccess().getRule();
	}
	
	//EqualityAndInequality Expression:
	//	Comparison ({BinaryExpression.left=current} op=('==' | '!=') right=Comparison)*
	public EqualityAndInequalityElements getEqualityAndInequalityAccess() {
		return pEqualityAndInequality;
	}
	
	public ParserRule getEqualityAndInequalityRule() {
		return getEqualityAndInequalityAccess().getRule();
	}
	
	//Comparison Expression:
	//	BitwiseShifts ({BinaryExpression.left=current} op=('<=' | '>=' | '<' | '>') right=BitwiseShifts)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//BitwiseShifts Expression:
	//	AdditionSubtraction ({BinaryExpression.left=current} op=('<<' | '>>') right=AdditionSubtraction)*
	public BitwiseShiftsElements getBitwiseShiftsAccess() {
		return pBitwiseShifts;
	}
	
	public ParserRule getBitwiseShiftsRule() {
		return getBitwiseShiftsAccess().getRule();
	}
	
	//AdditionSubtraction Expression:
	//	MultiplicationDivisionRemainder ({BinaryExpression.left=current} op=('+' | '-')
	//	right=MultiplicationDivisionRemainder)*
	public AdditionSubtractionElements getAdditionSubtractionAccess() {
		return pAdditionSubtraction;
	}
	
	public ParserRule getAdditionSubtractionRule() {
		return getAdditionSubtractionAccess().getRule();
	}
	
	//MultiplicationDivisionRemainder Expression:
	//	Exponentiation ({BinaryExpression.left=current} op=('*' | '/' | '%') right=Exponentiation)*
	public MultiplicationDivisionRemainderElements getMultiplicationDivisionRemainderAccess() {
		return pMultiplicationDivisionRemainder;
	}
	
	public ParserRule getMultiplicationDivisionRemainderRule() {
		return getMultiplicationDivisionRemainderAccess().getRule();
	}
	
	//Exponentiation Expression:
	//	LogicalAndBitwiseNegation ({BinaryExpression.left=current} op='**' right=Exponentiation)?
	public ExponentiationElements getExponentiationAccess() {
		return pExponentiation;
	}
	
	public ParserRule getExponentiationRule() {
		return getExponentiationAccess().getRule();
	}
	
	//LogicalAndBitwiseNegation Expression:
	//	{PrefixExpression} op=('!' | '~') operand=LogicalAndBitwiseNegation | UnaryMinusAndPlus
	public LogicalAndBitwiseNegationElements getLogicalAndBitwiseNegationAccess() {
		return pLogicalAndBitwiseNegation;
	}
	
	public ParserRule getLogicalAndBitwiseNegationRule() {
		return getLogicalAndBitwiseNegationAccess().getRule();
	}
	
	//UnaryMinusAndPlus Expression:
	//	{PrefixExpression} op=('+' | '-') operand=UnaryMinusAndPlus | PrimaryItem
	public UnaryMinusAndPlusElements getUnaryMinusAndPlusAccess() {
		return pUnaryMinusAndPlus;
	}
	
	public ParserRule getUnaryMinusAndPlusRule() {
		return getUnaryMinusAndPlusAccess().getRule();
	}
	
	//PreDecrement Expression:
	//	{PrefixExpression} op=('++' | '--') operand=PostDecrement | PostDecrement
	public PreDecrementElements getPreDecrementAccess() {
		return pPreDecrement;
	}
	
	public ParserRule getPreDecrementRule() {
		return getPreDecrementAccess().getRule();
	}
	
	//PostDecrement Expression:
	//	VariableId ({SuffixExpression.operand=current} op=('++' | '--'))?
	public PostDecrementElements getPostDecrementAccess() {
		return pPostDecrement;
	}
	
	public ParserRule getPostDecrementRule() {
		return getPostDecrementAccess().getRule();
	}
	
	//PrimaryItem Expression:
	//	{ConstPrimaryItem} prefix=A_PREFIX? value=I_NUMBER | '(' Evaluation ')' | {PrimaryItem} prefix=A_PREFIX?
	//	value=Expansion | PreDecrement
	public PrimaryItemElements getPrimaryItemAccess() {
		return pPrimaryItem;
	}
	
	public ParserRule getPrimaryItemRule() {
		return getPrimaryItemAccess().getRule();
	}
	
	//VariableId:
	//	{VariableId} ref=[Assignment|NAME];
	public VariableIdElements getVariableIdAccess() {
		return pVariableId;
	}
	
	public ParserRule getVariableIdRule() {
		return getVariableIdAccess().getRule();
	}
	
	////Data type tokens
	////############################################################################
	//FunctionName:
	//	S_WORD_PART;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//NewLine:
	//	HereDoc* NEW_LINE;
	public NewLineElements getNewLineAccess() {
		return pNewLine;
	}
	
	public ParserRule getNewLineRule() {
		return getNewLineAccess().getRule();
	}
	
	//ListTerminator:
	//	NewLine | ';';
	public ListTerminatorElements getListTerminatorAccess() {
		return pListTerminator;
	}
	
	public ParserRule getListTerminatorRule() {
		return getListTerminatorAccess().getRule();
	}
	
	//MaybeNewLine:
	//	NewLine?;
	public MaybeNewLineElements getMaybeNewLineAccess() {
		return pMaybeNewLine;
	}
	
	public ParserRule getMaybeNewLineRule() {
		return getMaybeNewLineAccess().getRule();
	}
	
	//HereDoc:
	//	HERE_DOC_START (HERE_DOC_PART | NEW_LINE)* HERE_DOC_END;
	public HereDocElements getHereDocAccess() {
		return pHereDoc;
	}
	
	public ParserRule getHereDocRule() {
		return getHereDocAccess().getRule();
	}
	
	//terminal I_NUMBER:
	//	'0'..'9'+;
	public TerminalRule getI_NUMBERRule() {
		return tI_NUMBER;
	}
	
	//terminal NEW_LINE:
	//	'\r'? '\n';
	public TerminalRule getNEW_LINERule() {
		return tNEW_LINE;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal HIDEN_NEW_LINE:
	//	'__HIDEN_NEW_LINE__';
	public TerminalRule getHIDEN_NEW_LINERule() {
		return tHIDEN_NEW_LINE;
	}
	
	//terminal NAME:
	//	'__NAME__';
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal S_WORD_PART:
	//	'__S_WORD_PART__';
	public TerminalRule getS_WORD_PARTRule() {
		return tS_WORD_PART;
	}
	
	//terminal WORD_PART:
	//	'__WORD_PART__';
	public TerminalRule getWORD_PARTRule() {
		return tWORD_PART;
	}
	
	//terminal SL_COMMENT:
	//	'__SL_COMMENT__';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal VARIABLE:
	//	'__VARIABLE__';
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal A_PREFIX:
	//	'__A_PREFIX__';
	public TerminalRule getA_PREFIXRule() {
		return tA_PREFIX;
	}
	
	//terminal C_S_OP:
	//	'__C_S_OP__';
	public TerminalRule getC_S_OPRule() {
		return tC_S_OP;
	}
	
	//terminal C_B_OP:
	//	'__C_B_OP__';
	public TerminalRule getC_B_OPRule() {
		return tC_B_OP;
	}
	
	//terminal C_LINE:
	//	'__C_LINE__';
	public TerminalRule getC_LINERule() {
		return tC_LINE;
	}
	
	//terminal CS_START:
	//	'__CS_START__';
	public TerminalRule getCS_STARTRule() {
		return tCS_START;
	}
	
	//terminal CS_END:
	//	'__CS_END__';
	public TerminalRule getCS_ENDRule() {
		return tCS_END;
	}
	
	//terminal HERE_DOC_WORD:
	//	'__HERE_DOC_WORD__';
	public TerminalRule getHERE_DOC_WORDRule() {
		return tHERE_DOC_WORD;
	}
	
	//terminal HERE_DOC_START:
	//	'__HERE_DOC_START__';
	public TerminalRule getHERE_DOC_STARTRule() {
		return tHERE_DOC_START;
	}
	
	//terminal HERE_DOC_END:
	//	'__HERE_DOC_END__';
	public TerminalRule getHERE_DOC_ENDRule() {
		return tHERE_DOC_END;
	}
	
	//terminal HERE_DOC_PART:
	//	'__HERE_DOC_PART__';
	public TerminalRule getHERE_DOC_PARTRule() {
		return tHERE_DOC_PART;
	}
}
