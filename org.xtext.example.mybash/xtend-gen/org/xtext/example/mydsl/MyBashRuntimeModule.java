/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl;

import com.google.inject.Binder;
import com.google.inject.binder.AnnotatedBindingBuilder;
import com.google.inject.binder.LinkedBindingBuilder;
import com.google.inject.name.Named;
import com.google.inject.name.Names;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinkingDiagnosticMessageProvider;
import org.eclipse.xtext.parser.antlr.IPartialParsingHelper;
import org.eclipse.xtext.parser.antlr.Lexer;
import org.eclipse.xtext.parser.antlr.LexerBindings;
import org.xtext.example.mydsl.AbstractMyBashRuntimeModule;
import org.xtext.example.mydsl.datatype.MyBashTerminalConverters;
import org.xtext.example.mydsl.lexer.MyBashPartialParsingHelper;
import org.xtext.example.mydsl.lexer.MyInnerLexer;
import org.xtext.example.mydsl.link.MyBashLinkingDiagnosticMessageProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class MyBashRuntimeModule extends AbstractMyBashRuntimeModule {
  public Class<? extends ILinkingDiagnosticMessageProvider> bindILinkingDiagnosticMessageProvider() {
    return MyBashLinkingDiagnosticMessageProvider.class;
  }
  
  @Override
  public Class<? extends Lexer> bindLexer() {
    return MyInnerLexer.class;
  }
  
  @Override
  public void configureRuntimeLexer(final Binder binder) {
    AnnotatedBindingBuilder<Lexer> _bind = binder.<Lexer>bind(Lexer.class);
    Named _named = Names.named(LexerBindings.RUNTIME);
    LinkedBindingBuilder<Lexer> _annotatedWith = _bind.annotatedWith(_named);
    _annotatedWith.to(MyInnerLexer.class);
  }
  
  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return MyBashTerminalConverters.class;
  }
  
  @Override
  public Class<? extends IPartialParsingHelper> bindIPartialParserHelper() {
    return MyBashPartialParsingHelper.class;
  }
}
