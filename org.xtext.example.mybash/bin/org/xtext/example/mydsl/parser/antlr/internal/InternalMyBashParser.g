/*
 * generated by Xtext 2.9.2
 */
parser grammar InternalMyBashParser;

options {
	tokenVocab=InternalMyBashLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyBashGrammarAccess;

}

@members {

 	private MyBashGrammarAccess grammarAccess;

    public InternalMyBashParser(TokenStream input, MyBashGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Bash";
   	}

   	@Override
   	protected MyBashGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBash
entryRuleBash returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBashRule()); }
	iv_ruleBash=ruleBash
	{ $current=$iv_ruleBash.current; }
	EOF;

// Rule Bash
ruleBash returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBashAccess().getBashAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_1());
			}
			ruleMaybeNewLine
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_0_0());
						}
						lv_commands_2_0=ruleSimpleList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBashRule());
							}
							add(
								$current,
								"commands",
								lv_commands_2_0,
								"org.xtext.example.mydsl.MyBash.SimpleList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						newCompositeNode(grammarAccess.getBashAccess().getNewLineParserRuleCall_0_2_1_0());
					}
					ruleNewLine
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getBashAccess().getCommandsSimpleListParserRuleCall_0_2_1_1_0());
							}
							lv_commands_4_0=ruleSimpleList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getBashRule());
								}
								add(
									$current,
									"commands",
									lv_commands_4_0,
									"org.xtext.example.mydsl.MyBash.SimpleList");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				{
					newCompositeNode(grammarAccess.getBashAccess().getMaybeNewLineParserRuleCall_0_2_2());
				}
				ruleMaybeNewLine
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			this_WS_6=RULE_WS
			{
				newLeafNode(this_WS_6, grammarAccess.getBashAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBashAccess().getErrorWordParserRuleCall_1_1_0_0());
						}
						lv_error_7_0=ruleWord
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBashRule());
							}
							set(
								$current,
								"error",
								true,
								"org.xtext.example.mydsl.MyBash.Word");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getBashAccess().getErrorAssignmentParserRuleCall_1_1_1_0());
						}
						lv_error_8_0=ruleAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBashRule());
							}
							set(
								$current,
								"error",
								true,
								"org.xtext.example.mydsl.MyBash.Assignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			this_WS_9=RULE_WS
			{
				newLeafNode(this_WS_9, grammarAccess.getBashAccess().getWSTerminalRuleCall_1_2());
			}
		)
	)
;

// Entry rule entryRuleCompoundList
entryRuleCompoundList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundListRule()); }
	iv_ruleCompoundList=ruleCompoundList
	{ $current=$iv_ruleCompoundList.current; }
	EOF;

// Rule CompoundList
ruleCompoundList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_0());
		}
		ruleMaybeNewLine
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_0_0());
					}
					lv_commands_1_0=ruleSimpleList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompoundListRule());
						}
						add(
							$current,
							"commands",
							lv_commands_1_0,
							"org.xtext.example.mydsl.MyBash.SimpleList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				{
					newCompositeNode(grammarAccess.getCompoundListAccess().getNewLineParserRuleCall_1_1_0());
				}
				ruleNewLine
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCompoundListAccess().getCommandsSimpleListParserRuleCall_1_1_1_0());
						}
						lv_commands_3_0=ruleSimpleList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompoundListRule());
							}
							add(
								$current,
								"commands",
								lv_commands_3_0,
								"org.xtext.example.mydsl.MyBash.SimpleList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			{
				newCompositeNode(grammarAccess.getCompoundListAccess().getMaybeNewLineParserRuleCall_1_2());
			}
			ruleMaybeNewLine
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSimpleList
entryRuleSimpleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleListRule()); }
	iv_ruleSimpleList=ruleSimpleList
	{ $current=$iv_ruleSimpleList.current; }
	EOF;

// Rule SimpleList
ruleSimpleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleListAccess().getPipelineCommandParserRuleCall_0());
		}
		this_PipelineCommand_0=rulePipelineCommand
		{
			$current = $this_PipelineCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSimpleListAccess().getSimpleListLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						(
							(
								lv_op_2_1=AmpersandAmpersand
								{
									newLeafNode(lv_op_2_1, grammarAccess.getSimpleListAccess().getOpAmpersandAmpersandKeyword_1_1_0_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getSimpleListRule());
									}
									setWithLastConsumed($current, "op", lv_op_2_1, null);
								}
								    |
								lv_op_2_2=VerticalLineVerticalLine
								{
									newLeafNode(lv_op_2_2, grammarAccess.getSimpleListAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_0_0_1());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getSimpleListRule());
									}
									setWithLastConsumed($current, "op", lv_op_2_2, null);
								}
							)
						)
					)
					{
						newCompositeNode(grammarAccess.getSimpleListAccess().getMaybeNewLineParserRuleCall_1_1_0_1());
					}
					ruleMaybeNewLine
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				(
					(
						(
							lv_op_4_1=Ampersand
							{
								newLeafNode(lv_op_4_1, grammarAccess.getSimpleListAccess().getOpAmpersandKeyword_1_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSimpleListRule());
								}
								setWithLastConsumed($current, "op", lv_op_4_1, null);
							}
							    |
							lv_op_4_2=Semicolon
							{
								newLeafNode(lv_op_4_2, grammarAccess.getSimpleListAccess().getOpSemicolonKeyword_1_1_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSimpleListRule());
								}
								setWithLastConsumed($current, "op", lv_op_4_2, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleListAccess().getRightPipelineCommandParserRuleCall_1_2_0());
					}
					lv_right_5_0=rulePipelineCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleListRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.example.mydsl.MyBash.PipelineCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				(
					lv_backend_6_0=Ampersand
					{
						newLeafNode(lv_backend_6_0, grammarAccess.getSimpleListAccess().getBackendAmpersandKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleListRule());
						}
						setWithLastConsumed($current, "backend", true, "&");
					}
				)
			)
			    |
			otherlv_7=Semicolon
			{
				newLeafNode(otherlv_7, grammarAccess.getSimpleListAccess().getSemicolonKeyword_2_1());
			}
		)?
	)
;

// Entry rule entryRulePipelineCommand
entryRulePipelineCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineCommandRule()); }
	iv_rulePipelineCommand=rulePipelineCommand
	{ $current=$iv_rulePipelineCommand.current; }
	EOF;

// Rule PipelineCommand
rulePipelineCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPipelineCommandAccess().getPipelineCommandAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_not_1_0=ExclamationMark
					{
						newLeafNode(lv_not_1_0, grammarAccess.getPipelineCommandAccess().getNotExclamationMarkKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPipelineCommandRule());
						}
						setWithLastConsumed($current, "not", true, "!");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPipelineCommandAccess().getPipelinePipelineParserRuleCall_0_2_0());
					}
					lv_pipeline_2_0=rulePipeline
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPipelineCommandRule());
						}
						set(
							$current,
							"pipeline",
							lv_pipeline_2_0,
							"org.xtext.example.mydsl.MyBash.Pipeline");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPipelineCommandAccess().getPipelineParserRuleCall_1());
		}
		this_Pipeline_3=rulePipeline
		{
			$current = $this_Pipeline_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePipeline
entryRulePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineRule()); }
	iv_rulePipeline=rulePipeline
	{ $current=$iv_rulePipeline.current; }
	EOF;

// Rule Pipeline
rulePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPipelineAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPipelineAccess().getPipelineLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=VerticalLine
						{
							newLeafNode(lv_op_2_1, grammarAccess.getPipelineAccess().getOpVerticalLineKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPipelineRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=VerticalLineAmpersand
						{
							newLeafNode(lv_op_2_2, grammarAccess.getPipelineAccess().getOpVerticalLineAmpersandKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPipelineRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getPipelineAccess().getMaybeNewLineParserRuleCall_1_2());
			}
			ruleMaybeNewLine
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPipelineAccess().getRightCommandParserRuleCall_1_3_0());
					}
					lv_right_4_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPipelineRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.mydsl.MyBash.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getFunctionDefineParserRuleCall_0());
		}
		this_FunctionDefine_0=ruleFunctionDefine
		{
			$current = $this_FunctionDefine_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_1());
		}
		this_SimpleCommand_1=ruleSimpleCommand
		{
			$current = $this_SimpleCommand_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getShellCommandParserRuleCall_2_0());
			}
			this_ShellCommand_2=ruleShellCommand
			{
				$current = $this_ShellCommand_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getRedirectsRedirectionParserRuleCall_2_1_0());
					}
					lv_redirects_3_0=ruleRedirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"redirects",
							lv_redirects_3_0,
							"org.xtext.example.mydsl.MyBash.Redirection");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleFunctionDefine
entryRuleFunctionDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefineRule()); }
	iv_ruleFunctionDefine=ruleFunctionDefine
	{ $current=$iv_ruleFunctionDefine.current; }
	EOF;

// Rule FunctionDefine
ruleFunctionDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_0_0(),
						$current);
				}
			)
			otherlv_1=Function
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionDefineAccess().getFunctionKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_0_2_0());
					}
					lv_name_2_0=ruleFunctionName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefineRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"org.xtext.example.mydsl.MyBash.FunctionName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						(LeftParenthesis)=>
						otherlv_3=LeftParenthesis
						{
							newLeafNode(otherlv_3, grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_0_3_0_0());
						}
					)
					otherlv_4=RightParenthesis
					{
						newLeafNode(otherlv_4, grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_0_3_0_1());
					}
				)?
				{
					newCompositeNode(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_0_3_1());
				}
				ruleMaybeNewLine
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_0_4_0());
					}
					lv_body_6_0=ruleShellCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefineRule());
						}
						set(
							$current,
							"body",
							lv_body_6_0,
							"org.xtext.example.mydsl.MyBash.ShellCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionDefineAccess().getFunctionDefineAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefineAccess().getNameFunctionNameParserRuleCall_1_1_0());
					}
					lv_name_8_0=ruleFunctionName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefineRule());
						}
						set(
							$current,
							"name",
							lv_name_8_0,
							"org.xtext.example.mydsl.MyBash.FunctionName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=LeftParenthesis
				{
					newLeafNode(otherlv_9, grammarAccess.getFunctionDefineAccess().getLeftParenthesisKeyword_1_2_0());
				}
				otherlv_10=RightParenthesis
				{
					newLeafNode(otherlv_10, grammarAccess.getFunctionDefineAccess().getRightParenthesisKeyword_1_2_1());
				}
				{
					newCompositeNode(grammarAccess.getFunctionDefineAccess().getMaybeNewLineParserRuleCall_1_2_2());
				}
				ruleMaybeNewLine
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefineAccess().getBodyShellCommandParserRuleCall_1_3_0());
					}
					lv_body_12_0=ruleShellCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefineRule());
						}
						set(
							$current,
							"body",
							lv_body_12_0,
							"org.xtext.example.mydsl.MyBash.ShellCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSimpleCommand
entryRuleSimpleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleCommandRule()); }
	iv_ruleSimpleCommand=ruleSimpleCommand
	{ $current=$iv_ruleSimpleCommand.current; }
	EOF;

// Rule SimpleCommand
ruleSimpleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleCommandAccess().getAssignmentsAssignmentParserRuleCall_0_0_0());
					}
					lv_assignments_0_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_0_0,
							"org.xtext.example.mydsl.MyBash.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_0_1_0_0());
						}
						lv_command_1_0=ruleCommandName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
							}
							set(
								$current,
								"command",
								lv_command_1_0,
								"org.xtext.example.mydsl.MyBash.CommandName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_0_1_1_0_0());
							}
							lv_parameters_2_0=ruleWord
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_2_0,
									"org.xtext.example.mydsl.MyBash.Word");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_0_1_1_1_0());
							}
							lv_r_3_0=ruleRedirection
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
								}
								add(
									$current,
									"r",
									lv_r_3_0,
									"org.xtext.example.mydsl.MyBash.Redirection");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleCommandAccess().getCommandCommandNameParserRuleCall_1_0_0());
					}
					lv_command_4_0=ruleCommandName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
						}
						set(
							$current,
							"command",
							lv_command_4_0,
							"org.xtext.example.mydsl.MyBash.CommandName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleCommandAccess().getParametersWordParserRuleCall_1_1_0_0_0());
							}
							lv_parameters_5_1=ruleWord
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_1,
									"org.xtext.example.mydsl.MyBash.Word");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getSimpleCommandAccess().getParametersLAssignmentParserRuleCall_1_1_0_0_1());
							}
							lv_parameters_5_2=ruleLAssignment
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_2,
									"org.xtext.example.mydsl.MyBash.LAssignment");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_1_1_1_0());
						}
						lv_r_6_0=ruleRedirection
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
							}
							add(
								$current,
								"r",
								lv_r_6_0,
								"org.xtext.example.mydsl.MyBash.Redirection");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleCommandAccess().getRRedirectionParserRuleCall_2_0());
				}
				lv_r_7_0=ruleRedirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleCommandRule());
					}
					add(
						$current,
						"r",
						lv_r_7_0,
						"org.xtext.example.mydsl.MyBash.Redirection");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleShellCommand
entryRuleShellCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShellCommandRule()); }
	iv_ruleShellCommand=ruleShellCommand
	{ $current=$iv_ruleShellCommand.current; }
	EOF;

// Rule ShellCommand
ruleShellCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getGroupCommandParserRuleCall_0());
		}
		this_GroupCommand_0=ruleGroupCommand
		{
			$current = $this_GroupCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getIfStatementParserRuleCall_1());
		}
		this_IfStatement_1=ruleIfStatement
		{
			$current = $this_IfStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getWhileStatementParserRuleCall_2());
		}
		this_WhileStatement_2=ruleWhileStatement
		{
			$current = $this_WhileStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getForStatementParserRuleCall_3());
		}
		this_ForStatement_3=ruleForStatement
		{
			$current = $this_ForStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getCaseStatementParserRuleCall_4());
		}
		this_CaseStatement_4=ruleCaseStatement
		{
			$current = $this_CaseStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getSubshellParserRuleCall_5());
		}
		this_Subshell_5=ruleSubshell
		{
			$current = $this_Subshell_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getCondCommandParserRuleCall_6());
		}
		this_CondCommand_6=ruleCondCommand
		{
			$current = $this_CondCommand_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShellCommandAccess().getArithmeticCommandParserRuleCall_7());
		}
		this_ArithmeticCommand_7=ruleArithmeticCommand
		{
			$current = $this_ArithmeticCommand_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGroupCommand
entryRuleGroupCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupCommandRule()); }
	iv_ruleGroupCommand=ruleGroupCommand
	{ $current=$iv_ruleGroupCommand.current; }
	EOF;

// Rule GroupCommand
ruleGroupCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGroupCommandAccess().getGroupCommandAction_0(),
					$current);
			}
		)
		otherlv_1=LeftCurlyBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getGroupCommandAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupCommandAccess().getBodyCompoundListParserRuleCall_2_0());
				}
				lv_body_2_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupCommandRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightCurlyBracket
		{
			newLeafNode(otherlv_3, grammarAccess.getGroupCommandAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCondCommand
entryRuleCondCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondCommandRule()); }
	iv_ruleCondCommand=ruleCondCommand
	{ $current=$iv_ruleCondCommand.current; }
	EOF;

// Rule CondCommand
ruleCondCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftSquareBracketLeftSquareBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getCondCommandAccess().getLeftSquareBracketLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCondCommandAccess().getExpressionCondOrAndParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleCondOrAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyBash.CondOrAnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=RightSquareBracketRightSquareBracket
		{
			newLeafNode(otherlv_2, grammarAccess.getCondCommandAccess().getRightSquareBracketRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleArithmeticCommand
entryRuleArithmeticCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticCommandRule()); }
	iv_ruleArithmeticCommand=ruleArithmeticCommand
	{ $current=$iv_ruleArithmeticCommand.current; }
	EOF;

// Rule ArithmeticCommand
ruleArithmeticCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesisLeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getArithmeticCommandAccess().getLeftParenthesisLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticCommandAccess().getExpressionEvaluationParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticCommandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyBash.Evaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=RightParenthesisRightParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getArithmeticCommandAccess().getRightParenthesisRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleSubshell
entryRuleSubshell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubshellRule()); }
	iv_ruleSubshell=ruleSubshell
	{ $current=$iv_ruleSubshell.current; }
	EOF;

// Rule Subshell
ruleSubshell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getSubshellAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubshellAccess().getBodyCompoundListParserRuleCall_1_0());
				}
				lv_body_1_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubshellRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=RightParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getSubshellAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleCommandName
entryRuleCommandName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandNameRule()); }
	iv_ruleCommandName=ruleCommandName
	{ $current=$iv_ruleCommandName.current; }
	EOF;

// Rule CommandName
ruleCommandName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandNameAccess().getCommandNameAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommandNameRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getCommandNameAccess().getRefFunctionDefineCrossReference_0_1_0());
					}
					ruleFunctionName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandNameAccess().getWordsParserRuleCall_1());
		}
		this_Words_2=ruleWords
		{
			$current = $this_Words_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	iv_ruleCaseStatement=ruleCaseStatement
	{ $current=$iv_ruleCaseStatement.current; }
	EOF;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCaseStatementAccess().getCaseStatementAction_0(),
					$current);
			}
		)
		otherlv_1=Case
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseStatementAccess().getCaseKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getVariableWordParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"org.xtext.example.mydsl.MyBash.Word");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_3());
		}
		ruleMaybeNewLine
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4=In
		{
			newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getInKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_5());
		}
		ruleMaybeNewLine
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getPatternsCasePatternParserRuleCall_6_0_0());
					}
					lv_patterns_6_0=ruleCasePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_6_0,
							"org.xtext.example.mydsl.MyBash.CasePattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getPatternsCasePatternContinueParserRuleCall_6_1_0());
					}
					lv_patterns_7_0=ruleCasePatternContinue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_7_0,
							"org.xtext.example.mydsl.MyBash.CasePatternContinue");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					otherlv_8=SemicolonSemicolon
					{
						newLeafNode(otherlv_8, grammarAccess.getCaseStatementAccess().getSemicolonSemicolonKeyword_6_2_0_0());
					}
					    |
					otherlv_9=SemicolonAmpersand
					{
						newLeafNode(otherlv_9, grammarAccess.getCaseStatementAccess().getSemicolonAmpersandKeyword_6_2_0_1());
					}
					    |
					otherlv_10=SemicolonSemicolonAmpersand
					{
						newLeafNode(otherlv_10, grammarAccess.getCaseStatementAccess().getSemicolonSemicolonAmpersandKeyword_6_2_0_2());
					}
				)
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getMaybeNewLineParserRuleCall_6_2_1());
				}
				ruleMaybeNewLine
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)?
		otherlv_12=Esac
		{
			newLeafNode(otherlv_12, grammarAccess.getCaseStatementAccess().getEsacKeyword_7());
		}
	)
;

// Entry rule entryRuleCasePattern
entryRuleCasePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCasePatternRule()); }
	iv_ruleCasePattern=ruleCasePattern
	{ $current=$iv_ruleCasePattern.current; }
	EOF;

// Rule CasePattern
ruleCasePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getCasePatternAccess().getLeftParenthesisKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCasePatternAccess().getConditionPatternParserRuleCall_1_0());
				}
				lv_condition_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCasePatternRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtext.example.mydsl.MyBash.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=RightParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getCasePatternAccess().getRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCasePatternAccess().getBodyCompoundListParserRuleCall_3_0());
				}
				lv_body_3_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCasePatternRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCasePatternContinue
entryRuleCasePatternContinue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCasePatternContinueRule()); }
	iv_ruleCasePatternContinue=ruleCasePatternContinue
	{ $current=$iv_ruleCasePatternContinue.current; }
	EOF;

// Rule CasePatternContinue
ruleCasePatternContinue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						lv_follow_0_1=SemicolonSemicolon
						{
							newLeafNode(lv_follow_0_1, grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonKeyword_0_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCasePatternContinueRule());
							}
							setWithLastConsumed($current, "follow", lv_follow_0_1, null);
						}
						    |
						lv_follow_0_2=SemicolonAmpersand
						{
							newLeafNode(lv_follow_0_2, grammarAccess.getCasePatternContinueAccess().getFollowSemicolonAmpersandKeyword_0_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCasePatternContinueRule());
							}
							setWithLastConsumed($current, "follow", lv_follow_0_2, null);
						}
						    |
						lv_follow_0_3=SemicolonSemicolonAmpersand
						{
							newLeafNode(lv_follow_0_3, grammarAccess.getCasePatternContinueAccess().getFollowSemicolonSemicolonAmpersandKeyword_0_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCasePatternContinueRule());
							}
							setWithLastConsumed($current, "follow", lv_follow_0_3, null);
						}
					)
				)
			)
			{
				newCompositeNode(grammarAccess.getCasePatternContinueAccess().getMaybeNewLineParserRuleCall_0_1());
			}
			ruleMaybeNewLine
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_2=LeftParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getCasePatternContinueAccess().getLeftParenthesisKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCasePatternContinueAccess().getConditionPatternParserRuleCall_2_0());
				}
				lv_condition_3_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCasePatternContinueRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"org.xtext.example.mydsl.MyBash.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getCasePatternContinueAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCasePatternContinueAccess().getBodyCompoundListParserRuleCall_4_0());
				}
				lv_body_5_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCasePatternContinueRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_0_0());
				}
				lv_parts_0_0=ruleWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					add(
						$current,
						"parts",
						lv_parts_0_0,
						"org.xtext.example.mydsl.MyBash.Word");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=VerticalLine
			{
				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getVerticalLineKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getPartsWordParserRuleCall_1_1_0());
					}
					lv_parts_2_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						add(
							$current,
							"parts",
							lv_parts_2_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1=If
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionCompoundListParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Then
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getThenKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenCompoundListParserRuleCall_4_0());
				}
				lv_then_4_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfBlockElseIfBlockParserRuleCall_5_0());
				}
				lv_elseIfBlock_5_0=ruleElseIfBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"elseIfBlock",
						lv_elseIfBlock_5_0,
						"org.xtext.example.mydsl.MyBash.ElseIfBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_6=Else
			{
				newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseCompoundListParserRuleCall_6_1_0());
					}
					lv_else_7_0=ruleCompoundList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"else",
							lv_else_7_0,
							"org.xtext.example.mydsl.MyBash.CompoundList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=Fi
		{
			newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getFiKeyword_7());
		}
	)
;

// Entry rule entryRuleElseIfBlock
entryRuleElseIfBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfBlockRule()); }
	iv_ruleElseIfBlock=ruleElseIfBlock
	{ $current=$iv_ruleElseIfBlock.current; }
	EOF;

// Rule ElseIfBlock
ruleElseIfBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseIfBlockAccess().getElseIfBlockAction_0(),
					$current);
			}
		)
		otherlv_1=Elif
		{
			newLeafNode(otherlv_1, grammarAccess.getElseIfBlockAccess().getElifKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfBlockAccess().getConditionCompoundListParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfBlockRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Then
		{
			newLeafNode(otherlv_3, grammarAccess.getElseIfBlockAccess().getThenKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfBlockAccess().getThenCompoundListParserRuleCall_4_0());
				}
				lv_then_4_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfBlockRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=For
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		(
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getForStatementAccess().getArithmeticForStatementAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=LeftParenthesisLeftParenthesis
				{
					newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftParenthesisLeftParenthesisKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForStatementAccess().getInitEvaluationParserRuleCall_1_0_2_0());
						}
						lv_init_3_0=ruleEvaluation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForStatementRule());
							}
							set(
								$current,
								"init",
								lv_init_3_0,
								"org.xtext.example.mydsl.MyBash.Evaluation");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_4=Semicolon
				{
					newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForStatementAccess().getConditionEvaluationParserRuleCall_1_0_4_0());
						}
						lv_condition_5_0=ruleEvaluation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForStatementRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"org.xtext.example.mydsl.MyBash.Evaluation");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_6=Semicolon
				{
					newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getSemicolonKeyword_1_0_5());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForStatementAccess().getStepEvaluationParserRuleCall_1_0_6_0());
						}
						lv_step_7_0=ruleEvaluation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForStatementRule());
							}
							set(
								$current,
								"step",
								lv_step_7_0,
								"org.xtext.example.mydsl.MyBash.Evaluation");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_8=RightParenthesisRightParenthesis
				{
					newLeafNode(otherlv_8, grammarAccess.getForStatementAccess().getRightParenthesisRightParenthesisKeyword_1_0_7());
				}
				(
					{
						newCompositeNode(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_0_8_0());
					}
					ruleListTerminator
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_0_8_1());
					}
					ruleMaybeNewLine
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getForStatementAccess().getForStatementAction_1_1_0(),
							$current);
					}
				)
				(
					(
						lv_variable_12_0=RULE_NAME
						{
							newLeafNode(lv_variable_12_0, grammarAccess.getForStatementAccess().getVariableNAMETerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getForStatementRule());
							}
							setWithLastConsumed(
								$current,
								"variable",
								lv_variable_12_0,
								"org.xtext.example.mydsl.MyBash.NAME");
						}
					)
				)
				otherlv_13=In
				{
					newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getInKeyword_1_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForStatementAccess().getWordsWordParserRuleCall_1_1_3_0());
						}
						lv_words_14_0=ruleWord
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForStatementRule());
							}
							add(
								$current,
								"words",
								lv_words_14_0,
								"org.xtext.example.mydsl.MyBash.Word");
							afterParserOrEnumRuleCall();
						}
					)
				)+
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getListTerminatorParserRuleCall_1_1_4());
				}
				ruleListTerminator
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getMaybeNewLineParserRuleCall_1_1_5());
				}
				ruleMaybeNewLine
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17=Do
		{
			newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getBodyCompoundListParserRuleCall_3_0());
				}
				lv_body_18_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_18_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_19=Done
		{
			newLeafNode(otherlv_19, grammarAccess.getForStatementAccess().getDoneKeyword_4());
		}
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=While
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getCCompoundListParserRuleCall_1_0());
				}
				lv_c_1_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"c",
						lv_c_1_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Do
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getDCompoundListParserRuleCall_3_0());
				}
				lv_d_3_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"d",
						lv_d_3_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=Done
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getDoneKeyword_4());
		}
	)
;

// Entry rule entryRuleRedirection
entryRuleRedirection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRedirectionRule()); }
	iv_ruleRedirection=ruleRedirection
	{ $current=$iv_ruleRedirection.current; }
	EOF;

// Rule Redirection
ruleRedirection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRedirectionAccess().getRedirectionAction_0(),
					$current);
			}
		)
		(
			(
				(
					this_I_NUMBER_1=RULE_I_NUMBER
					{
						newLeafNode(this_I_NUMBER_1, grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_0());
					}
				)?
				(
					(
						(
							lv_op_2_1=GreaterThanSignAmpersand
							{
								newLeafNode(lv_op_2_1, grammarAccess.getRedirectionAccess().getOpGreaterThanSignAmpersandKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2=GreaterThanSign
							{
								newLeafNode(lv_op_2_2, grammarAccess.getRedirectionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3=GreaterThanSignGreaterThanSign
							{
								newLeafNode(lv_op_2_3, grammarAccess.getRedirectionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4=LessThanSign
							{
								newLeafNode(lv_op_2_4, grammarAccess.getRedirectionAccess().getOpLessThanSignKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
							    |
							lv_op_2_5=LessThanSignAmpersand
							{
								newLeafNode(lv_op_2_5, grammarAccess.getRedirectionAccess().getOpLessThanSignAmpersandKeyword_1_0_1_0_4());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_5, null);
							}
							    |
							lv_op_2_6=AmpersandGreaterThanSignGreaterThanSign
							{
								newLeafNode(lv_op_2_6, grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignGreaterThanSignKeyword_1_0_1_0_5());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_6, null);
							}
							    |
							lv_op_2_7=LessThanSignGreaterThanSign
							{
								newLeafNode(lv_op_2_7, grammarAccess.getRedirectionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_6());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_7, null);
							}
							    |
							lv_op_2_8=AmpersandGreaterThanSign
							{
								newLeafNode(lv_op_2_8, grammarAccess.getRedirectionAccess().getOpAmpersandGreaterThanSignKeyword_1_0_1_0_7());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_8, null);
							}
							    |
							lv_op_2_9=LessThanSignVerticalLine
							{
								newLeafNode(lv_op_2_9, grammarAccess.getRedirectionAccess().getOpLessThanSignVerticalLineKeyword_1_0_1_0_8());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_9, null);
							}
							    |
							lv_op_2_10=GreaterThanSignVerticalLine
							{
								newLeafNode(lv_op_2_10, grammarAccess.getRedirectionAccess().getOpGreaterThanSignVerticalLineKeyword_1_0_1_0_9());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRedirectionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_10, null);
							}
						)
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getRedirectionAccess().getTargetWordParserRuleCall_1_0_2_0_0());
							}
							lv_target_3_0=ruleWord
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRedirectionRule());
								}
								set(
									$current,
									"target",
									lv_target_3_0,
									"org.xtext.example.mydsl.MyBash.Word");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					this_I_NUMBER_4=RULE_I_NUMBER
					{
						newLeafNode(this_I_NUMBER_4, grammarAccess.getRedirectionAccess().getI_NUMBERTerminalRuleCall_1_0_2_1());
					}
				)
			)
			    |
			(
				(
					(
						lv_op_5_0=LessThanSignLessThanSign
						{
							newLeafNode(lv_op_5_0, grammarAccess.getRedirectionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRedirectionRule());
							}
							setWithLastConsumed($current, "op", lv_op_5_0, "<<");
						}
					)
				)
				this_HERE_DOC_WORD_6=RULE_HERE_DOC_WORD
				{
					newLeafNode(this_HERE_DOC_WORD_6, grammarAccess.getRedirectionAccess().getHERE_DOC_WORDTerminalRuleCall_1_1_1());
				}
			)
		)
	)
;

// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_ruleArray=ruleArray
	{ $current=$iv_ruleArray.current; }
	EOF;

// Rule Array
ruleArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArrayAccess().getArrayStartParserRuleCall_0());
		}
		this_ArrayStart_0=ruleArrayStart
		{
			$current = $this_ArrayStart_0.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getArrayAccess().getArrayEndParserRuleCall_1());
		}
		ruleArrayEnd
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayStart
entryRuleArrayStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getArrayStartRule()); }
	iv_ruleArrayStart=ruleArrayStart
	{ $current=$iv_ruleArrayStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ArrayStart
ruleArrayStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayStartAccess().getArrayAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayStartAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_2_0());
			}
			ruleMaybeNewLine
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayStartAccess().getWordsWordParserRuleCall_2_1_0());
					}
					lv_words_3_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayStartRule());
						}
						add(
							$current,
							"words",
							lv_words_3_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		{
			newCompositeNode(grammarAccess.getArrayStartAccess().getMaybeNewLineParserRuleCall_3());
		}
		ruleMaybeNewLine
		{
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArrayEnd
entryRuleArrayEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getArrayEndRule()); }
	iv_ruleArrayEnd=ruleArrayEnd
	{ $current=$iv_ruleArrayEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ArrayEnd
ruleArrayEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	kw=RightParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getArrayEndAccess().getRightParenthesisKeyword());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	iv_ruleWord=ruleWord
	{ $current=$iv_ruleWord.current; }
	EOF;

// Rule Word
ruleWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWordAccess().getWordsParserRuleCall_0());
		}
		this_Words_0=ruleWords
		{
			$current = $this_Words_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getWordAccess().getElementsLiteralWordParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleLiteralWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWordRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"org.xtext.example.mydsl.MyBash.LiteralWord");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteralWord
entryRuleLiteralWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralWordRule()); }
	iv_ruleLiteralWord=ruleLiteralWord
	{ $current=$iv_ruleLiteralWord.current; }
	EOF;

// Rule LiteralWord
ruleLiteralWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralWordAccess().getLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_values_1_0=RULE_S_WORD_PART
				{
					newLeafNode(lv_values_1_0, grammarAccess.getLiteralWordAccess().getValuesS_WORD_PARTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralWordRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.example.mydsl.MyBash.S_WORD_PART");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAssignmentAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl.MyBash.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0());
				}
				lv_index_1_0=ruleIndexEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"index",
						lv_index_1_0,
						"org.xtext.example.mydsl.MyBash.IndexEvaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=EqualsSign
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2());
		}
		(
			(Apostrophe | QuotationMark | DollarSignLeftCurlyBracket | DollarSignLeftParenthesisLeftParenthesis | LessThanSignLeftParenthesis | GreaterThanSignLeftParenthesis | LeftParenthesis | RULE_WORD_PART | RULE_VARIABLE | RULE_CS_START | RULE_S_WORD_PART)=>
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueAssignableParserRuleCall_3_0());
				}
				lv_value_3_0=ruleAssignable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydsl.MyBash.Assignable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLAssignment
entryRuleLAssignment returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getLAssignmentRule()); }
	iv_ruleLAssignment=ruleLAssignment
	{ $current=$iv_ruleLAssignment.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LAssignment
ruleLAssignment returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLAssignmentAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl.MyBash.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLAssignmentAccess().getIndexIndexEvaluationParserRuleCall_1_0());
				}
				lv_index_1_0=ruleIndexEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLAssignmentRule());
					}
					set(
						$current,
						"index",
						lv_index_1_0,
						"org.xtext.example.mydsl.MyBash.IndexEvaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_2=EqualsSign
			{
				newLeafNode(otherlv_2, grammarAccess.getLAssignmentAccess().getEqualsSignKeyword_2_0());
			}
			(
				(Apostrophe | QuotationMark | DollarSignLeftCurlyBracket | DollarSignLeftParenthesisLeftParenthesis | LessThanSignLeftParenthesis | GreaterThanSignLeftParenthesis | LeftParenthesis | RULE_WORD_PART | RULE_VARIABLE | RULE_CS_START | RULE_S_WORD_PART)=>
				(
					{
						newCompositeNode(grammarAccess.getLAssignmentAccess().getValueAssignableParserRuleCall_2_1_0());
					}
					lv_value_3_0=ruleAssignable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLAssignmentRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"org.xtext.example.mydsl.MyBash.Assignable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignable
entryRuleAssignable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignableRule()); }
	iv_ruleAssignable=ruleAssignable
	{ $current=$iv_ruleAssignable.current; }
	EOF;

// Rule Assignable
ruleAssignable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignableAccess().getWordParserRuleCall_0());
		}
		this_Word_0=ruleWord
		{
			$current = $this_Word_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssignableAccess().getArrayParserRuleCall_1());
		}
		this_Array_1=ruleArray
		{
			$current = $this_Array_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWords
entryRuleWords returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getWordsRule()); }
	iv_ruleWords=ruleWords
	{ $current=$iv_ruleWords.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Words
ruleWords returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	(
		(Apostrophe | QuotationMark | DollarSignLeftCurlyBracket | DollarSignLeftParenthesisLeftParenthesis | LessThanSignLeftParenthesis | GreaterThanSignLeftParenthesis | RULE_WORD_PART | RULE_VARIABLE | RULE_CS_START)=>
		(
			{
				newCompositeNode(grammarAccess.getWordsAccess().getElementsWordElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleWordElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getWordsRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.MyBash.WordElement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDQString
entryRuleDQString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDQStringRule()); }
	iv_ruleDQString=ruleDQString
	{ $current=$iv_ruleDQString.current; }
	EOF;

// Rule DQString
ruleDQString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDQStringAccess().getDQStringAction_0(),
					$current);
			}
		)
		otherlv_1=QuotationMark
		{
			newLeafNode(otherlv_1, grammarAccess.getDQStringAccess().getQuotationMarkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDQStringAccess().getElementsStringElementParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleStringElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDQStringRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"org.xtext.example.mydsl.MyBash.StringElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=QuotationMark
		{
			newLeafNode(otherlv_3, grammarAccess.getDQStringAccess().getQuotationMarkKeyword_3());
		}
	)
;

// Entry rule entryRuleExpansion
entryRuleExpansion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpansionRule()); }
	iv_ruleExpansion=ruleExpansion
	{ $current=$iv_ruleExpansion.current; }
	EOF;

// Rule Expansion
ruleExpansion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpansionAccess().getParameterExpansionParserRuleCall_0());
		}
		this_ParameterExpansion_0=ruleParameterExpansion
		{
			$current = $this_ParameterExpansion_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpansionAccess().getCommandSubstitutionParserRuleCall_1());
		}
		this_CommandSubstitution_1=ruleCommandSubstitution
		{
			$current = $this_CommandSubstitution_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpansionAccess().getArithmeticExpansionParserRuleCall_2());
		}
		this_ArithmeticExpansion_2=ruleArithmeticExpansion
		{
			$current = $this_ArithmeticExpansion_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpansionAccess().getProcessSubstitutionParserRuleCall_3());
		}
		this_ProcessSubstitution_3=ruleProcessSubstitution
		{
			$current = $this_ProcessSubstitution_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWordElement
entryRuleWordElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordElementRule()); }
	iv_ruleWordElement=ruleWordElement
	{ $current=$iv_ruleWordElement.current; }
	EOF;

// Rule WordElement
ruleWordElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleLiteralWordPart)=>
			{
				newCompositeNode(grammarAccess.getWordElementAccess().getLiteralWordPartParserRuleCall_0());
			}
			this_LiteralWordPart_0=ruleLiteralWordPart
			{
				$current = $this_LiteralWordPart_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getWordElementAccess().getDQStringParserRuleCall_1());
		}
		this_DQString_1=ruleDQString
		{
			$current = $this_DQString_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWordElementAccess().getExpansionParserRuleCall_2());
		}
		this_Expansion_2=ruleExpansion
		{
			$current = $this_Expansion_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringElement
entryRuleStringElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringElementRule()); }
	iv_ruleStringElement=ruleStringElement
	{ $current=$iv_ruleStringElement.current; }
	EOF;

// Rule StringElement
ruleStringElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringElementAccess().getLiteralStringPartParserRuleCall_0());
		}
		this_LiteralStringPart_0=ruleLiteralStringPart
		{
			$current = $this_LiteralStringPart_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringElementAccess().getExpansionParserRuleCall_1());
		}
		this_Expansion_1=ruleExpansion
		{
			$current = $this_Expansion_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralStringPart
entryRuleLiteralStringPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralStringPartRule()); }
	iv_ruleLiteralStringPart=ruleLiteralStringPart
	{ $current=$iv_ruleLiteralStringPart.current; }
	EOF;

// Rule LiteralStringPart
ruleLiteralStringPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralStringPartAccess().getLiteralAction_0(),
					$current);
			}
		)
		(
			((
				RULE_WORD_PART
			)
			)=>
			(
				lv_values_1_0=RULE_WORD_PART
				{
					newLeafNode(lv_values_1_0, grammarAccess.getLiteralStringPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralStringPartRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.example.mydsl.MyBash.WORD_PART");
				}
			)
		)+
	)
;

// Entry rule entryRuleLiteralWordPart
entryRuleLiteralWordPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralWordPartRule()); }
	iv_ruleLiteralWordPart=ruleLiteralWordPart
	{ $current=$iv_ruleLiteralWordPart.current; }
	EOF;

// Rule LiteralWordPart
ruleLiteralWordPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralWordPartAccess().getLiteralAction_0(),
					$current);
			}
		)
		(
			((
				(
					(
						RULE_WORD_PART
					)
				)
				    |
				(
					Apostrophe
					(
						(
							RULE_WORD_PART
						)
					)?
					Apostrophe
				)
				    |
				(
					QuotationMark
					(
						(
							RULE_WORD_PART
						)
					)*
					QuotationMark
				)
			)
			)=>
			(
				(
					(
						lv_values_1_0=RULE_WORD_PART
						{
							newLeafNode(lv_values_1_0, grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralWordPartRule());
							}
							addWithLastConsumed(
								$current,
								"values",
								lv_values_1_0,
								"org.xtext.example.mydsl.MyBash.WORD_PART");
						}
					)
				)
				    |
				(
					otherlv_2=Apostrophe
					{
						newLeafNode(otherlv_2, grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_0());
					}
					(
						(
							lv_values_3_0=RULE_WORD_PART
							{
								newLeafNode(lv_values_3_0, grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getLiteralWordPartRule());
								}
								addWithLastConsumed(
									$current,
									"values",
									lv_values_3_0,
									"org.xtext.example.mydsl.MyBash.WORD_PART");
							}
						)
					)?
					otherlv_4=Apostrophe
					{
						newLeafNode(otherlv_4, grammarAccess.getLiteralWordPartAccess().getApostropheKeyword_1_0_1_2());
					}
				)
				    |
				(
					otherlv_5=QuotationMark
					{
						newLeafNode(otherlv_5, grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_0());
					}
					(
						(
							lv_values_6_0=RULE_WORD_PART
							{
								newLeafNode(lv_values_6_0, grammarAccess.getLiteralWordPartAccess().getValuesWORD_PARTTerminalRuleCall_1_0_2_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getLiteralWordPartRule());
								}
								addWithLastConsumed(
									$current,
									"values",
									lv_values_6_0,
									"org.xtext.example.mydsl.MyBash.WORD_PART");
							}
						)
					)*
					otherlv_7=QuotationMark
					{
						newLeafNode(otherlv_7, grammarAccess.getLiteralWordPartAccess().getQuotationMarkKeyword_1_0_2_2());
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleCondOrAnd
entryRuleCondOrAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondOrAndRule()); }
	iv_ruleCondOrAnd=ruleCondOrAnd
	{ $current=$iv_ruleCondOrAnd.current; }
	EOF;

// Rule CondOrAnd
ruleCondOrAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCondOrAndAccess().getCondExpParserRuleCall_0());
		}
		this_CondExp_0=ruleCondExp
		{
			$current = $this_CondExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCondOrAndAccess().getCondUnaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2=VerticalLineVerticalLine
				{
					newLeafNode(otherlv_2, grammarAccess.getCondOrAndAccess().getVerticalLineVerticalLineKeyword_1_1_0());
				}
				    |
				otherlv_3=AmpersandAmpersand
				{
					newLeafNode(otherlv_3, grammarAccess.getCondOrAndAccess().getAmpersandAmpersandKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondOrAndAccess().getRightCondExpParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleCondExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondOrAndRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.mydsl.MyBash.CondExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCondExp
entryRuleCondExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondExpRule()); }
	iv_ruleCondExp=ruleCondExp
	{ $current=$iv_ruleCondExp.current; }
	EOF;

// Rule CondExp
ruleCondExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCondExpAccess().getCondUnaryExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_op_1_0=RULE_C_S_OP
					{
						newLeafNode(lv_op_1_0, grammarAccess.getCondExpAccess().getOpC_S_OPTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCondExpRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.example.mydsl.MyBash.C_S_OP");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondExpAccess().getOperandWordParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondExpRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getCondExpAccess().getCondConstParserRuleCall_1_0());
			}
			this_CondConst_3=ruleCondConst
			{
				$current = $this_CondConst_3.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getCondExpAccess().getCondBinaryExpressionLeftAction_1_1_0(),
							$current);
					}
				)
				(
					(
						(
							(
								lv_op_5_0=RULE_C_B_OP
								{
									newLeafNode(lv_op_5_0, grammarAccess.getCondExpAccess().getOpC_B_OPTerminalRuleCall_1_1_1_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getCondExpRule());
									}
									setWithLastConsumed(
										$current,
										"op",
										lv_op_5_0,
										"org.xtext.example.mydsl.MyBash.C_B_OP");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getCondExpAccess().getRightWordParserRuleCall_1_1_1_0_1_0());
								}
								lv_right_6_0=ruleWord
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCondExpRule());
									}
									set(
										$current,
										"right",
										lv_right_6_0,
										"org.xtext.example.mydsl.MyBash.Word");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					    |
					(
						(
							(
								lv_op_7_0=EqualsSignTilde
								{
									newLeafNode(lv_op_7_0, grammarAccess.getCondExpAccess().getOpEqualsSignTildeKeyword_1_1_1_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getCondExpRule());
									}
									setWithLastConsumed($current, "op", lv_op_7_0, "=~");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getCondExpAccess().getRightRegularExpressionParserRuleCall_1_1_1_1_1_0());
								}
								lv_right_8_0=ruleRegularExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCondExpRule());
									}
									set(
										$current,
										"right",
										lv_right_8_0,
										"org.xtext.example.mydsl.MyBash.RegularExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)?
		)
		    |
		(
			otherlv_9=LeftParenthesis
			{
				newLeafNode(otherlv_9, grammarAccess.getCondExpAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getCondExpAccess().getCondOrAndParserRuleCall_2_1());
			}
			this_CondOrAnd_10=ruleCondOrAnd
			{
				$current = $this_CondOrAnd_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=RightParenthesis
			{
				newLeafNode(otherlv_11, grammarAccess.getCondExpAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleCondConst
entryRuleCondConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondConstRule()); }
	iv_ruleCondConst=ruleCondConst
	{ $current=$iv_ruleCondConst.current; }
	EOF;

// Rule CondConst
ruleCondConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCondConstAccess().getValueWordParserRuleCall_0());
			}
			lv_value_0_0=ruleWord
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCondConstRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyBash.Word");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRegularExpression
entryRuleRegularExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getRegularExpressionRule()); }
	iv_ruleRegularExpression=ruleRegularExpression
	{ $current=$iv_ruleRegularExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule RegularExpression
ruleRegularExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegularExpressionAccess().getRegularElementsParserRuleCall_0());
		}
		this_RegularElements_0=ruleRegularElements
		{
			$current = $this_RegularElements_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRegularExpressionAccess().getRegularExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=VerticalLine
					{
						newLeafNode(lv_op_2_0, grammarAccess.getRegularExpressionAccess().getOpVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegularExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularExpressionAccess().getRightRegularElementsParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRegularElements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.RegularElements");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleRegularElements
entryRuleRegularElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularElementsRule()); }
	iv_ruleRegularElements=ruleRegularElements
	{ $current=$iv_ruleRegularElements.current; }
	EOF;

// Rule RegularElements
ruleRegularElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRegularElementsAccess().getRegularConstAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1=LeftParenthesis
				{
					newLeafNode(otherlv_1, grammarAccess.getRegularElementsAccess().getLeftParenthesisKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_0_1_0());
						}
						lv_parts_2_0=ruleWord
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRegularElementsRule());
							}
							add(
								$current,
								"parts",
								lv_parts_2_0,
								"org.xtext.example.mydsl.MyBash.Word");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_3=RightParenthesis
				{
					newLeafNode(otherlv_3, grammarAccess.getRegularElementsAccess().getRightParenthesisKeyword_1_0_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularElementsAccess().getPartsWordParserRuleCall_1_1_0());
					}
					lv_parts_4_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularElementsRule());
						}
						add(
							$current,
							"parts",
							lv_parts_4_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleArithmeticExpansion
entryRuleArithmeticExpansion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpansionRule()); }
	iv_ruleArithmeticExpansion=ruleArithmeticExpansion
	{ $current=$iv_ruleArithmeticExpansion.current; }
	EOF;

// Rule ArithmeticExpansion
ruleArithmeticExpansion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionStartParserRuleCall_0());
		}
		this_ArithmeticExpansionStart_0=ruleArithmeticExpansionStart
		{
			$current = $this_ArithmeticExpansionStart_0.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getArithmeticExpansionAccess().getArithmeticExpansionEndParserRuleCall_1());
		}
		ruleArithmeticExpansionEnd
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIndexEvaluation
entryRuleIndexEvaluation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexEvaluationRule()); }
	iv_ruleIndexEvaluation=ruleIndexEvaluation
	{ $current=$iv_ruleIndexEvaluation.current; }
	EOF;

// Rule IndexEvaluation
ruleIndexEvaluation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIndexEvaluationAccess().getIndexEvaluationStartParserRuleCall_0());
		}
		this_IndexEvaluationStart_0=ruleIndexEvaluationStart
		{
			$current = $this_IndexEvaluationStart_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexEvaluationAccess().getEndIndexEvaluationEndParserRuleCall_1_0());
				}
				lv_end_1_0=ruleIndexEvaluationEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexEvaluationRule());
					}
					set(
						$current,
						"end",
						lv_end_1_0,
						"org.xtext.example.mydsl.MyBash.IndexEvaluationEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIndexEvaluationStart
entryRuleIndexEvaluationStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getIndexEvaluationStartRule()); }
	iv_ruleIndexEvaluationStart=ruleIndexEvaluationStart
	{ $current=$iv_ruleIndexEvaluationStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule IndexEvaluationStart
ruleIndexEvaluationStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftSquareBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexEvaluationStartAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexEvaluationStartAccess().getExpressionEvaluationParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexEvaluationStartRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyBash.Evaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIndexEvaluationEnd
entryRuleIndexEvaluationEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getIndexEvaluationEndRule()); }
	iv_ruleIndexEvaluationEnd=ruleIndexEvaluationEnd
	{ $current=$iv_ruleIndexEvaluationEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule IndexEvaluationEnd
ruleIndexEvaluationEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	kw=RightSquareBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIndexEvaluationEndAccess().getRightSquareBracketKeyword());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArithmeticExpansionStart
entryRuleArithmeticExpansionStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getArithmeticExpansionStartRule()); }
	iv_ruleArithmeticExpansionStart=ruleArithmeticExpansionStart
	{ $current=$iv_ruleArithmeticExpansionStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ArithmeticExpansionStart
ruleArithmeticExpansionStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=DollarSignLeftParenthesisLeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getArithmeticExpansionStartAccess().getDollarSignLeftParenthesisLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticExpansionStartAccess().getExpressionEvaluationParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticExpansionStartRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyBash.Evaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArithmeticExpansionEnd
entryRuleArithmeticExpansionEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getArithmeticExpansionEndRule()); }
	iv_ruleArithmeticExpansionEnd=ruleArithmeticExpansionEnd
	{ $current=$iv_ruleArithmeticExpansionEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ArithmeticExpansionEnd
ruleArithmeticExpansionEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	kw=RightParenthesisRightParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getArithmeticExpansionEndAccess().getRightParenthesisRightParenthesisKeyword());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterExpansion
entryRuleParameterExpansion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterExpansionRule()); }
	iv_ruleParameterExpansion=ruleParameterExpansion
	{ $current=$iv_ruleParameterExpansion.current; }
	EOF;

// Rule ParameterExpansion
ruleParameterExpansion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterExpansionAccess().getParameterExpansionStartParserRuleCall_0_0());
			}
			this_ParameterExpansionStart_0=ruleParameterExpansionStart
			{
				$current = $this_ParameterExpansionStart_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterExpansionAccess().getEndParameterExpansionEndParserRuleCall_0_1_0());
					}
					lv_end_1_0=ruleParameterExpansionEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterExpansionRule());
						}
						set(
							$current,
							"end",
							lv_end_1_0,
							"org.xtext.example.mydsl.MyBash.ParameterExpansionEnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterExpansionAccess().getParameterExpansionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionRule());
						}
					}
					otherlv_3=RULE_VARIABLE
					{
						newLeafNode(otherlv_3, grammarAccess.getParameterExpansionAccess().getRefAssignmentCrossReference_1_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParameterExpansionStart
entryRuleParameterExpansionStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getParameterExpansionStartRule()); }
	iv_ruleParameterExpansionStart=ruleParameterExpansionStart
	{ $current=$iv_ruleParameterExpansionStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ParameterExpansionStart
ruleParameterExpansionStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterExpansionStartAccess().getParameterExpansionAction_0(),
					$current);
			}
		)
		otherlv_1=DollarSignLeftCurlyBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterExpansionStartAccess().getDollarSignLeftCurlyBracketKeyword_1());
		}
		(
			(
				lv_hash_2_0=NumberSign
				{
					newLeafNode(lv_hash_2_0, grammarAccess.getParameterExpansionStartAccess().getHashNumberSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
					}
					setWithLastConsumed($current, "hash", true, "#");
				}
			)
		)?
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
						}
					}
					otherlv_3=RULE_NAME
					{
						newLeafNode(otherlv_3, grammarAccess.getParameterExpansionStartAccess().getRefAssignmentCrossReference_3_0_0());
					}
				)
			)
			    |
			(
				(
					lv_value_4_0=RULE_I_NUMBER
					{
						newLeafNode(lv_value_4_0, grammarAccess.getParameterExpansionStartAccess().getValueI_NUMBERTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_4_0,
							"org.xtext.example.mydsl.MyBash.I_NUMBER");
					}
				)
			)
			    |
			(
				(
					lv_value_5_0=QuestionMark
					{
						newLeafNode(lv_value_5_0, grammarAccess.getParameterExpansionStartAccess().getValueQuestionMarkKeyword_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
						}
						setWithLastConsumed($current, "value", lv_value_5_0, "?");
					}
				)
			)
			    |
			(
				(
					lv_value_6_0=CommercialAt
					{
						newLeafNode(lv_value_6_0, grammarAccess.getParameterExpansionStartAccess().getValueCommercialAtKeyword_3_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
						}
						setWithLastConsumed($current, "value", lv_value_6_0, "@");
					}
				)
			)
			    |
			(
				(
					lv_value_7_0=Asterisk
					{
						newLeafNode(lv_value_7_0, grammarAccess.getParameterExpansionStartAccess().getValueAsteriskKeyword_3_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterExpansionStartRule());
						}
						setWithLastConsumed($current, "value", lv_value_7_0, "*");
					}
				)
			)
		)
		(
			otherlv_8=LeftSquareBracket
			{
				newLeafNode(otherlv_8, grammarAccess.getParameterExpansionStartAccess().getLeftSquareBracketKeyword_4_0());
			}
			(
				otherlv_9=CommercialAt
				{
					newLeafNode(otherlv_9, grammarAccess.getParameterExpansionStartAccess().getCommercialAtKeyword_4_1_0());
				}
				    |
				otherlv_10=Asterisk
				{
					newLeafNode(otherlv_10, grammarAccess.getParameterExpansionStartAccess().getAsteriskKeyword_4_1_1());
				}
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterExpansionStartAccess().getIndexEvaluationParserRuleCall_4_1_2_0());
						}
						lv_index_11_0=ruleEvaluation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterExpansionStartRule());
							}
							set(
								$current,
								"index",
								lv_index_11_0,
								"org.xtext.example.mydsl.MyBash.Evaluation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_12=RightSquareBracket
			{
				newLeafNode(otherlv_12, grammarAccess.getParameterExpansionStartAccess().getRightSquareBracketKeyword_4_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterExpansionStartAccess().getReplacerParameterProcessorParserRuleCall_5_0());
				}
				lv_replacer_13_0=ruleParameterProcessor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterExpansionStartRule());
					}
					set(
						$current,
						"replacer",
						lv_replacer_13_0,
						"org.xtext.example.mydsl.MyBash.ParameterProcessor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterExpansionEnd
entryRuleParameterExpansionEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getParameterExpansionEndRule()); }
	iv_ruleParameterExpansionEnd=ruleParameterExpansionEnd
	{ $current=$iv_ruleParameterExpansionEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ParameterExpansionEnd
ruleParameterExpansionEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	kw=RightCurlyBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getParameterExpansionEndAccess().getRightCurlyBracketKeyword());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleParameterProcessor
entryRuleParameterProcessor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterProcessorRule()); }
	iv_ruleParameterProcessor=ruleParameterProcessor
	{ $current=$iv_ruleParameterProcessor.current; }
	EOF;

// Rule ParameterProcessor
ruleParameterProcessor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterProcessorAccess().getSingleProcessorAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterProcessorAccess().getOpFollowWordOpEnumRuleCall_0_1_0());
					}
					lv_op_1_0=ruleFollowWordOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
						}
						set(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.example.mydsl.MyBash.FollowWordOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterProcessorAccess().getWordWordParserRuleCall_0_2_0());
					}
					lv_word_2_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
						}
						set(
							$current,
							"word",
							lv_word_2_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_4_1=SolidusSolidus
						{
							newLeafNode(lv_op_4_1, grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterProcessorRule());
							}
							setWithLastConsumed($current, "op", lv_op_4_1, null);
						}
						    |
						lv_op_4_2=Solidus
						{
							newLeafNode(lv_op_4_2, grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterProcessorRule());
							}
							setWithLastConsumed($current, "op", lv_op_4_2, null);
						}
					)
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterProcessorAccess().getOriginalWordParserRuleCall_1_2_0_0());
						}
						lv_original_5_0=ruleWord
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
							}
							set(
								$current,
								"original",
								lv_original_5_0,
								"org.xtext.example.mydsl.MyBash.Word");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=Solidus
					{
						newLeafNode(otherlv_6, grammarAccess.getParameterProcessorAccess().getSolidusKeyword_1_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_1_2_1_1_0());
							}
							lv_replace_7_0=ruleWord
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
								}
								set(
									$current,
									"replace",
									lv_replace_7_0,
									"org.xtext.example.mydsl.MyBash.Word");
								afterParserOrEnumRuleCall();
							}
						)
					)?
				)?
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterProcessorAccess().getReplaceProcessorAction_2_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_9_1=SolidusSolidus
						{
							newLeafNode(lv_op_9_1, grammarAccess.getParameterProcessorAccess().getOpSolidusSolidusKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterProcessorRule());
							}
							setWithLastConsumed($current, "op", lv_op_9_1, null);
						}
						    |
						lv_op_9_2=Solidus
						{
							newLeafNode(lv_op_9_2, grammarAccess.getParameterProcessorAccess().getOpSolidusKeyword_2_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterProcessorRule());
							}
							setWithLastConsumed($current, "op", lv_op_9_2, null);
						}
					)
				)
			)
			otherlv_10=Solidus
			{
				newLeafNode(otherlv_10, grammarAccess.getParameterProcessorAccess().getSolidusKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterProcessorAccess().getReplaceWordParserRuleCall_2_3_0());
					}
					lv_replace_11_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
						}
						set(
							$current,
							"replace",
							lv_replace_11_0,
							"org.xtext.example.mydsl.MyBash.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_3_0(),
						$current);
				}
			)
			otherlv_13=Colon
			{
				newLeafNode(otherlv_13, grammarAccess.getParameterProcessorAccess().getColonKeyword_3_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterProcessorAccess().getStartEvaluationParserRuleCall_3_2_0_0());
						}
						lv_start_14_0=ruleEvaluation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
							}
							set(
								$current,
								"start",
								lv_start_14_0,
								"org.xtext.example.mydsl.MyBash.Evaluation");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_15=Colon
					{
						newLeafNode(otherlv_15, grammarAccess.getParameterProcessorAccess().getColonKeyword_3_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_3_2_1_1_0());
							}
							lv_length_16_0=ruleEvaluation
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
								}
								set(
									$current,
									"length",
									lv_length_16_0,
									"org.xtext.example.mydsl.MyBash.Evaluation");
								afterParserOrEnumRuleCall();
							}
						)
					)?
				)?
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterProcessorAccess().getSubStringProcessorAction_4_0(),
						$current);
				}
			)
			otherlv_18=Colon
			{
				newLeafNode(otherlv_18, grammarAccess.getParameterProcessorAccess().getColonKeyword_4_1());
			}
			otherlv_19=Colon
			{
				newLeafNode(otherlv_19, grammarAccess.getParameterProcessorAccess().getColonKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterProcessorAccess().getLengthEvaluationParserRuleCall_4_3_0());
					}
					lv_length_20_0=ruleEvaluation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterProcessorRule());
						}
						set(
							$current,
							"length",
							lv_length_20_0,
							"org.xtext.example.mydsl.MyBash.Evaluation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleCommandSubstitution
entryRuleCommandSubstitution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandSubstitutionRule()); }
	iv_ruleCommandSubstitution=ruleCommandSubstitution
	{ $current=$iv_ruleCommandSubstitution.current; }
	EOF;

// Rule CommandSubstitution
ruleCommandSubstitution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandSubstitutionAccess().getCommandSubstitutionStartParserRuleCall_0());
		}
		this_CommandSubstitutionStart_0=ruleCommandSubstitutionStart
		{
			$current = $this_CommandSubstitutionStart_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandSubstitutionAccess().getEndCommandSubstitutionStartEndParserRuleCall_1_0());
				}
				lv_end_1_0=ruleCommandSubstitutionStartEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandSubstitutionRule());
					}
					set(
						$current,
						"end",
						lv_end_1_0,
						"org.xtext.example.mydsl.MyBash.CommandSubstitutionStartEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommandSubstitutionStart
entryRuleCommandSubstitutionStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getCommandSubstitutionStartRule()); }
	iv_ruleCommandSubstitutionStart=ruleCommandSubstitutionStart
	{ $current=$iv_ruleCommandSubstitutionStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandSubstitutionStart
ruleCommandSubstitutionStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		this_CS_START_0=RULE_CS_START
		{
			newLeafNode(this_CS_START_0, grammarAccess.getCommandSubstitutionStartAccess().getCS_STARTTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandSubstitutionStartAccess().getCommandsCompoundListParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandSubstitutionStartRule());
					}
					set(
						$current,
						"commands",
						lv_commands_1_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCommandSubstitutionStartEnd
entryRuleCommandSubstitutionStartEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getCommandSubstitutionStartEndRule()); }
	iv_ruleCommandSubstitutionStartEnd=ruleCommandSubstitutionStartEnd
	{ $current=$iv_ruleCommandSubstitutionStartEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandSubstitutionStartEnd
ruleCommandSubstitutionStartEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	this_CS_END_0=RULE_CS_END
	{
		$current.merge(this_CS_END_0);
	}
	{
		newLeafNode(this_CS_END_0, grammarAccess.getCommandSubstitutionStartEndAccess().getCS_ENDTerminalRuleCall());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleProcessSubstitution
entryRuleProcessSubstitution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessSubstitutionRule()); }
	iv_ruleProcessSubstitution=ruleProcessSubstitution
	{ $current=$iv_ruleProcessSubstitution.current; }
	EOF;

// Rule ProcessSubstitution
ruleProcessSubstitution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProcessSubstitutionAccess().getProcessSubstitutionStartParserRuleCall_0());
		}
		this_ProcessSubstitutionStart_0=ruleProcessSubstitutionStart
		{
			$current = $this_ProcessSubstitutionStart_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessSubstitutionAccess().getEndProcessSubstitutionEndParserRuleCall_1_0());
				}
				lv_end_1_0=ruleProcessSubstitutionEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessSubstitutionRule());
					}
					set(
						$current,
						"end",
						lv_end_1_0,
						"org.xtext.example.mydsl.MyBash.ProcessSubstitutionEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProcessSubstitutionStart
entryRuleProcessSubstitutionStart returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}:
	{ newCompositeNode(grammarAccess.getProcessSubstitutionStartRule()); }
	iv_ruleProcessSubstitutionStart=ruleProcessSubstitutionStart
	{ $current=$iv_ruleProcessSubstitutionStart.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessSubstitutionStart
ruleProcessSubstitutionStart returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_C_LINE", "RULE_WS", "RULE_HIDEN_NEW_LINE");
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_1=LessThanSignLeftParenthesis
					{
						newLeafNode(lv_op_0_1, grammarAccess.getProcessSubstitutionStartAccess().getOpLessThanSignLeftParenthesisKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessSubstitutionStartRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_1, null);
					}
					    |
					lv_op_0_2=GreaterThanSignLeftParenthesis
					{
						newLeafNode(lv_op_0_2, grammarAccess.getProcessSubstitutionStartAccess().getOpGreaterThanSignLeftParenthesisKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessSubstitutionStartRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessSubstitutionStartAccess().getBodyCompoundListParserRuleCall_1_0());
				}
				lv_body_1_0=ruleCompoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessSubstitutionStartRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"org.xtext.example.mydsl.MyBash.CompoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleProcessSubstitutionEnd
entryRuleProcessSubstitutionEnd returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}:
	{ newCompositeNode(grammarAccess.getProcessSubstitutionEndRule()); }
	iv_ruleProcessSubstitutionEnd=ruleProcessSubstitutionEnd
	{ $current=$iv_ruleProcessSubstitutionEnd.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessSubstitutionEnd
ruleProcessSubstitutionEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_C_LINE");
}
@after {
	leaveRule();
}:
	kw=RightParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getProcessSubstitutionEndAccess().getRightParenthesisKeyword());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEvaluation
entryRuleEvaluation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationRule()); }
	iv_ruleEvaluation=ruleEvaluation
	{ $current=$iv_ruleEvaluation.current; }
	EOF;

// Rule Evaluation
ruleEvaluation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvaluationAccess().getArithmeticParserRuleCall_0());
		}
		this_Arithmetic_0=ruleArithmetic
		{
			$current = $this_Arithmetic_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEvaluationAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=Comma
					{
						newLeafNode(lv_op_2_0, grammarAccess.getEvaluationAccess().getOpCommaKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEvaluationRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEvaluationAccess().getRightArithmeticParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleArithmetic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvaluationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.Arithmetic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithmetic
entryRuleArithmetic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticRule()); }
	iv_ruleArithmetic=ruleArithmetic
	{ $current=$iv_ruleArithmetic.current; }
	EOF;

// Rule Arithmetic
ruleArithmetic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getArithmeticAccess().getBinaryExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticAccess().getLeftVariableIdParserRuleCall_0_1_0());
					}
					lv_left_1_0=ruleVariableId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticRule());
						}
						set(
							$current,
							"left",
							lv_left_1_0,
							"org.xtext.example.mydsl.MyBash.VariableId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						lv_op_2_1=EqualsSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getArithmeticAccess().getOpEqualsSignKeyword_0_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=AsteriskEqualsSign
						{
							newLeafNode(lv_op_2_2, grammarAccess.getArithmeticAccess().getOpAsteriskEqualsSignKeyword_0_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3=SolidusEqualsSign
						{
							newLeafNode(lv_op_2_3, grammarAccess.getArithmeticAccess().getOpSolidusEqualsSignKeyword_0_2_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4=PercentSignEqualsSign
						{
							newLeafNode(lv_op_2_4, grammarAccess.getArithmeticAccess().getOpPercentSignEqualsSignKeyword_0_2_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
						    |
						lv_op_2_5=PlusSignEqualsSign
						{
							newLeafNode(lv_op_2_5, grammarAccess.getArithmeticAccess().getOpPlusSignEqualsSignKeyword_0_2_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_5, null);
						}
						    |
						lv_op_2_6=HyphenMinusEqualsSign
						{
							newLeafNode(lv_op_2_6, grammarAccess.getArithmeticAccess().getOpHyphenMinusEqualsSignKeyword_0_2_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_6, null);
						}
						    |
						lv_op_2_7=LessThanSignLessThanSignEqualsSign
						{
							newLeafNode(lv_op_2_7, grammarAccess.getArithmeticAccess().getOpLessThanSignLessThanSignEqualsSignKeyword_0_2_0_6());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_7, null);
						}
						    |
						lv_op_2_8=GreaterThanSignGreaterThanSignEqualsSign
						{
							newLeafNode(lv_op_2_8, grammarAccess.getArithmeticAccess().getOpGreaterThanSignGreaterThanSignEqualsSignKeyword_0_2_0_7());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_8, null);
						}
						    |
						lv_op_2_9=AmpersandEqualsSign
						{
							newLeafNode(lv_op_2_9, grammarAccess.getArithmeticAccess().getOpAmpersandEqualsSignKeyword_0_2_0_8());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_9, null);
						}
						    |
						lv_op_2_10=CircumflexAccentEqualsSign
						{
							newLeafNode(lv_op_2_10, grammarAccess.getArithmeticAccess().getOpCircumflexAccentEqualsSignKeyword_0_2_0_9());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_10, null);
						}
						    |
						lv_op_2_11=VerticalLineEqualsSign
						{
							newLeafNode(lv_op_2_11, grammarAccess.getArithmeticAccess().getOpVerticalLineEqualsSignKeyword_0_2_0_10());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithmeticRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_11, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticAccess().getRightArithmeticParserRuleCall_0_3_0());
					}
					lv_right_3_0=ruleArithmetic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.Arithmetic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticAccess().getConditionalOperatorParserRuleCall_1());
		}
		this_ConditionalOperator_4=ruleConditionalOperator
		{
			$current = $this_ConditionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalOperator
entryRuleConditionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalOperatorRule()); }
	iv_ruleConditionalOperator=ruleConditionalOperator
	{ $current=$iv_ruleConditionalOperator.current; }
	EOF;

// Rule ConditionalOperator
ruleConditionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionalOperatorAccess().getLogicOrParserRuleCall_0());
		}
		this_LogicOr_0=ruleLogicOr
		{
			$current = $this_LogicOr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=QuestionMark
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionalOperatorAccess().getQuestionMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionalOperatorAccess().getConditionalOperatorConditionAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalOperatorAccess().getFirstConditionalOperatorParserRuleCall_1_2_0());
					}
					lv_first_3_0=ruleConditionalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalOperatorRule());
						}
						set(
							$current,
							"first",
							lv_first_3_0,
							"org.xtext.example.mydsl.MyBash.ConditionalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=Colon
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalOperatorAccess().getColonKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalOperatorAccess().getRightConditionalOperatorParserRuleCall_1_4_0());
					}
					lv_right_5_0=ruleConditionalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalOperatorRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.example.mydsl.MyBash.ConditionalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicOr
entryRuleLogicOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicOrRule()); }
	iv_ruleLogicOr=ruleLogicOr
	{ $current=$iv_ruleLogicOr.current; }
	EOF;

// Rule LogicOr
ruleLogicOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicOrAccess().getLogicAndParserRuleCall_0());
		}
		this_LogicAnd_0=ruleLogicAnd
		{
			$current = $this_LogicAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicOrAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=VerticalLineVerticalLine
					{
						newLeafNode(lv_op_2_0, grammarAccess.getLogicOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicOrRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "||");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicOrAccess().getRightLogicAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLogicAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.LogicAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicAnd
entryRuleLogicAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicAndRule()); }
	iv_ruleLogicAnd=ruleLogicAnd
	{ $current=$iv_ruleLogicAnd.current; }
	EOF;

// Rule LogicAnd
ruleLogicAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicAndAccess().getBitwiseORParserRuleCall_0());
		}
		this_BitwiseOR_0=ruleBitwiseOR
		{
			$current = $this_BitwiseOR_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicAndAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=AmpersandAmpersand
					{
						newLeafNode(lv_op_2_0, grammarAccess.getLogicAndAccess().getOpAmpersandAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicAndRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "&&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicAndAccess().getRightBitwiseORParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitwiseOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.BitwiseOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseOR
entryRuleBitwiseOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseORRule()); }
	iv_ruleBitwiseOR=ruleBitwiseOR
	{ $current=$iv_ruleBitwiseOR.current; }
	EOF;

// Rule BitwiseOR
ruleBitwiseOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseORAccess().getBitwiseExclusiveORParserRuleCall_0());
		}
		this_BitwiseExclusiveOR_0=ruleBitwiseExclusiveOR
		{
			$current = $this_BitwiseExclusiveOR_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseORAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=VerticalLine
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBitwiseORAccess().getOpVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBitwiseORRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseORAccess().getRightBitwiseExclusiveORParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitwiseExclusiveOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseORRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.BitwiseExclusiveOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseExclusiveOR
entryRuleBitwiseExclusiveOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseExclusiveORRule()); }
	iv_ruleBitwiseExclusiveOR=ruleBitwiseExclusiveOR
	{ $current=$iv_ruleBitwiseExclusiveOR.current; }
	EOF;

// Rule BitwiseExclusiveOR
ruleBitwiseExclusiveOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseExclusiveORAccess().getBitwiseANDParserRuleCall_0());
		}
		this_BitwiseAND_0=ruleBitwiseAND
		{
			$current = $this_BitwiseAND_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseExclusiveORAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=CircumflexAccent
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBitwiseExclusiveORAccess().getOpCircumflexAccentKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBitwiseExclusiveORRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "^");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseExclusiveORAccess().getRightBitwiseANDParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitwiseAND
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseExclusiveORRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.BitwiseAND");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseAND
entryRuleBitwiseAND returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseANDRule()); }
	iv_ruleBitwiseAND=ruleBitwiseAND
	{ $current=$iv_ruleBitwiseAND.current; }
	EOF;

// Rule BitwiseAND
ruleBitwiseAND returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseANDAccess().getEqualityAndInequalityParserRuleCall_0());
		}
		this_EqualityAndInequality_0=ruleEqualityAndInequality
		{
			$current = $this_EqualityAndInequality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseANDAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=Ampersand
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBitwiseANDAccess().getOpAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBitwiseANDRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseANDAccess().getRightEqualityAndInequalityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualityAndInequality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseANDRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.EqualityAndInequality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityAndInequality
entryRuleEqualityAndInequality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityAndInequalityRule()); }
	iv_ruleEqualityAndInequality=ruleEqualityAndInequality
	{ $current=$iv_ruleEqualityAndInequality.current; }
	EOF;

// Rule EqualityAndInequality
ruleEqualityAndInequality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAndInequalityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAndInequalityAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=EqualsSignEqualsSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityAndInequalityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityAndInequalityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=ExclamationMarkEqualsSign
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityAndInequalityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityAndInequalityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAndInequalityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityAndInequalityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getBitwiseShiftsParserRuleCall_0());
		}
		this_BitwiseShifts_0=ruleBitwiseShifts
		{
			$current = $this_BitwiseShifts_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=LessThanSignEqualsSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=GreaterThanSignEqualsSign
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3=LessThanSign
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4=GreaterThanSign
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightBitwiseShiftsParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitwiseShifts
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.BitwiseShifts");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitwiseShifts
entryRuleBitwiseShifts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseShiftsRule()); }
	iv_ruleBitwiseShifts=ruleBitwiseShifts
	{ $current=$iv_ruleBitwiseShifts.current; }
	EOF;

// Rule BitwiseShifts
ruleBitwiseShifts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitwiseShiftsAccess().getAdditionSubtractionParserRuleCall_0());
		}
		this_AdditionSubtraction_0=ruleAdditionSubtraction
		{
			$current = $this_AdditionSubtraction_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitwiseShiftsAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=LessThanSignLessThanSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getBitwiseShiftsAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseShiftsRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=GreaterThanSignGreaterThanSign
						{
							newLeafNode(lv_op_2_2, grammarAccess.getBitwiseShiftsAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBitwiseShiftsRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseShiftsAccess().getRightAdditionSubtractionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAdditionSubtraction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseShiftsRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.AdditionSubtraction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditionSubtraction
entryRuleAdditionSubtraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionSubtractionRule()); }
	iv_ruleAdditionSubtraction=ruleAdditionSubtraction
	{ $current=$iv_ruleAdditionSubtraction.current; }
	EOF;

// Rule AdditionSubtraction
ruleAdditionSubtraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionRemainderParserRuleCall_0());
		}
		this_MultiplicationDivisionRemainder_0=ruleMultiplicationDivisionRemainder
		{
			$current = $this_MultiplicationDivisionRemainder_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionSubtractionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=PlusSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getAdditionSubtractionAccess().getOpPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionSubtractionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=HyphenMinus
						{
							newLeafNode(lv_op_2_2, grammarAccess.getAdditionSubtractionAccess().getOpHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionSubtractionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionRemainderParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicationDivisionRemainder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionSubtractionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.MultiplicationDivisionRemainder");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationDivisionRemainder
entryRuleMultiplicationDivisionRemainder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationDivisionRemainderRule()); }
	iv_ruleMultiplicationDivisionRemainder=ruleMultiplicationDivisionRemainder
	{ $current=$iv_ruleMultiplicationDivisionRemainder.current; }
	EOF;

// Rule MultiplicationDivisionRemainder
ruleMultiplicationDivisionRemainder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationDivisionRemainderAccess().getExponentiationParserRuleCall_0());
		}
		this_Exponentiation_0=ruleExponentiation
		{
			$current = $this_Exponentiation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationDivisionRemainderAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=Asterisk
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationDivisionRemainderAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationDivisionRemainderRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=Solidus
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationDivisionRemainderAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationDivisionRemainderRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3=PercentSign
						{
							newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationDivisionRemainderAccess().getOpPercentSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationDivisionRemainderRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationDivisionRemainderAccess().getRightExponentiationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentiation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionRemainderRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.Exponentiation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExponentiation
entryRuleExponentiation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentiationRule()); }
	iv_ruleExponentiation=ruleExponentiation
	{ $current=$iv_ruleExponentiation.current; }
	EOF;

// Rule Exponentiation
ruleExponentiation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentiationAccess().getLogicalAndBitwiseNegationParserRuleCall_0());
		}
		this_LogicalAndBitwiseNegation_0=ruleLogicalAndBitwiseNegation
		{
			$current = $this_LogicalAndBitwiseNegation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentiationAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=AsteriskAsterisk
					{
						newLeafNode(lv_op_2_0, grammarAccess.getExponentiationAccess().getOpAsteriskAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExponentiationRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "**");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentiationAccess().getRightExponentiationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentiation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentiationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyBash.Exponentiation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicalAndBitwiseNegation
entryRuleLogicalAndBitwiseNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndBitwiseNegationRule()); }
	iv_ruleLogicalAndBitwiseNegation=ruleLogicalAndBitwiseNegation
	{ $current=$iv_ruleLogicalAndBitwiseNegation.current; }
	EOF;

// Rule LogicalAndBitwiseNegation
ruleLogicalAndBitwiseNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogicalAndBitwiseNegationAccess().getPrefixExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_1_1=ExclamationMark
						{
							newLeafNode(lv_op_1_1, grammarAccess.getLogicalAndBitwiseNegationAccess().getOpExclamationMarkKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicalAndBitwiseNegationRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2=Tilde
						{
							newLeafNode(lv_op_1_2, grammarAccess.getLogicalAndBitwiseNegationAccess().getOpTildeKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicalAndBitwiseNegationRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndBitwiseNegationAccess().getOperandLogicalAndBitwiseNegationParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleLogicalAndBitwiseNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndBitwiseNegationRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.example.mydsl.MyBash.LogicalAndBitwiseNegation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getLogicalAndBitwiseNegationAccess().getUnaryMinusAndPlusParserRuleCall_1());
		}
		this_UnaryMinusAndPlus_3=ruleUnaryMinusAndPlus
		{
			$current = $this_UnaryMinusAndPlus_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryMinusAndPlus
entryRuleUnaryMinusAndPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryMinusAndPlusRule()); }
	iv_ruleUnaryMinusAndPlus=ruleUnaryMinusAndPlus
	{ $current=$iv_ruleUnaryMinusAndPlus.current; }
	EOF;

// Rule UnaryMinusAndPlus
ruleUnaryMinusAndPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryMinusAndPlusAccess().getPrefixExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_1_1=PlusSign
						{
							newLeafNode(lv_op_1_1, grammarAccess.getUnaryMinusAndPlusAccess().getOpPlusSignKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnaryMinusAndPlusRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2=HyphenMinus
						{
							newLeafNode(lv_op_1_2, grammarAccess.getUnaryMinusAndPlusAccess().getOpHyphenMinusKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnaryMinusAndPlusRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryMinusAndPlusAccess().getOperandUnaryMinusAndPlusParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleUnaryMinusAndPlus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryMinusAndPlusRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.example.mydsl.MyBash.UnaryMinusAndPlus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryMinusAndPlusAccess().getPrimaryItemParserRuleCall_1());
		}
		this_PrimaryItem_3=rulePrimaryItem
		{
			$current = $this_PrimaryItem_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePreDecrement
entryRulePreDecrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreDecrementRule()); }
	iv_rulePreDecrement=rulePreDecrement
	{ $current=$iv_rulePreDecrement.current; }
	EOF;

// Rule PreDecrement
rulePreDecrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPreDecrementAccess().getPrefixExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_1_1=PlusSignPlusSign
						{
							newLeafNode(lv_op_1_1, grammarAccess.getPreDecrementAccess().getOpPlusSignPlusSignKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPreDecrementRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2=HyphenMinusHyphenMinus
						{
							newLeafNode(lv_op_1_2, grammarAccess.getPreDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPreDecrementRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPreDecrementAccess().getOperandPostDecrementParserRuleCall_0_2_0());
					}
					lv_operand_2_0=rulePostDecrement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPreDecrementRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.example.mydsl.MyBash.PostDecrement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPreDecrementAccess().getPostDecrementParserRuleCall_1());
		}
		this_PostDecrement_3=rulePostDecrement
		{
			$current = $this_PostDecrement_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePostDecrement
entryRulePostDecrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostDecrementRule()); }
	iv_rulePostDecrement=rulePostDecrement
	{ $current=$iv_rulePostDecrement.current; }
	EOF;

// Rule PostDecrement
rulePostDecrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostDecrementAccess().getVariableIdParserRuleCall_0());
		}
		this_VariableId_0=ruleVariableId
		{
			$current = $this_VariableId_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPostDecrementAccess().getSuffixExpressionOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1=PlusSignPlusSign
						{
							newLeafNode(lv_op_2_1, grammarAccess.getPostDecrementAccess().getOpPlusSignPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostDecrementRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2=HyphenMinusHyphenMinus
						{
							newLeafNode(lv_op_2_2, grammarAccess.getPostDecrementAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostDecrementRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRulePrimaryItem
entryRulePrimaryItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryItemRule()); }
	iv_rulePrimaryItem=rulePrimaryItem
	{ $current=$iv_rulePrimaryItem.current; }
	EOF;

// Rule PrimaryItem
rulePrimaryItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryItemAccess().getConstPrimaryItemAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_prefix_1_0=RULE_A_PREFIX
					{
						newLeafNode(lv_prefix_1_0, grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryItemRule());
						}
						setWithLastConsumed(
							$current,
							"prefix",
							lv_prefix_1_0,
							"org.xtext.example.mydsl.MyBash.A_PREFIX");
					}
				)
			)?
			(
				(
					lv_value_2_0=RULE_I_NUMBER
					{
						newLeafNode(lv_value_2_0, grammarAccess.getPrimaryItemAccess().getValueI_NUMBERTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryItemRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.xtext.example.mydsl.MyBash.I_NUMBER");
					}
				)
			)
		)
		    |
		(
			otherlv_3=LeftParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryItemAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryItemAccess().getEvaluationParserRuleCall_1_1());
			}
			this_Evaluation_4=ruleEvaluation
			{
				$current = $this_Evaluation_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=RightParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryItemAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryItemAccess().getPrimaryItemAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_prefix_7_0=RULE_A_PREFIX
					{
						newLeafNode(lv_prefix_7_0, grammarAccess.getPrimaryItemAccess().getPrefixA_PREFIXTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryItemRule());
						}
						setWithLastConsumed(
							$current,
							"prefix",
							lv_prefix_7_0,
							"org.xtext.example.mydsl.MyBash.A_PREFIX");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryItemAccess().getValueExpansionParserRuleCall_2_2_0());
					}
					lv_value_8_0=ruleExpansion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryItemRule());
						}
						set(
							$current,
							"value",
							lv_value_8_0,
							"org.xtext.example.mydsl.MyBash.Expansion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryItemAccess().getPreDecrementParserRuleCall_3());
		}
		this_PreDecrement_9=rulePreDecrement
		{
			$current = $this_PreDecrement_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableId
entryRuleVariableId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableIdRule()); }
	iv_ruleVariableId=ruleVariableId
	{ $current=$iv_ruleVariableId.current; }
	EOF;

// Rule VariableId
ruleVariableId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableIdAccess().getVariableIdAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableIdRule());
					}
				}
				otherlv_1=RULE_NAME
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableIdAccess().getRefAssignmentCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current.getText(); }
	EOF;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_S_WORD_PART_0=RULE_S_WORD_PART
	{
		$current.merge(this_S_WORD_PART_0);
	}
	{
		newLeafNode(this_S_WORD_PART_0, grammarAccess.getFunctionNameAccess().getS_WORD_PARTTerminalRuleCall());
	}
;

// Entry rule entryRuleNewLine
entryRuleNewLine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNewLineRule()); }
	iv_ruleNewLine=ruleNewLine
	{ $current=$iv_ruleNewLine.current.getText(); }
	EOF;

// Rule NewLine
ruleNewLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNewLineAccess().getHereDocParserRuleCall_0());
			}
			this_HereDoc_0=ruleHereDoc
			{
				$current.merge(this_HereDoc_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		this_NEW_LINE_1=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_1);
		}
		{
			newLeafNode(this_NEW_LINE_1, grammarAccess.getNewLineAccess().getNEW_LINETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleListTerminator
entryRuleListTerminator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getListTerminatorRule()); }
	iv_ruleListTerminator=ruleListTerminator
	{ $current=$iv_ruleListTerminator.current.getText(); }
	EOF;

// Rule ListTerminator
ruleListTerminator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getListTerminatorAccess().getNewLineParserRuleCall_0());
		}
		this_NewLine_0=ruleNewLine
		{
			$current.merge(this_NewLine_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw=Semicolon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getListTerminatorAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleMaybeNewLine
entryRuleMaybeNewLine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaybeNewLineRule()); }
	iv_ruleMaybeNewLine=ruleMaybeNewLine
	{ $current=$iv_ruleMaybeNewLine.current.getText(); }
	EOF;

// Rule MaybeNewLine
ruleMaybeNewLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMaybeNewLineAccess().getNewLineParserRuleCall());
		}
		this_NewLine_0=ruleNewLine
		{
			$current.merge(this_NewLine_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleHereDoc
entryRuleHereDoc returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHereDocRule()); }
	iv_ruleHereDoc=ruleHereDoc
	{ $current=$iv_ruleHereDoc.current.getText(); }
	EOF;

// Rule HereDoc
ruleHereDoc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_HERE_DOC_START_0=RULE_HERE_DOC_START
		{
			$current.merge(this_HERE_DOC_START_0);
		}
		{
			newLeafNode(this_HERE_DOC_START_0, grammarAccess.getHereDocAccess().getHERE_DOC_STARTTerminalRuleCall_0());
		}
		(
			this_HERE_DOC_PART_1=RULE_HERE_DOC_PART
			{
				$current.merge(this_HERE_DOC_PART_1);
			}
			{
				newLeafNode(this_HERE_DOC_PART_1, grammarAccess.getHereDocAccess().getHERE_DOC_PARTTerminalRuleCall_1_0());
			}
			    |
			this_NEW_LINE_2=RULE_NEW_LINE
			{
				$current.merge(this_NEW_LINE_2);
			}
			{
				newLeafNode(this_NEW_LINE_2, grammarAccess.getHereDocAccess().getNEW_LINETerminalRuleCall_1_1());
			}
		)*
		this_HERE_DOC_END_3=RULE_HERE_DOC_END
		{
			$current.merge(this_HERE_DOC_END_3);
		}
		{
			newLeafNode(this_HERE_DOC_END_3, grammarAccess.getHereDocAccess().getHERE_DOC_ENDTerminalRuleCall_2());
		}
	)
;

// Rule FollowWordOp
ruleFollowWordOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=PercentSignPercentSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getGreedyRemoveSuffixEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFollowWordOpAccess().getGreedyRemoveSuffixEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=PercentSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getRemoveSuffixEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFollowWordOpAccess().getRemoveSuffixEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=NumberSignNumberSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getGreeyRemovePrefixEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFollowWordOpAccess().getGreeyRemovePrefixEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=NumberSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getRemovePrefixEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getFollowWordOpAccess().getRemovePrefixEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=CommaComma
			{
				$current = grammarAccess.getFollowWordOpAccess().getGreedyLowercaseEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getFollowWordOpAccess().getGreedyLowercaseEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5=Comma
			{
				$current = grammarAccess.getFollowWordOpAccess().getLowercaseEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getFollowWordOpAccess().getLowercaseEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6=CircumflexAccentCircumflexAccent
			{
				$current = grammarAccess.getFollowWordOpAccess().getGreedyUppercaseEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getFollowWordOpAccess().getGreedyUppercaseEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7=CircumflexAccent
			{
				$current = grammarAccess.getFollowWordOpAccess().getUppercaseEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getFollowWordOpAccess().getUppercaseEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8=ColonPlusSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9=PlusSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getFollowWordOpAccess().getUseAlternateEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10=ColonHyphenMinus
			{
				$current = grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11=HyphenMinus
			{
				$current = grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getFollowWordOpAccess().getUseDefaultEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12=ColonEqualsSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13=EqualsSign
			{
				$current = grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getFollowWordOpAccess().getAssignDefaultEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14=ColonQuestionMark
			{
				$current = grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15=QuestionMark
			{
				$current = grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getFollowWordOpAccess().getErrorDefaultEnumLiteralDeclaration_15());
			}
		)
	)
;
