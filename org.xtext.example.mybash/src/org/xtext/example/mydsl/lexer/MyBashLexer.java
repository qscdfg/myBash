/* The following code was generated by JFlex 1.6.1 */

package org.xtext.example.mydsl.lexer;

import org.antlr.runtime.*;
import static org.xtext.example.mydsl.parser.antlr.lexer.InternalMyBashLexer.*;
import static org.antlr.runtime.Token.*;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Workspace/xtext/org.xtext.example.mybash/src/org/xtext/example/mydsl/lexer/MyBash.flex</tt>
 */
public class MyBashLexer extends MyBashLexerBase {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_PE_NAME = 2;
  public static final int S_DQ_STRING = 4;
  public static final int S_CS_D = 6;
  public static final int S_CS = 8;
  public static final int S_S_TEST = 10;
  public static final int S_ARITH = 12;
  public static final int S_B_STRING = 14;
  public static final int S_PE_START = 16;
  public static final int S_FOR_ARITH = 18;
  public static final int S_COND = 20;
  public static final int S_REGULAR = 22;
  public static final int S_HERE_DOC_E = 24;
  public static final int S_HERE_DOC = 26;
  public static final int S_ARITH_P = 28;
  public static final int S_AFTER_ARITH_NAME = 30;
  public static final int S_COND_P = 32;
  public static final int S_REGULAR_P = 34;
  public static final int S_B_ARITH = 36;
  public static final int S_SQ = 38;
  public static final int S_ARRAY = 40;
  public static final int S_CS_P = 42;
  public static final int S_A_ARITH = 44;
  public static final int S_A_ARITH_S = 46;
  public static final int S_COMMENTS = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  5,  5, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\2\0\1\3\22\0\1\2\1\24\1\15\1\11"+
    "\1\21\1\66\1\44\1\13\1\7\1\16\1\25\1\46\1\67\1\26"+
    "\1\0\1\14\1\27\1\72\10\20\1\71\1\1\1\40\1\12\1\6"+
    "\1\23\1\22\6\17\1\31\4\17\1\31\1\17\2\31\2\17\2\31"+
    "\7\17\1\47\1\10\1\30\1\70\1\17\1\5\1\51\1\31\1\50"+
    "\1\55\1\32\1\33\1\43\1\60\1\56\1\17\1\31\1\42\1\17"+
    "\1\34\1\36\1\53\1\41\1\54\1\52\1\35\1\57\1\65\1\61"+
    "\1\64\1\17\1\31\1\62\1\45\1\63\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\5\0\1\2\16\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\21"+
    "\1\3\3\20\1\24\1\20\1\25\1\26\2\3\6\20"+
    "\1\27\1\30\1\6\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\35\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\22\2\6\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\6\1\60\1\6"+
    "\1\61\1\62\1\40\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\35\1\22"+
    "\1\10\1\22\1\76\1\22\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\6\1\106\3\3\1\104\3\6"+
    "\1\107\1\6\1\70\1\110\1\6\1\111\1\112\2\0"+
    "\1\113\4\22\1\114\1\115\1\116\1\117\1\120\16\0"+
    "\1\121\2\0\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\0\1\131\1\14\2\0\1\132\1\3\1\133"+
    "\1\134\1\135\2\136\1\137\1\140\5\20\1\141\2\20"+
    "\1\142\1\143\1\144\1\145\1\146\2\20\1\147\1\150"+
    "\1\151\1\152\4\20\1\153\1\154\1\155\2\20\1\156"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
    "\1\167\2\0\1\170\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\0\1\201\1\202\1\203\1\204"+
    "\1\205\1\206\1\207\1\0\1\210\1\211\1\35\1\106"+
    "\1\212\4\213\1\3\1\214\1\215\1\216\1\217\1\220"+
    "\4\0\1\221\1\222\1\132\2\0\1\133\2\0\1\223"+
    "\5\20\1\224\2\20\1\225\1\226\7\20\1\227\1\230"+
    "\1\231\1\232\1\233\1\234\1\235\1\236\2\20\1\237"+
    "\1\20\1\240\2\20\1\241\6\20\1\242\1\243\1\20"+
    "\1\244\2\20\1\245";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u0725\0\u0725\0\u079b\0\u07d6\0\u0811\0\u0725\0\u084c"+
    "\0\u0725\0\u0725\0\u0725\0\u0887\0\u08c2\0\u08fd\0\u06af\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u06af\0\u06af\0\u0725\0\u0d23\0\u0725\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0e0f"+
    "\0\u0725\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0725\0\u0725\0\u0fe7\0\u0725\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u08fd\0\u0725\0\u110e\0\u1149\0\u1184\0\u0725\0\u0725\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u0725\0\u12e6\0\u0725\0\u1321"+
    "\0\u135c\0\u135c\0\u1397\0\u0725\0\u13d2\0\u0725\0\u0725\0\u0725"+
    "\0\u0725\0\u0725\0\u1397\0\u0725\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u13d2\0\u1534\0\u156f\0\u1397\0\u0725\0\u13d2\0\u0725"+
    "\0\u15aa\0\u15e5\0\u0725\0\u0725\0\u1620\0\u165b\0\u0725\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u0725\0\u0725\0\u0725\0\u0725\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u18e4\0\u0725\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u0725\0\u1a81"+
    "\0\u140d\0\u1abc\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725"+
    "\0\u1af7\0\u0725\0\u0725\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1a81\0\u1c59\0\u0725\0\u1c94\0\u0725\0\u06af\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u0887\0\u1df6\0\u1e31\0\u0725\0\u0725"+
    "\0\u0725\0\u0725\0\u0725\0\u1e6c\0\u1ea7\0\u1ee2\0\u0725\0\u0725"+
    "\0\u06af\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u0887\0\u0887"+
    "\0\u2044\0\u207f\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725"+
    "\0\u0725\0\u0725\0\u0725\0\u0725\0\u0f71\0\u20ba\0\u20f5\0\u0725"+
    "\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u2130"+
    "\0\u0725\0\u216b\0\u0725\0\u0725\0\u0725\0\u0725\0\u0725\0\u21a6"+
    "\0\u0725\0\u0725\0\u21e1\0\u06af\0\u06af\0\u06af\0\u221c\0\u2257"+
    "\0\u2292\0\u2257\0\u06af\0\u0725\0\u0725\0\u0725\0\u0725\0\u22cd"+
    "\0\u17f8\0\u2308\0\u2343\0\u0725\0\u0725\0\u0725\0\u237e\0\u23b9"+
    "\0\u0725\0\u23f4\0\u242f\0\u0725\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u0887\0\u2591\0\u25cc\0\u0887\0\u0725\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u0725\0\u27a4\0\u0725"+
    "\0\u27df\0\u0725\0\u0887\0\u0887\0\u0887\0\u281a\0\u2855\0\u0887"+
    "\0\u2890\0\u0887\0\u28cb\0\u2906\0\u0887\0\u2941\0\u297c\0\u29b7"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u0887\0\u0887\0\u2aa3\0\u0887\0\u2ade"+
    "\0\u2b19\0\u0887";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\36\1\52\1\53\1\54"+
    "\1\55\1\56\2\36\1\57\2\36\1\60\1\61\1\54"+
    "\1\62\1\63\1\54\1\64\1\54\1\36\1\65\1\54"+
    "\1\66\1\54\1\67\1\70\1\71\1\72\1\73\1\54"+
    "\1\74\2\54\1\75\1\76\1\77\1\54\1\100\1\101"+
    "\1\102\2\54\4\36\1\55\11\103\1\104\1\105\1\103"+
    "\1\106\2\103\1\107\1\110\1\103\1\111\1\112\1\103"+
    "\1\113\1\114\1\115\1\116\6\107\2\103\3\107\2\103"+
    "\1\117\1\120\12\107\1\103\1\121\2\107\1\122\1\123"+
    "\1\124\1\125\1\110\3\126\1\127\1\126\1\43\2\126"+
    "\1\130\4\126\1\131\3\126\1\56\51\126\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\36\1\52\1\132\1\54\1\55\1\56"+
    "\2\36\1\57\2\36\1\60\1\61\1\54\1\62\1\63"+
    "\1\54\1\64\1\54\1\36\1\65\1\54\1\66\1\54"+
    "\1\67\1\70\1\71\1\72\1\73\1\54\1\74\2\54"+
    "\1\75\1\76\1\77\1\54\1\100\1\101\1\102\2\54"+
    "\4\36\1\55\1\36\1\37\1\40\1\41\1\42\1\132"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\36\1\52"+
    "\1\53\1\54\1\55\1\56\2\36\1\57\2\36\1\60"+
    "\1\61\1\54\1\62\1\63\1\54\1\64\1\54\1\36"+
    "\1\65\1\54\1\66\1\54\1\67\1\70\1\71\1\72"+
    "\1\73\1\54\1\74\2\54\1\75\1\76\1\77\1\54"+
    "\1\100\1\101\1\102\2\54\4\36\1\55\75\103\1\40"+
    "\2\103\1\43\1\133\1\134\2\103\1\135\1\51\1\136"+
    "\1\52\1\137\1\140\1\110\1\141\1\103\1\142\1\143"+
    "\1\144\1\145\1\115\1\146\6\140\1\147\1\150\3\140"+
    "\1\151\1\152\1\153\1\103\12\140\2\103\2\140\1\154"+
    "\1\155\1\156\1\157\1\160\5\161\1\162\1\163\1\161"+
    "\1\103\2\161\1\51\1\164\1\52\3\161\1\56\16\161"+
    "\1\165\22\161\1\166\7\161\11\0\1\167\12\0\1\170"+
    "\46\0\1\103\1\171\1\40\2\103\1\43\1\133\1\134"+
    "\2\103\1\135\1\51\1\136\1\52\1\137\1\140\1\110"+
    "\1\141\1\103\1\142\1\143\1\144\1\145\1\115\1\146"+
    "\6\140\1\147\1\150\3\140\1\151\1\152\1\153\1\103"+
    "\12\140\2\103\2\140\1\154\1\155\1\156\1\157\1\160"+
    "\1\36\1\103\1\172\2\103\1\43\1\173\1\174\1\175"+
    "\1\103\1\176\1\51\1\36\1\52\1\103\2\36\1\56"+
    "\2\36\1\177\1\36\1\200\1\36\1\201\7\36\1\202"+
    "\3\36\1\203\1\204\26\36\1\103\1\172\2\103\1\43"+
    "\1\205\1\206\1\175\1\103\1\36\1\51\1\36\1\52"+
    "\1\103\2\36\1\56\16\36\1\207\3\36\1\103\1\210"+
    "\25\36\3\211\1\212\1\213\66\211\2\103\1\40\2\103"+
    "\1\43\1\133\1\134\2\103\1\135\1\51\1\136\1\52"+
    "\1\214\1\140\1\110\1\141\1\103\1\142\1\143\1\144"+
    "\1\145\1\115\1\146\6\140\1\147\1\150\3\140\1\151"+
    "\1\152\1\153\1\103\12\140\2\103\2\140\1\154\1\155"+
    "\1\156\1\157\1\160\2\0\1\40\23\0\1\215\17\0"+
    "\1\216\24\0\1\36\1\103\1\172\2\103\1\43\1\173"+
    "\1\174\1\175\1\103\1\176\1\51\1\36\1\52\1\217"+
    "\2\36\1\56\2\36\1\177\1\36\1\200\1\36\1\201"+
    "\7\36\1\202\3\36\1\203\1\204\25\36\6\220\1\221"+
    "\2\103\2\220\1\51\1\220\1\52\1\214\2\220\1\56"+
    "\16\220\1\222\32\220\2\103\1\40\2\103\1\43\1\133"+
    "\1\134\2\103\1\135\1\51\1\136\1\52\1\103\1\140"+
    "\1\110\1\141\1\103\1\142\1\143\1\144\1\145\1\115"+
    "\1\146\6\140\1\147\1\150\3\140\1\151\1\152\1\153"+
    "\1\103\12\140\1\103\1\166\2\140\1\154\1\155\1\156"+
    "\1\157\1\160\13\223\1\224\57\223\1\36\1\103\1\40"+
    "\2\103\1\43\1\205\1\103\1\175\1\103\1\36\1\51"+
    "\1\36\1\52\1\225\2\36\1\56\16\36\1\207\3\36"+
    "\2\103\26\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\36\1\52\1\225"+
    "\1\54\1\55\1\56\2\36\1\57\2\36\1\60\1\61"+
    "\1\54\1\62\1\63\1\54\1\64\1\54\1\36\1\65"+
    "\1\54\1\66\1\54\1\67\1\70\1\71\1\72\1\73"+
    "\1\54\1\74\2\54\1\75\1\76\1\77\1\54\1\100"+
    "\1\101\1\102\2\54\4\36\1\55\2\103\1\40\2\103"+
    "\1\43\1\133\1\134\2\103\1\135\1\51\1\136\1\52"+
    "\1\103\1\140\1\110\1\141\1\103\1\142\1\143\1\144"+
    "\1\145\1\115\1\226\6\140\1\147\1\150\3\140\1\151"+
    "\1\152\1\153\1\103\12\140\2\103\2\140\1\154\1\155"+
    "\1\156\1\157\1\160\47\103\1\227\34\103\1\230\61\103"+
    "\17\0\1\231\11\0\6\231\2\0\3\231\4\0\12\231"+
    "\2\0\2\231\5\0\1\232\2\233\2\0\1\232\1\233"+
    "\1\234\1\233\1\232\1\235\3\232\1\233\21\232\1\233"+
    "\3\232\2\233\25\232\1\236\2\237\2\0\1\236\1\237"+
    "\1\240\1\237\5\236\1\237\21\236\1\237\3\236\2\237"+
    "\1\236\1\241\23\236\12\0\1\242\33\0\1\243\24\0"+
    "\1\244\2\245\2\0\1\244\1\245\1\246\1\245\5\244"+
    "\1\245\21\244\1\245\3\244\2\245\25\244\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\2\36\1\247\1\36\1\247"+
    "\1\0\2\36\1\247\16\36\1\250\3\36\2\0\25\36"+
    "\1\0\1\252\42\0\1\253\125\0\1\42\74\0\1\254"+
    "\1\255\34\0\1\256\1\257\34\0\1\260\63\0\3\36"+
    "\1\261\1\262\66\36\1\50\4\0\1\263\1\264\1\0"+
    "\1\265\2\50\1\263\1\50\1\263\1\0\2\50\1\263"+
    "\16\50\1\264\3\50\2\0\25\50\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\6\54\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\12\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\271\1\0\1\251"+
    "\2\36\1\247\1\36\1\247\1\0\1\36\1\55\1\247"+
    "\5\36\1\55\10\36\1\271\3\36\2\0\24\36\1\55"+
    "\7\0\1\272\1\0\1\273\5\0\1\274\10\273\1\0"+
    "\6\274\2\0\3\274\4\0\12\274\1\275\1\0\2\274"+
    "\4\0\1\273\1\36\4\0\1\247\1\271\1\0\1\251"+
    "\2\36\1\247\1\36\1\247\1\0\2\36\1\247\16\36"+
    "\1\271\3\36\2\0\26\36\4\0\1\247\1\250\1\0"+
    "\1\251\2\36\1\247\1\36\1\247\1\0\2\36\1\247"+
    "\6\36\1\276\7\36\1\250\3\36\2\0\26\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\6\54"+
    "\1\36\1\250\1\54\1\277\1\54\2\0\1\267\1\270"+
    "\2\54\1\300\7\54\2\36\1\301\1\302\4\36\1\54"+
    "\1\36\4\0\1\247\1\250\1\0\1\251\1\36\1\266"+
    "\1\247\1\36\1\247\1\0\2\54\1\247\5\36\1\54"+
    "\1\36\5\54\1\303\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\6\54\1\304\1\305\2\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\10\54\1\306\1\54\2\36\2\54\4\36\1\54"+
    "\6\0\1\307\1\310\30\0\1\311\3\0\1\312\1\313"+
    "\25\0\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\1\54\1\314\3\54\1\315\1\36\1\250"+
    "\3\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54\6\0\1\316\35\0\1\317\73\0\1\320\25\0"+
    "\1\36\4\0\1\247\1\250\1\0\1\251\1\36\1\50"+
    "\1\247\1\36\1\247\1\0\2\36\1\247\16\36\1\250"+
    "\3\36\2\0\26\36\4\0\1\247\1\250\1\0\1\251"+
    "\2\36\1\247\1\36\1\247\1\0\2\36\1\247\16\36"+
    "\1\250\3\36\2\0\1\36\1\321\24\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\5\54\1\322"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\1\54\1\323"+
    "\10\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\1\54\1\324"+
    "\4\54\1\36\1\250\3\54\2\0\1\267\1\270\12\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\1\54\1\325\3\54"+
    "\1\326\1\36\1\250\3\54\2\0\1\267\1\270\12\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\2\54\1\327\1\330"+
    "\2\54\1\36\1\250\3\54\2\0\1\267\1\270\12\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\3\54\1\331\2\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\12\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\6\54\1\36\1\250\3\54"+
    "\2\0\1\267\1\270\10\54\1\332\1\54\2\36\2\54"+
    "\4\36\1\54\11\0\1\333\75\0\1\334\75\0\2\107"+
    "\6\0\1\107\1\0\6\107\2\0\3\107\4\0\12\107"+
    "\2\0\2\107\4\0\1\107\20\0\1\110\6\0\1\110"+
    "\42\0\1\110\22\0\1\335\2\0\1\335\133\0\1\336"+
    "\73\0\1\337\73\0\1\340\14\0\1\341\10\0\1\342"+
    "\2\0\1\343\17\0\1\344\24\0\3\126\1\345\1\126"+
    "\1\0\2\126\1\346\4\126\1\0\3\126\1\0\51\126"+
    "\4\0\1\126\66\0\3\126\1\261\1\262\66\126\6\0"+
    "\1\347\1\255\2\0\1\350\72\0\1\351\72\0\1\352"+
    "\76\0\1\353\73\0\2\140\6\0\1\140\1\0\6\140"+
    "\2\0\3\140\4\0\12\140\2\0\2\140\4\0\1\140"+
    "\12\0\1\354\72\0\1\355\12\0\1\356\57\0\1\357"+
    "\13\0\1\360\53\0\1\310\2\0\1\361\25\0\1\362"+
    "\44\0\1\363\31\0\1\364\40\0\1\365\32\0\1\366"+
    "\37\0\1\367\33\0\1\370\36\0\1\371\72\0\1\372"+
    "\100\0\1\110\6\0\1\373\42\0\1\110\6\161\1\0"+
    "\1\161\1\0\2\161\3\0\3\161\1\0\16\161\1\0"+
    "\22\161\1\0\7\161\7\0\1\255\72\0\1\310\63\0"+
    "\3\36\2\0\67\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\374\1\247\1\36\1\247\1\0\2\36\1\247"+
    "\15\36\1\375\1\250\3\36\2\0\26\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\374\1\247\1\36\1\247"+
    "\1\0\2\36\1\247\16\36\1\250\3\36\2\0\26\36"+
    "\4\0\1\247\1\250\1\0\1\251\2\36\1\247\1\36"+
    "\1\247\1\0\2\36\1\247\7\36\1\376\1\377\1\376"+
    "\1\u0100\1\376\1\u0101\1\36\1\250\1\36\1\u0102\1\u0100"+
    "\2\0\2\36\6\376\1\36\3\376\2\36\2\376\6\36"+
    "\4\0\1\247\1\250\1\0\1\251\2\36\1\247\1\36"+
    "\1\247\1\0\2\36\1\247\6\36\1\u0103\7\36\1\250"+
    "\3\36\2\0\25\36\44\0\1\u0104\73\0\1\u0105\25\0"+
    "\3\211\2\0\66\211\4\0\1\213\114\0\1\u0106\112\0"+
    "\1\u0107\24\0\7\220\2\0\2\220\1\0\1\220\2\0"+
    "\2\220\1\0\60\220\1\255\1\0\2\220\1\0\1\220"+
    "\2\0\2\220\1\0\60\220\1\310\1\0\2\220\1\0"+
    "\1\220\2\0\2\220\1\0\51\220\13\223\1\0\57\223"+
    "\3\230\2\0\66\230\17\0\2\231\6\0\1\231\1\0"+
    "\6\231\2\0\3\231\4\0\12\231\2\0\2\231\4\0"+
    "\1\231\1\232\2\233\2\0\3\233\2\232\1\235\1\233"+
    "\1\232\2\233\2\232\1\233\16\232\1\233\3\232\2\233"+
    "\25\232\10\0\1\u0108\70\0\1\u0108\1\0\1\u0108\27\0"+
    "\1\u0108\32\0\1\232\2\233\2\0\3\233\2\232\1\235"+
    "\1\233\1\232\2\233\2\232\1\233\16\232\1\233\3\232"+
    "\2\233\1\u0109\24\232\1\236\2\237\2\0\3\237\3\236"+
    "\1\237\1\236\2\237\2\236\1\237\16\236\1\237\3\236"+
    "\2\237\1\236\1\241\23\236\10\0\1\u010a\70\0\1\u010a"+
    "\1\0\1\u010a\27\0\1\u010a\44\0\1\242\60\0\1\244"+
    "\2\245\2\0\3\245\3\244\1\245\1\244\2\245\2\244"+
    "\1\245\16\244\1\245\3\244\2\245\25\244\10\0\1\u010b"+
    "\70\0\1\u010b\1\0\1\u010b\27\0\1\u010b\41\0\1\u010c"+
    "\127\0\1\u010d\32\0\1\262\75\0\1\263\63\0\3\50"+
    "\2\0\66\50\1\266\4\0\1\u010e\1\u010f\1\0\1\u0110"+
    "\2\266\1\u010e\1\266\1\u010e\1\0\2\266\1\u010e\16\266"+
    "\1\u010f\3\266\2\0\25\266\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\36\1\247\16\36\1\250\3\36\2\0\25\36\1\270"+
    "\4\0\1\u0111\1\u0112\1\0\1\u0113\2\270\1\u0111\1\270"+
    "\1\u0111\1\0\2\270\1\u0111\16\270\1\u0112\3\270\2\0"+
    "\25\270\7\0\1\u0114\102\0\2\274\6\0\1\274\1\0"+
    "\6\274\2\0\3\274\4\0\12\274\2\0\2\274\4\0"+
    "\1\274\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\2\54\1\u0115\3\54\1\u0116\3\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\6\54\1\36\1\250\3\54\2\0"+
    "\1\267\1\270\1\54\1\u0117\10\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\3\54\1\u0118\6\54\2\36\2\54\4\36\1\54"+
    "\1\36\4\0\1\247\1\250\1\0\1\251\1\36\1\266"+
    "\1\247\1\36\1\247\1\0\2\54\1\247\5\36\1\54"+
    "\1\36\6\54\1\36\1\250\3\54\2\0\1\267\1\270"+
    "\1\54\1\u0119\10\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\6\54\1\36\1\250\3\54\2\0\1\267\1\270\4\54"+
    "\1\u011a\5\54\2\36\2\54\4\36\1\54\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\3\54"+
    "\1\u011b\2\54\1\36\1\250\3\54\2\0\1\267\1\270"+
    "\12\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\1\54\1\u011c"+
    "\4\54\1\36\1\250\3\54\2\0\1\267\1\270\12\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\4\54\1\u011d\1\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\12\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\6\54\1\36\1\250\3\54"+
    "\2\0\1\267\1\270\1\302\11\54\2\36\2\54\4\36"+
    "\1\54\6\0\1\u011e\64\0\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\6\54\1\36\1\250"+
    "\3\54\2\0\1\267\1\270\3\54\1\u011f\6\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\6\54\1\36\1\250\3\54"+
    "\2\0\1\267\1\270\2\54\1\u0120\7\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\6\54\1\36\1\250\1\54\1\u0121"+
    "\1\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\1\u0122\11\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\3\54\1\u0123\2\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\12\54\2\36\2\54\4\36\1\54\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\4\54"+
    "\1\u0124\1\54\1\36\1\250\3\54\2\0\1\267\1\270"+
    "\12\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\6\54\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\6\54\1\u0125\3\54"+
    "\2\36\2\54\4\36\1\54\3\126\2\0\66\126\12\0"+
    "\1\u0126\77\0\1\u0127\11\0\6\u0127\2\0\3\u0127\4\0"+
    "\12\u0127\2\0\2\u0127\17\0\1\u0128\77\0\1\u0129\11\0"+
    "\6\u0129\2\0\3\u0129\4\0\12\u0129\2\0\2\u0129\16\0"+
    "\1\u012a\6\0\1\110\6\0\1\110\42\0\1\110\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\2\36\1\247\1\36"+
    "\1\247\1\0\2\36\1\247\11\36\1\374\4\36\1\250"+
    "\1\374\2\36\2\0\26\36\4\0\1\247\1\250\1\0"+
    "\1\251\2\36\1\247\1\36\1\247\1\0\2\36\1\247"+
    "\10\36\1\374\2\36\1\374\2\36\1\250\3\36\2\0"+
    "\26\36\4\0\1\247\1\250\1\0\1\251\2\36\1\247"+
    "\1\36\1\247\1\0\2\36\1\247\13\36\1\374\2\36"+
    "\1\250\3\36\2\0\25\36\1\232\2\233\2\0\4\233"+
    "\1\232\1\235\1\233\1\232\2\233\2\232\1\233\16\232"+
    "\1\233\3\232\2\233\25\232\1\236\2\237\2\0\4\237"+
    "\2\236\1\237\1\236\2\237\2\236\1\237\16\236\1\237"+
    "\3\236\2\237\1\236\1\241\23\236\1\244\2\245\2\0"+
    "\4\245\2\244\1\245\1\244\2\245\2\244\1\245\16\244"+
    "\1\245\3\244\2\245\25\244\7\0\1\u010e\63\0\3\266"+
    "\2\0\66\266\7\0\1\u0111\63\0\3\270\2\0\66\270"+
    "\1\36\4\0\1\247\1\250\1\0\1\251\1\36\1\266"+
    "\1\247\1\36\1\247\1\0\2\54\1\247\5\36\1\54"+
    "\1\36\1\54\1\u012b\4\54\1\36\1\250\3\54\2\0"+
    "\1\267\1\270\12\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\2\54\1\u012c\3\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\12\54\2\36\2\54\4\36\1\54\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\6\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\1\u012d\11\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\5\54\1\u012e\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\12\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\6\54\1\36\1\250\1\54\1\u011d"+
    "\1\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\1\u012f\11\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\3\54\1\u0130\2\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\12\54\2\36\2\54\4\36\1\54\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\6\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\4\54\1\u0131"+
    "\5\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\1\54\1\u0132"+
    "\4\54\1\36\1\250\3\54\2\0\1\267\1\270\12\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\1\54\1\u0133\4\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\12\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\6\54\1\36\1\250\1\54"+
    "\1\u0134\1\54\2\0\1\267\1\270\12\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\1\54\1\u0135\4\54\1\36\1\250"+
    "\3\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\6\54\1\u0136\3\54\2\36\2\54\4\36\1\54"+
    "\1\36\4\0\1\247\1\250\1\0\1\251\1\36\1\266"+
    "\1\247\1\36\1\247\1\0\2\54\1\247\5\36\1\54"+
    "\1\36\6\54\1\36\1\250\1\54\1\u0137\1\54\2\0"+
    "\1\267\1\270\12\54\2\36\2\54\4\36\1\54\17\0"+
    "\2\u0127\6\0\1\u0127\1\0\6\u0127\2\0\3\u0127\4\0"+
    "\12\u0127\2\0\2\u0127\4\0\1\u0127\17\0\2\u0129\6\0"+
    "\1\u0129\1\0\6\u0129\2\0\3\u0129\4\0\12\u0129\2\0"+
    "\2\u0129\4\0\1\u0129\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\6\54\1\36\1\250\3\54"+
    "\2\0\1\267\1\270\4\54\1\314\5\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\4\54\1\u0138\1\54\1\36\1\250"+
    "\3\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\5\54\1\u0139\1\36\1\250\3\54\2\0"+
    "\1\267\1\270\12\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\6\54\1\36\1\250\3\54\2\0\1\267\1\270\1\u013a"+
    "\11\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\6\54\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\1\54\1\u013b\10\54"+
    "\2\36\2\54\4\36\1\54\1\36\4\0\1\247\1\250"+
    "\1\0\1\251\1\36\1\266\1\247\1\36\1\247\1\0"+
    "\2\54\1\247\5\36\1\54\1\36\6\54\1\36\1\250"+
    "\1\54\1\u013c\1\54\2\0\1\267\1\270\12\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\1\54\1\u013d\4\54\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\12\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\6\54\1\36\1\250\3\54\2\0"+
    "\1\267\1\270\6\54\1\u013e\3\54\2\36\2\54\4\36"+
    "\1\54\1\36\4\0\1\247\1\250\1\0\1\251\1\36"+
    "\1\266\1\247\1\36\1\247\1\0\2\54\1\247\5\36"+
    "\1\54\1\36\6\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\1\u013f\11\54\2\36\2\54\4\36\1\54\1\36"+
    "\4\0\1\247\1\250\1\0\1\251\1\36\1\266\1\247"+
    "\1\36\1\247\1\0\2\54\1\247\5\36\1\54\1\36"+
    "\4\54\1\u013f\1\54\1\36\1\250\3\54\2\0\1\267"+
    "\1\270\12\54\2\36\2\54\4\36\1\54\1\36\4\0"+
    "\1\247\1\250\1\0\1\251\1\36\1\266\1\247\1\36"+
    "\1\247\1\0\2\54\1\247\5\36\1\54\1\36\6\54"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\4\54\1\u0140"+
    "\5\54\2\36\2\54\4\36\1\54\1\36\4\0\1\247"+
    "\1\250\1\0\1\251\1\36\1\266\1\247\1\36\1\247"+
    "\1\0\2\54\1\247\5\36\1\54\1\36\5\54\1\u0141"+
    "\1\36\1\250\3\54\2\0\1\267\1\270\12\54\2\36"+
    "\2\54\4\36\1\54\1\36\4\0\1\247\1\250\1\0"+
    "\1\251\1\36\1\266\1\247\1\36\1\247\1\0\2\54"+
    "\1\247\5\36\1\54\1\36\1\54\1\u011d\4\54\1\36"+
    "\1\250\3\54\2\0\1\267\1\270\12\54\2\36\2\54"+
    "\4\36\1\54\1\36\4\0\1\247\1\250\1\0\1\251"+
    "\1\36\1\266\1\247\1\36\1\247\1\0\2\54\1\247"+
    "\5\36\1\54\1\36\3\54\1\u0142\2\54\1\36\1\250"+
    "\3\54\2\0\1\267\1\270\12\54\2\36\2\54\4\36"+
    "\1\54";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\5\0\1\1\15\0\3\1\1\11\1\1"+
    "\2\11\3\1\1\11\1\1\3\11\27\1\1\11\1\1"+
    "\1\11\3\1\7\11\1\1\1\11\7\1\2\11\1\1"+
    "\1\11\5\1\1\11\3\1\2\11\5\1\1\11\1\1"+
    "\1\11\4\1\1\11\1\1\5\11\1\1\1\11\11\1"+
    "\1\11\1\1\1\11\2\1\2\11\2\0\1\11\4\1"+
    "\4\11\2\1\3\0\1\1\3\0\1\1\1\11\1\0"+
    "\1\1\2\0\1\11\2\0\1\1\6\11\1\0\2\11"+
    "\2\0\5\1\1\11\1\1\1\11\11\1\5\11\3\1"+
    "\2\11\12\1\12\11\2\0\1\1\10\11\1\0\1\11"+
    "\1\1\5\11\1\0\2\11\11\1\4\11\1\0\1\1"+
    "\1\0\1\1\3\11\2\0\1\11\2\0\1\11\11\1"+
    "\1\11\7\1\1\11\1\1\1\11\1\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    public int getCharIndex() {
    	return this.yychar;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyBashLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 		return newEof();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(S_PE_NAME);
            }
          case 166: break;
          case 2: 
            { popState();
            }
          case 167: break;
          case 3: 
            { return wordPart( RULE_S_WORD_PART );
            }
          case 168: break;
          case 4: 
            { return operatorNewCommand( Semicolon );
            }
          case 169: break;
          case 5: 
            { return space();
            }
          case 170: break;
          case 6: 
            { return operator( INVALID_TOKEN_TYPE );
            }
          case 171: break;
          case 7: 
            { return newline();
            }
          case 172: break;
          case 8: 
            { pushState(S_CS); Token token = wordPart( RULE_CS_START ); enterSubShell(); return token;
            }
          case 173: break;
          case 9: 
            { return operator( GreaterThanSign );
            }
          case 174: break;
          case 10: 
            { currentLexerState.inCaseP=false; return leftParenthesis();
            }
          case 175: break;
          case 11: 
            { if( inWord() ) { return wordPart(RULE_WORD_PART);} else { yypushback(1); pushState(S_COMMENTS); }
            }
          case 176: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 27;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 28;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return equal();
            }
          case 177: break;
          case 13: 
            { pushState(S_SQ); return wordPart( Apostrophe );
            }
          case 178: break;
          case 14: 
            { pushState(S_DQ_STRING); return wordPart( QuotationMark );
            }
          case 179: break;
          case 15: 
            { return operatorNewCommand( RightParenthesis );
            }
          case 180: break;
          case 16: 
            { return name( false );
            }
          case 181: break;
          case 17: 
            { return number(RULE_I_NUMBER);
            }
          case 182: break;
          case 18: 
            { return wordPart( RULE_WORD_PART );
            }
          case 183: break;
          case 19: 
            { return keywordNewCommand( ExclamationMark , false );
            }
          case 184: break;
          case 20: 
            { return operator( LessThanSign );
            }
          case 185: break;
          case 21: 
            { return operatorNewCommand( Ampersand );
            }
          case 186: break;
          case 22: 
            { return operatorNewCommand( VerticalLine );
            }
          case 187: break;
          case 23: 
            { return keywordNewCommand( LeftCurlyBracket , false );
            }
          case 188: break;
          case 24: 
            { return keywordNewCommand( RightCurlyBracket , false );
            }
          case 189: break;
          case 25: 
            { yybegin(S_B_STRING); return wordPart( NumberSign );
            }
          case 190: break;
          case 26: 
            { yybegin(S_B_STRING); return wordPart( EqualsSign );
            }
          case 191: break;
          case 27: 
            { currentLexerState.canbeSolidus = true; yybegin(S_B_STRING); return wordPart( Solidus );
            }
          case 192: break;
          case 28: 
            { return wordPart( RULE_NAME );
            }
          case 193: break;
          case 29: 
            { return wordPart( RULE_I_NUMBER );
            }
          case 194: break;
          case 30: 
            { return wordPart( CommercialAt );
            }
          case 195: break;
          case 31: 
            { yybegin(S_B_STRING); return wordPart( QuestionMark );
            }
          case 196: break;
          case 32: 
            { return wordPart( Asterisk );
            }
          case 197: break;
          case 33: 
            { yybegin(S_B_STRING); return wordPart( HyphenMinus );
            }
          case 198: break;
          case 34: 
            { return wordPart( RightSquareBracket );
            }
          case 199: break;
          case 35: 
            { yybegin(S_B_STRING); return wordPart( PlusSign );
            }
          case 200: break;
          case 36: 
            { pushState(S_ARITH); return wordPart( LeftSquareBracket );
            }
          case 201: break;
          case 37: 
            { popState(); exitSubShell(); return wordPart( RightCurlyBracket);
            }
          case 202: break;
          case 38: 
            { yybegin(S_B_STRING); return wordPart( PercentSign );
            }
          case 203: break;
          case 39: 
            { yybegin(S_B_STRING); return wordPart( Comma );
            }
          case 204: break;
          case 40: 
            { yybegin(S_B_STRING); return wordPart( CircumflexAccent );
            }
          case 205: break;
          case 41: 
            { yybegin(S_B_ARITH); return wordPart( Colon );
            }
          case 206: break;
          case 42: 
            { popState(); return wordPart( QuotationMark );
            }
          case 207: break;
          case 43: 
            { popState(); exitSubShell(); return wordPart( RULE_CS_END );
            }
          case 208: break;
          case 44: 
            { return wordPart( GreaterThanSign );
            }
          case 209: break;
          case 45: 
            { pushState(S_ARITH_P); return wordPart( LeftParenthesis );
            }
          case 210: break;
          case 46: 
            { return wordPart( EqualsSign );
            }
          case 211: break;
          case 47: 
            { return wordPart( Solidus );
            }
          case 212: break;
          case 48: 
            { pushState( S_AFTER_ARITH_NAME ); return wordPart( RULE_NAME );
            }
          case 213: break;
          case 49: 
            { return wordPart( QuestionMark );
            }
          case 214: break;
          case 50: 
            { return wordPart( ExclamationMark );
            }
          case 215: break;
          case 51: 
            { return wordPart( HyphenMinus );
            }
          case 216: break;
          case 52: 
            { popState(); return wordPart( RightSquareBracket );
            }
          case 217: break;
          case 53: 
            { return wordPart( Tilde );
            }
          case 218: break;
          case 54: 
            { return wordPart( LessThanSign );
            }
          case 219: break;
          case 55: 
            { return wordPart( Ampersand );
            }
          case 220: break;
          case 56: 
            { return wordPart( VerticalLine );
            }
          case 221: break;
          case 57: 
            { return wordPart( PlusSign );
            }
          case 222: break;
          case 58: 
            { return wordPart( PercentSign );
            }
          case 223: break;
          case 59: 
            { return wordPart( Comma );
            }
          case 224: break;
          case 60: 
            { return wordPart( CircumflexAccent );
            }
          case 225: break;
          case 61: 
            { return wordPart( Colon );
            }
          case 226: break;
          case 62: 
            { return solidusInBString();
            }
          case 227: break;
          case 63: 
            { popState(); exitSubShell(); return wordPart( RightCurlyBracket );
            }
          case 228: break;
          case 64: 
            { yybegin(S_PE_NAME); return wordPart( NumberSign );
            }
          case 229: break;
          case 65: 
            { yybegin(S_PE_NAME); return wordPart( ExclamationMark);
            }
          case 230: break;
          case 66: 
            { return wordPart( Semicolon );
            }
          case 231: break;
          case 67: 
            { return spaceInCondition();
            }
          case 232: break;
          case 68: 
            { return binaryOperatorNotWord( RULE_C_B_OP );
            }
          case 233: break;
          case 69: 
            { pushState( S_COND_P ); return conditionExpressionSplit( LeftParenthesis );
            }
          case 234: break;
          case 70: 
            { return binaryOperator( RULE_C_B_OP );
            }
          case 235: break;
          case 71: 
            { pushState( S_REGULAR_P ); return wordPart( LeftParenthesis );
            }
          case 236: break;
          case 72: 
            { return hereDocPart();
            }
          case 237: break;
          case 73: 
            { return hereDocNewLine();
            }
          case 238: break;
          case 74: 
            { popState(); return wordPart( RightParenthesis );
            }
          case 239: break;
          case 75: 
            { popState(); return conditionExpressionSplit( RightParenthesis );
            }
          case 240: break;
          case 76: 
            { popState(); return wordPart( Apostrophe );
            }
          case 241: break;
          case 77: 
            { popState(); exitSubShell(); return wordPart( RightParenthesis );
            }
          case 242: break;
          case 78: 
            { popState(); Token token = wordPart(RightSquareBracket); exitSubShell();  return token;
            }
          case 243: break;
          case 79: 
            { yybegin(S_A_ARITH); return wordPart(LeftSquareBracket);
            }
          case 244: break;
          case 80: 
            { popState(); return comment();
            }
          case 245: break;
          case 81: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return wordPart( RULE_WORD_PART );
            }
          case 246: break;
          case 82: 
            { currentLexerState.inCaseP=true; return operator( SemicolonSemicolon );
            }
          case 247: break;
          case 83: 
            { currentLexerState.inCaseP=true; return operator( SemicolonAmpersand );
            }
          case 248: break;
          case 84: 
            { return operator( GreaterThanSignGreaterThanSign );
            }
          case 249: break;
          case 85: 
            { pushState(S_CS_P); enterSubShell(); return wordPart( GreaterThanSignLeftParenthesis );
            }
          case 250: break;
          case 86: 
            { return operator( GreaterThanSignAmpersand );
            }
          case 251: break;
          case 87: 
            { return operator( GreaterThanSignVerticalLine );
            }
          case 252: break;
          case 88: 
            { return operatorDParentheses();
            }
          case 253: break;
          case 89: 
            { return newToken( RULE_C_LINE, HIDDEN_CHANNEL );
            }
          case 254: break;
          case 90: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 24;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 25;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return name( true );
            }
          case 255: break;
          case 91: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 24;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 26;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { Token token = name(true); 
												if(token.getType() == RULE_NAME) {
													enterSubShell();
													pushState(S_A_ARITH_S);
												}
												return token;
            }
          case 256: break;
          case 92: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return wordPart( RULE_I_NUMBER );
            }
          case 257: break;
          case 93: 
            { pushState(S_CS_D); Token token = wordPart( RULE_CS_START ); enterSubShell(); return token;
            }
          case 258: break;
          case 94: 
            { return wordPart( RULE_VARIABLE );
            }
          case 259: break;
          case 95: 
            { pushState(S_PE_START); enterSubShell(); return wordPart( DollarSignLeftCurlyBracket );
            }
          case 260: break;
          case 96: 
            { currentLexerState.currentConditionExpression=null; return keyword( RightSquareBracketRightSquareBracket );
            }
          case 261: break;
          case 97: 
            { return keywordNewCommand( Fi );
            }
          case 262: break;
          case 98: 
            { return operator( LessThanSignGreaterThanSign );
            }
          case 263: break;
          case 99: 
            { pushState(S_CS_P); enterSubShell(); return wordPart( LessThanSignLeftParenthesis );
            }
          case 264: break;
          case 100: 
            { Token token = operator( LessThanSignLessThanSign ); setNextWord(new RealWord()); return token;
            }
          case 265: break;
          case 101: 
            { return operator( LessThanSignAmpersand );
            }
          case 266: break;
          case 102: 
            { return operator( LessThanSignVerticalLine );
            }
          case 267: break;
          case 103: 
            { return operator( AmpersandGreaterThanSign );
            }
          case 268: break;
          case 104: 
            { return operatorNewCommand( AmpersandAmpersand );
            }
          case 269: break;
          case 105: 
            { return operatorNewCommand( VerticalLineVerticalLine );
            }
          case 270: break;
          case 106: 
            { return keywordNewState( LeftSquareBracketLeftSquareBracket , false , S_COND );
            }
          case 271: break;
          case 107: 
            { return keywordNewCommand( Do );
            }
          case 272: break;
          case 108: 
            { return keywordNewCommand( If );
            }
          case 273: break;
          case 109: 
            { return keyword( In );
            }
          case 274: break;
          case 110: 
            { yybegin(S_B_STRING); return wordPart( NumberSignNumberSign );
            }
          case 275: break;
          case 111: 
            { currentLexerState.canbeSolidus = true; yybegin(S_B_STRING); return wordPart( SolidusSolidus );
            }
          case 276: break;
          case 112: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { return wordPart( LeftSquareBracket );
            }
          case 277: break;
          case 113: 
            { yybegin(S_B_STRING); return wordPart( PercentSignPercentSign );
            }
          case 278: break;
          case 114: 
            { yybegin(S_B_STRING); return wordPart( CommaComma );
            }
          case 279: break;
          case 115: 
            { yybegin(S_B_STRING); return wordPart( CircumflexAccentCircumflexAccent );
            }
          case 280: break;
          case 116: 
            { yybegin(S_B_STRING); return wordPart( ColonEqualsSign );
            }
          case 281: break;
          case 117: 
            { yybegin(S_B_STRING); return wordPart( ColonQuestionMark );
            }
          case 282: break;
          case 118: 
            { yybegin(S_B_STRING); return wordPart( ColonHyphenMinus );
            }
          case 283: break;
          case 119: 
            { yybegin(S_B_STRING); return wordPart( ColonPlusSign );
            }
          case 284: break;
          case 120: 
            { return wordPart( GreaterThanSignGreaterThanSign );
            }
          case 285: break;
          case 121: 
            { return wordPart( GreaterThanSignEqualsSign );
            }
          case 286: break;
          case 122: 
            { return wordPart( EqualsSignEqualsSign );
            }
          case 287: break;
          case 123: 
            { return wordPart( SolidusEqualsSign );
            }
          case 288: break;
          case 124: 
            { popState(); return wordPart( RightParenthesisRightParenthesis );
            }
          case 289: break;
          case 125: 
            { return wordPart( ExclamationMarkEqualsSign );
            }
          case 290: break;
          case 126: 
            { return wordPart( AsteriskEqualsSign );
            }
          case 291: break;
          case 127: 
            { return wordPart( AsteriskAsterisk );
            }
          case 292: break;
          case 128: 
            { return wordPart( HyphenMinusEqualsSign );
            }
          case 293: break;
          case 129: 
            { return wordPart( LessThanSignEqualsSign );
            }
          case 294: break;
          case 130: 
            { return wordPart( LessThanSignLessThanSign );
            }
          case 295: break;
          case 131: 
            { return wordPart( AmpersandEqualsSign );
            }
          case 296: break;
          case 132: 
            { return wordPart( AmpersandAmpersand );
            }
          case 297: break;
          case 133: 
            { return wordPart( VerticalLineEqualsSign );
            }
          case 298: break;
          case 134: 
            { return wordPart( VerticalLineVerticalLine );
            }
          case 299: break;
          case 135: 
            { return wordPart( PlusSignEqualsSign );
            }
          case 300: break;
          case 136: 
            { return wordPart( PercentSignEqualsSign );
            }
          case 301: break;
          case 137: 
            { return wordPart( CircumflexAccentEqualsSign );
            }
          case 302: break;
          case 138: 
            { Token type = binaryOperator( EqualsSignTilde ); pushStateUntilNextWord( S_REGULAR ); return type;
            }
          case 303: break;
          case 139: 
            { return unaryOperator( RULE_C_S_OP );
            }
          case 304: break;
          case 140: 
            { popUntil( S_COND ); currentLexerState.currentConditionExpression=null; return wordPart( RightSquareBracketRightSquareBracket );
            }
          case 305: break;
          case 141: 
            { return conditionExpressionSplit( AmpersandAmpersand );
            }
          case 306: break;
          case 142: 
            { return conditionExpressionSplit( VerticalLineVerticalLine );
            }
          case 307: break;
          case 143: 
            { popState(); return wordPart( HyphenMinusHyphenMinus );
            }
          case 308: break;
          case 144: 
            { popState(); return wordPart( PlusSignPlusSign );
            }
          case 309: break;
          case 145: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return wordPart( RULE_WORD_PART );
            }
          case 310: break;
          case 146: 
            { currentLexerState.inCaseP=true; return operator( SemicolonSemicolonAmpersand );
            }
          case 311: break;
          case 147: 
            { pushState(S_ARITH); return wordPart( DollarSignLeftParenthesisLeftParenthesis );
            }
          case 312: break;
          case 148: 
            { return keyword( For );
            }
          case 313: break;
          case 149: 
            { return assignableWord();
            }
          case 314: break;
          case 150: 
            { return operator( AmpersandGreaterThanSignGreaterThanSign );
            }
          case 315: break;
          case 151: 
            { return wordPart( GreaterThanSignGreaterThanSignEqualsSign );
            }
          case 316: break;
          case 152: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return wordPart( HyphenMinusHyphenMinus );
            }
          case 317: break;
          case 153: 
            { return wordPart( LessThanSignLessThanSignEqualsSign );
            }
          case 318: break;
          case 154: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return wordPart( PlusSignPlusSign );
            }
          case 319: break;
          case 155: 
            { return wordPart( RULE_A_PREFIX );
            }
          case 320: break;
          case 156: 
            { return keywordNewCommand( Else );
            }
          case 321: break;
          case 157: 
            { return keywordNewCommand( Elif );
            }
          case 322: break;
          case 158: 
            { Token token = keywordNewCommand( Esac ); if(token.getType() == Esac) {currentLexerState.inCaseP=false;} return token;
            }
          case 323: break;
          case 159: 
            { return keywordNewCommand( Then );
            }
          case 324: break;
          case 160: 
            { Token token = keyword( Case ); if(token.getType() == Case) {currentLexerState.inCaseP=true;} return token;
            }
          case 325: break;
          case 161: 
            { return keywordNewCommand( Done );
            }
          case 326: break;
          case 162: 
            { return keywordNewCommand( -1 );
            }
          case 327: break;
          case 163: 
            { return keywordNewCommand( While );
            }
          case 328: break;
          case 164: 
            { return keyword( -1 );
            }
          case 329: break;
          case 165: 
            { return keyword( Function );
            }
          case 330: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
