/* The following code was generated by JFlex 1.6.1 */

package org.xtext.example.mydsl.lexer;

import org.antlr.runtime.*;
import static org.xtext.example.mydsl.parser.antlr.lexer.InternalMyBashLexer.*;
import static org.antlr.runtime.Token.*;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Workspace/xtext/New folder/mybash/abcdefg/mybash/org.xtext.example.mybash/src/org/xtext/example/mydsl/lexer/MyBash.flex</tt>
 */
public class MyBashLexer extends MyBashLexerBase {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_PE_NAME = 2;
  public static final int S_DQ_STRING = 4;
  public static final int S_CS_D = 6;
  public static final int S_CS = 8;
  public static final int S_S_TEST = 10;
  public static final int S_ARITH = 12;
  public static final int S_B_STRING = 14;
  public static final int S_PE_START = 16;
  public static final int S_FOR_ARITH = 18;
  public static final int S_COND = 20;
  public static final int S_REGULAR = 22;
  public static final int S_HERE_DOC_E = 24;
  public static final int S_HERE_DOC = 26;
  public static final int S_ARITH_P = 28;
  public static final int S_AFTER_ARITH_NAME = 30;
  public static final int S_COND_P = 32;
  public static final int S_REGULAR_P = 34;
  public static final int S_B_ARITH = 36;
  public static final int S_SQ = 38;
  public static final int S_ARRAY = 40;
  public static final int S_CS_P = 42;
  public static final int S_A_ARITH = 44;
  public static final int S_A_ARITH_S = 46;
  public static final int S_COMMENTS = 48;
  public static final int S_HERE_DOC_WORD = 50;
  public static final int S_HEREDOC_DQ = 52;
  public static final int S_HEREDOC_AE = 54;
  public static final int S_HEREDOC_CS = 56;
  public static final int S_HEREDOC_CS_P = 58;
  public static final int S_HEREDOC_PE = 60;
  public static final int S_HEREDOC_Q = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  5,  5, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\2\0\1\3\22\0\1\2\1\23\1\5\1\11"+
    "\1\20\1\66\1\43\1\13\1\7\1\15\1\24\1\46\1\67\1\25"+
    "\1\0\1\14\1\26\1\72\10\17\1\71\1\1\1\37\1\12\1\6"+
    "\1\22\1\21\6\16\1\30\4\16\1\30\1\16\2\30\2\16\2\30"+
    "\7\16\1\47\1\10\1\27\1\70\1\16\1\45\1\51\1\30\1\50"+
    "\1\55\1\31\1\32\1\42\1\60\1\56\1\16\1\30\1\41\1\16"+
    "\1\33\1\35\1\53\1\40\1\54\1\52\1\34\1\57\1\65\1\61"+
    "\1\64\1\16\1\30\1\62\1\44\1\63\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\5\0\1\2\25\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\20\1\3"+
    "\3\17\1\23\1\17\1\24\1\25\1\26\2\3\6\17"+
    "\1\27\1\30\1\6\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\35\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\21\1\6\1\52"+
    "\1\6\1\53\1\54\1\55\1\56\1\57\1\6\1\60"+
    "\1\6\1\61\1\62\1\40\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\35"+
    "\2\21\1\76\1\21\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\6\1\106\3\3\1\104\3\6\1\107"+
    "\1\6\1\70\1\110\1\6\1\111\1\112\2\0\1\113"+
    "\4\21\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\6\1\124\1\6\1\125\1\121\1\126\1\121"+
    "\1\6\1\127\1\6\1\121\1\130\1\6\1\131\1\6"+
    "\1\132\2\121\1\133\16\0\1\134\2\0\1\135\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\1\0\1\144\1\14"+
    "\2\0\1\145\1\3\1\146\1\147\1\150\2\151\1\152"+
    "\1\153\5\17\1\154\2\17\1\155\1\156\1\157\1\160"+
    "\1\161\2\17\1\162\1\163\1\164\1\165\4\17\1\166"+
    "\1\167\1\170\2\17\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\2\0\1\203\1\204"+
    "\1\205\1\206\1\207\1\210\1\211\1\212\1\213\1\0"+
    "\1\214\1\215\1\216\1\217\1\220\1\221\1\222\1\0"+
    "\1\223\1\224\1\35\1\106\1\225\4\226\1\3\1\227"+
    "\1\230\1\231\1\232\1\233\1\0\1\234\1\235\3\0"+
    "\1\236\1\237\4\0\1\240\1\241\1\145\2\0\1\146"+
    "\2\0\1\242\5\17\1\243\2\17\1\244\1\245\7\17"+
    "\1\246\1\247\1\250\1\251\1\252\1\253\1\254\1\255"+
    "\1\256\2\17\1\257\1\17\1\260\2\17\1\261\6\17"+
    "\1\262\1\263\1\17\1\264\2\17\1\265";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u08c2\0\u08c2\0\u0938\0\u0973\0\u09ae\0\u08c2\0\u09e9\0\u08c2"+
    "\0\u08c2\0\u0a24\0\u0a5f\0\u0a9a\0\u084c\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u08c2\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u084c"+
    "\0\u084c\0\u08c2\0\u0ec0\0\u08c2\0\u0efb\0\u0f36\0\u0f71\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u0fac\0\u08c2"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u08c2\0\u1149"+
    "\0\u08c2\0\u1184\0\u08c2\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u0a9a"+
    "\0\u08c2\0\u12ab\0\u12e6\0\u1321\0\u08c2\0\u08c2\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u08c2\0\u1483\0\u08c2\0\u14be\0\u14f9"+
    "\0\u1534\0\u08c2\0\u156f\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2"+
    "\0\u1534\0\u08c2\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u156f"+
    "\0\u16d1\0\u170c\0\u1534\0\u08c2\0\u156f\0\u08c2\0\u1747\0\u1782"+
    "\0\u08c2\0\u08c2\0\u17bd\0\u17f8\0\u08c2\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u191f\0\u195a\0\u08c2"+
    "\0\u08c2\0\u1995\0\u08c2\0\u19d0\0\u08c2\0\u1a0b\0\u08c2\0\u1a46"+
    "\0\u1a81\0\u08c2\0\u1abc\0\u1af7\0\u08c2\0\u1b32\0\u08c2\0\u1b6d"+
    "\0\u08c2\0\u1ba8\0\u1be3\0\u08c2\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1d45\0\u08c2\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u08c2\0\u1ee2\0\u15aa\0\u1f1d\0\u08c2\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u1f58\0\u08c2\0\u08c2\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u1ee2\0\u20ba\0\u08c2\0\u20f5"+
    "\0\u08c2\0\u084c\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u0a24"+
    "\0\u2257\0\u2292\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u22cd"+
    "\0\u2308\0\u2343\0\u08c2\0\u08c2\0\u084c\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u0a24\0\u0a24\0\u24a5\0\u24e0\0\u08c2\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2"+
    "\0\u110e\0\u251b\0\u2556\0\u08c2\0\u08c2\0\u08c2\0\u08c2\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u2591\0\u08c2\0\u25cc\0\u08c2\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u2607\0\u08c2\0\u08c2\0\u2642\0\u084c"+
    "\0\u084c\0\u084c\0\u267d\0\u26b8\0\u26f3\0\u26b8\0\u084c\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u08c2\0\u19d0\0\u272e\0\u08c2\0\u1a81\0\u2769"+
    "\0\u27a4\0\u08c2\0\u08c2\0\u27df\0\u1c59\0\u281a\0\u2855\0\u08c2"+
    "\0\u08c2\0\u08c2\0\u2890\0\u28cb\0\u08c2\0\u2906\0\u2941\0\u08c2"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u0a24\0\u2aa3\0\u2ade"+
    "\0\u0a24\0\u08c2\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u2c7b\0\u08c2\0\u2cb6\0\u08c2\0\u2cf1\0\u08c2\0\u08c2\0\u0a24"+
    "\0\u0a24\0\u0a24\0\u2d2c\0\u2d67\0\u0a24\0\u2da2\0\u0a24\0\u2ddd"+
    "\0\u2e18\0\u0a24\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u0a24\0\u0a24\0\u2fb5\0\u0a24\0\u2ff0\0\u302b\0\u0a24";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\45\1\61\1\62\1\63"+
    "\1\64\2\45\1\65\2\45\1\66\1\67\1\62\1\70"+
    "\1\71\1\62\1\72\1\62\1\45\1\73\1\62\1\74"+
    "\1\62\1\75\1\76\1\77\1\100\1\101\1\102\1\62"+
    "\1\103\2\62\1\104\1\105\1\106\1\62\1\107\1\110"+
    "\1\111\2\62\4\45\1\63\11\112\1\113\1\114\1\112"+
    "\1\115\1\112\1\116\1\117\1\112\1\120\1\121\1\112"+
    "\1\122\1\123\1\124\1\125\6\116\2\112\3\116\3\112"+
    "\1\126\1\127\12\116\1\112\1\130\2\116\1\131\1\132"+
    "\1\133\1\134\1\117\3\135\1\136\1\135\1\137\2\135"+
    "\1\140\7\135\1\64\24\135\1\77\25\135\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\45\1\141\1\62\1\63\1\64\2\45"+
    "\1\65\2\45\1\66\1\67\1\62\1\70\1\71\1\62"+
    "\1\72\1\62\1\45\1\73\1\62\1\74\1\62\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\62\1\103\2\62"+
    "\1\104\1\105\1\106\1\62\1\107\1\110\1\111\2\62"+
    "\4\45\1\63\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\45\1\61"+
    "\1\62\1\63\1\64\2\45\1\65\2\45\1\66\1\67"+
    "\1\62\1\70\1\71\1\62\1\72\1\62\1\45\1\73"+
    "\1\62\1\74\1\62\1\75\1\76\1\141\1\100\1\101"+
    "\1\102\1\62\1\103\2\62\1\104\1\105\1\106\1\62"+
    "\1\107\1\110\1\111\2\62\4\45\1\63\75\112\1\47"+
    "\2\112\1\52\1\142\1\143\2\112\1\144\1\60\1\145"+
    "\1\146\1\147\1\117\1\150\1\112\1\151\1\152\1\153"+
    "\1\154\1\124\1\155\6\147\1\156\1\157\3\147\1\160"+
    "\1\161\1\77\1\162\1\112\12\147\2\112\2\147\1\163"+
    "\1\164\1\165\1\166\1\167\5\170\1\52\1\171\1\170"+
    "\1\112\2\170\1\60\1\172\3\170\1\64\16\170\1\173"+
    "\5\170\1\77\15\170\1\174\7\170\11\0\1\175\11\0"+
    "\1\176\47\0\1\112\1\177\1\47\2\112\1\52\1\142"+
    "\1\143\2\112\1\144\1\60\1\145\1\146\1\147\1\117"+
    "\1\150\1\112\1\151\1\152\1\153\1\154\1\124\1\155"+
    "\6\147\1\156\1\157\3\147\1\160\1\161\1\77\1\162"+
    "\1\112\12\147\2\112\2\147\1\163\1\164\1\165\1\166"+
    "\1\167\1\45\1\112\1\200\2\112\1\52\1\201\1\202"+
    "\1\203\1\112\1\204\1\60\1\45\1\112\2\45\1\64"+
    "\2\45\1\205\1\45\1\206\1\45\1\207\7\45\1\210"+
    "\3\45\1\211\1\212\1\77\26\45\1\112\1\200\2\112"+
    "\1\52\1\213\1\214\1\203\1\112\1\45\1\60\1\45"+
    "\1\112\2\45\1\64\16\45\1\215\3\45\1\112\1\216"+
    "\1\77\25\45\3\217\1\220\1\221\66\217\2\112\1\47"+
    "\2\112\1\52\1\142\1\143\2\112\1\144\1\60\1\145"+
    "\1\222\1\147\1\117\1\150\1\112\1\151\1\152\1\153"+
    "\1\154\1\124\1\155\6\147\1\156\1\157\3\147\1\160"+
    "\1\161\1\77\1\162\1\112\12\147\2\112\2\147\1\163"+
    "\1\164\1\165\1\166\1\167\2\0\1\47\22\0\1\223"+
    "\20\0\1\224\24\0\1\45\1\112\1\200\2\112\1\52"+
    "\1\201\1\202\1\203\1\112\1\204\1\60\1\45\1\225"+
    "\2\45\1\64\2\45\1\205\1\45\1\206\1\45\1\207"+
    "\7\45\1\210\3\45\1\211\1\212\1\77\25\45\5\226"+
    "\1\52\1\227\2\112\2\226\1\60\1\226\1\222\2\226"+
    "\1\64\16\226\1\230\5\226\1\77\25\226\2\112\1\47"+
    "\2\112\1\52\1\142\1\143\2\112\1\144\1\60\1\145"+
    "\1\112\1\147\1\117\1\150\1\112\1\151\1\152\1\153"+
    "\1\154\1\124\1\155\6\147\1\156\1\157\3\147\1\160"+
    "\1\161\1\77\1\162\1\112\12\147\1\112\1\174\2\147"+
    "\1\163\1\164\1\165\1\166\1\167\13\231\1\232\57\231"+
    "\1\45\1\112\1\47\2\112\1\52\1\213\1\112\1\203"+
    "\1\112\1\45\1\60\1\45\1\233\2\45\1\64\16\45"+
    "\1\215\3\45\2\112\1\77\26\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\45\1\233\1\62\1\63\1\64\2\45\1\65\2\45"+
    "\1\66\1\67\1\62\1\70\1\71\1\62\1\72\1\62"+
    "\1\45\1\73\1\62\1\74\1\62\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\62\1\103\2\62\1\104\1\105"+
    "\1\106\1\62\1\107\1\110\1\111\2\62\4\45\1\63"+
    "\2\112\1\47\2\112\1\52\1\142\1\143\2\112\1\144"+
    "\1\60\1\145\1\112\1\147\1\117\1\150\1\112\1\151"+
    "\1\152\1\153\1\154\1\124\1\234\6\147\1\156\1\157"+
    "\3\147\1\160\1\161\1\77\1\162\1\112\12\147\2\112"+
    "\2\147\1\163\1\164\1\165\1\166\1\167\47\112\1\235"+
    "\34\112\1\236\61\112\1\237\1\240\1\241\1\242\1\240"+
    "\1\243\2\240\1\244\1\112\1\237\1\245\1\237\1\240"+
    "\2\237\1\246\16\237\1\240\3\237\2\240\1\247\25\237"+
    "\3\250\1\251\1\250\1\252\2\250\1\253\7\250\1\246"+
    "\24\250\1\247\25\250\5\254\1\255\1\254\1\112\1\256"+
    "\2\254\1\257\1\254\1\260\2\254\1\246\24\254\1\247"+
    "\32\254\1\255\1\254\1\112\1\256\2\254\1\257\1\254"+
    "\1\112\2\254\1\246\24\254\1\247\32\254\1\255\1\254"+
    "\1\112\1\256\2\254\1\257\1\254\1\261\2\254\1\246"+
    "\24\254\1\247\25\254\5\262\1\255\1\112\1\262\1\256"+
    "\2\262\1\257\1\112\3\262\1\246\16\262\1\112\5\262"+
    "\1\247\15\262\1\261\7\262\13\263\1\264\57\263\16\0"+
    "\1\265\11\0\6\265\2\0\3\265\5\0\12\265\2\0"+
    "\2\265\5\0\1\266\2\267\2\0\1\266\1\267\1\270"+
    "\1\267\1\266\1\271\2\266\1\267\21\266\1\267\3\266"+
    "\2\267\26\266\1\272\2\273\2\0\1\272\1\273\1\274"+
    "\1\273\4\272\1\273\21\272\1\273\3\272\2\273\2\272"+
    "\1\275\23\272\12\0\1\276\33\0\1\277\24\0\1\300"+
    "\2\301\2\0\1\300\1\301\1\302\1\301\4\300\1\301"+
    "\21\300\1\301\3\300\2\301\26\300\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\2\45\1\303\1\45\1\0\2\45"+
    "\1\303\16\45\1\304\3\45\2\0\1\303\25\45\1\0"+
    "\1\306\41\0\1\307\126\0\1\51\74\0\1\310\1\311"+
    "\33\0\1\312\1\313\35\0\1\314\63\0\3\45\1\315"+
    "\1\316\66\45\1\57\4\0\1\317\1\320\1\0\1\321"+
    "\2\57\1\317\1\57\1\0\2\57\1\317\16\57\1\320"+
    "\3\57\2\0\1\317\25\57\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\6\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\12\62\2\45\2\62\4\45"+
    "\1\62\1\45\4\0\1\303\1\325\1\0\1\305\2\45"+
    "\1\303\1\45\1\0\1\45\1\63\1\303\5\45\1\63"+
    "\10\45\1\325\3\45\2\0\1\303\24\45\1\63\7\0"+
    "\1\326\1\0\1\327\4\0\1\330\10\327\1\0\6\330"+
    "\2\0\3\330\5\0\12\330\1\331\1\0\2\330\4\0"+
    "\1\327\1\45\4\0\1\303\1\325\1\0\1\305\2\45"+
    "\1\303\1\45\1\0\2\45\1\303\16\45\1\325\3\45"+
    "\2\0\1\303\26\45\4\0\1\303\1\304\1\0\1\305"+
    "\2\45\1\303\1\45\1\0\2\45\1\303\6\45\1\332"+
    "\7\45\1\304\3\45\2\0\1\303\26\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\6\62\1\45\1\304"+
    "\1\62\1\333\1\62\2\0\1\303\1\323\1\324\2\62"+
    "\1\334\7\62\2\45\1\335\1\336\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\5\62"+
    "\1\337\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\6\62\1\340\1\341\2\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\6\62\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\10\62\1\342\1\62\2\45\2\62\4\45\1\62\6\0"+
    "\1\343\1\344\27\0\1\345\3\0\1\346\1\347\26\0"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\1\62\1\350\3\62\1\351\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\6\0\1\352\34\0\1\353\73\0\1\354\26\0\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\57\1\303"+
    "\1\45\1\0\2\45\1\303\16\45\1\304\3\45\2\0"+
    "\1\303\26\45\4\0\1\303\1\304\1\0\1\305\2\45"+
    "\1\303\1\45\1\0\2\45\1\303\16\45\1\304\3\45"+
    "\2\0\1\303\1\45\1\355\24\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\5\62\1\356\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\1\62\1\357\10\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\1\62\1\360\4\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\12\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\1\62\1\361\3\62\1\362\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\12\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\2\62\1\363\1\364\2\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\12\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\3\62\1\365\2\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\12\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\6\62\1\45\1\304\3\62\2\0\1\303"+
    "\1\323\1\324\10\62\1\366\1\62\2\45\2\62\4\45"+
    "\1\62\11\0\1\367\75\0\1\370\74\0\2\116\6\0"+
    "\1\116\1\0\6\116\2\0\3\116\5\0\12\116\2\0"+
    "\2\116\4\0\1\116\17\0\1\117\6\0\1\117\43\0"+
    "\1\117\21\0\1\371\2\0\1\371\134\0\1\372\73\0"+
    "\1\373\73\0\1\374\14\0\1\375\7\0\1\376\2\0"+
    "\1\377\20\0\1\u0100\24\0\3\135\1\u0101\1\135\1\0"+
    "\2\135\1\u0102\7\135\1\0\24\135\1\0\25\135\4\0"+
    "\1\135\66\0\3\135\1\315\1\316\66\135\6\0\1\u0103"+
    "\1\311\2\0\1\u0104\72\0\1\u0105\72\0\1\u0106\75\0"+
    "\1\u0107\73\0\2\147\6\0\1\147\1\0\6\147\2\0"+
    "\3\147\5\0\12\147\2\0\2\147\4\0\1\147\12\0"+
    "\1\u0108\72\0\1\u0109\11\0\1\u010a\60\0\1\u010b\12\0"+
    "\1\u010c\54\0\1\344\2\0\1\u010d\24\0\1\u010e\45\0"+
    "\1\u010f\30\0\1\u0110\41\0\1\u0111\31\0\1\u0112\40\0"+
    "\1\u0113\33\0\1\u0114\36\0\1\u0115\72\0\1\u0116\77\0"+
    "\1\117\6\0\1\u0117\43\0\1\117\5\170\2\0\1\170"+
    "\1\0\2\170\2\0\3\170\1\0\16\170\1\0\5\170"+
    "\1\0\15\170\1\0\7\170\7\0\1\311\72\0\1\344"+
    "\63\0\3\45\2\0\67\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\u0118\1\303\1\45\1\0\2\45\1\303"+
    "\15\45\1\u0119\1\304\3\45\2\0\1\303\26\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\u0118\1\303\1\45"+
    "\1\0\2\45\1\303\16\45\1\304\3\45\2\0\1\303"+
    "\26\45\4\0\1\303\1\304\1\0\1\305\2\45\1\303"+
    "\1\45\1\0\2\45\1\303\7\45\1\u011a\1\u011b\1\u011a"+
    "\1\u011c\1\u011a\1\u011d\1\45\1\304\1\45\1\u011e\1\u011c"+
    "\2\0\1\303\2\45\6\u011a\1\45\3\u011a\2\45\2\u011a"+
    "\6\45\4\0\1\303\1\304\1\0\1\305\2\45\1\303"+
    "\1\45\1\0\2\45\1\303\6\45\1\u011f\7\45\1\304"+
    "\3\45\2\0\1\303\25\45\43\0\1\u0120\73\0\1\u0121"+
    "\26\0\3\217\2\0\66\217\4\0\1\221\113\0\1\u0122"+
    "\113\0\1\u0123\24\0\5\226\1\0\1\226\2\0\2\226"+
    "\1\0\1\226\1\0\2\226\1\0\24\226\1\0\32\226"+
    "\1\0\1\226\1\311\1\0\2\226\1\0\1\226\1\0"+
    "\2\226\1\0\24\226\1\0\32\226\1\0\1\226\1\344"+
    "\1\0\2\226\1\0\1\226\1\0\2\226\1\0\24\226"+
    "\1\0\25\226\13\231\1\0\57\231\3\236\2\0\66\236"+
    "\1\237\7\0\1\u0124\2\237\1\0\1\237\1\0\2\237"+
    "\1\0\16\237\1\0\3\237\3\0\25\237\4\0\1\240"+
    "\66\0\3\237\2\0\66\237\7\0\1\u0125\52\0\1\u0126"+
    "\10\0\3\250\1\u0127\1\250\1\0\2\250\1\u0128\7\250"+
    "\1\0\24\250\1\0\25\250\4\0\1\250\66\0\3\250"+
    "\1\u0129\1\u012a\66\250\5\254\1\0\1\254\2\0\2\254"+
    "\1\0\1\254\1\0\2\254\1\0\24\254\1\0\25\254"+
    "\3\0\1\u0129\1\u012a\103\0\1\u012b\55\0\5\262\2\0"+
    "\1\262\1\0\2\262\2\0\3\262\1\0\16\262\1\0"+
    "\5\262\1\0\15\262\1\0\7\262\13\263\1\0\57\263"+
    "\16\0\2\265\6\0\1\265\1\0\6\265\2\0\3\265"+
    "\5\0\12\265\2\0\2\265\4\0\1\265\1\266\2\267"+
    "\2\0\3\267\2\266\1\271\1\267\1\266\1\267\2\266"+
    "\1\267\16\266\1\267\3\266\3\267\25\266\10\0\1\u012c"+
    "\70\0\1\u012c\1\0\1\u012c\26\0\1\u012c\33\0\1\266"+
    "\2\267\2\0\3\267\2\266\1\271\1\267\1\266\1\267"+
    "\2\266\1\267\16\266\1\267\3\266\3\267\1\u012d\24\266"+
    "\1\272\2\273\2\0\3\273\3\272\1\273\1\272\1\273"+
    "\2\272\1\273\16\272\1\273\3\272\3\273\1\272\1\275"+
    "\23\272\10\0\1\u012e\70\0\1\u012e\1\0\1\u012e\26\0"+
    "\1\u012e\45\0\1\276\60\0\1\300\2\301\2\0\3\301"+
    "\3\300\1\301\1\300\1\301\2\300\1\301\16\300\1\301"+
    "\3\300\3\301\25\300\10\0\1\u012f\70\0\1\u012f\1\0"+
    "\1\u012f\26\0\1\u012f\42\0\1\u0130\126\0\1\u0131\33\0"+
    "\1\316\75\0\1\317\63\0\3\57\2\0\66\57\1\322"+
    "\4\0\1\u0132\1\u0133\1\0\1\u0134\2\322\1\u0132\1\322"+
    "\1\0\2\322\1\u0132\16\322\1\u0133\3\322\2\0\1\u0132"+
    "\25\322\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\45\1\303\16\45\1\304"+
    "\3\45\2\0\1\303\25\45\1\324\4\0\1\u0135\1\u0136"+
    "\1\0\1\u0137\2\324\1\u0135\1\324\1\0\2\324\1\u0135"+
    "\16\324\1\u0136\3\324\2\0\1\u0135\25\324\7\0\1\u0138"+
    "\101\0\2\330\6\0\1\330\1\0\6\330\2\0\3\330"+
    "\5\0\12\330\2\0\2\330\4\0\1\330\1\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\322\1\303\1\45"+
    "\1\0\2\62\1\303\5\45\1\62\1\45\6\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\2\62\1\u0139"+
    "\3\62\1\u013a\3\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\6\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\1\62"+
    "\1\u013b\10\62\2\45\2\62\4\45\1\62\1\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\322\1\303\1\45"+
    "\1\0\2\62\1\303\5\45\1\62\1\45\6\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\3\62\1\u013c"+
    "\6\62\2\45\2\62\4\45\1\62\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\6\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\1\62\1\u013d\10\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\6\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\4\62\1\u013e\5\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\3\62\1\u013f\2\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\12\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\1\62\1\u0140\4\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\12\62\2\45\2\62\4\45"+
    "\1\62\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\4\62\1\u0141\1\62\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\6\62\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\1\336\11\62\2\45\2\62\4\45\1\62\6\0\1\u0142"+
    "\64\0\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\6\62\1\45\1\304\3\62\2\0\1\303\1\323"+
    "\1\324\3\62\1\u0143\6\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\6\62\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\2\62\1\u0144\7\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\6\62"+
    "\1\45\1\304\1\62\1\u0145\1\62\2\0\1\303\1\323"+
    "\1\324\12\62\2\45\2\62\4\45\1\62\1\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\322\1\303\1\45"+
    "\1\0\2\62\1\303\5\45\1\62\1\45\6\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\1\u0146\11\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\3\62\1\u0147\2\62\1\45"+
    "\1\304\3\62\2\0\1\303\1\323\1\324\12\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\4\62\1\u0148\1\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\12\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\6\62\1\45\1\304\3\62\2\0\1\303"+
    "\1\323\1\324\6\62\1\u0149\3\62\2\45\2\62\4\45"+
    "\1\62\3\135\2\0\66\135\12\0\1\u014a\76\0\1\u014b"+
    "\11\0\6\u014b\2\0\3\u014b\5\0\12\u014b\2\0\2\u014b"+
    "\17\0\1\u014c\76\0\1\u014d\11\0\6\u014d\2\0\3\u014d"+
    "\5\0\12\u014d\2\0\2\u014d\16\0\1\u014e\5\0\1\117"+
    "\6\0\1\117\43\0\1\117\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\2\45\1\303\1\45\1\0\2\45\1\303"+
    "\11\45\1\u0118\4\45\1\304\1\u0118\2\45\2\0\1\303"+
    "\26\45\4\0\1\303\1\304\1\0\1\305\2\45\1\303"+
    "\1\45\1\0\2\45\1\303\10\45\1\u0118\2\45\1\u0118"+
    "\2\45\1\304\3\45\2\0\1\303\26\45\4\0\1\303"+
    "\1\304\1\0\1\305\2\45\1\303\1\45\1\0\2\45"+
    "\1\303\13\45\1\u0118\2\45\1\304\3\45\2\0\1\303"+
    "\25\45\7\0\1\u014f\63\0\3\250\2\0\66\250\4\0"+
    "\1\u012a\66\0\1\266\2\267\2\0\4\267\1\266\1\271"+
    "\1\267\1\266\1\267\2\266\1\267\16\266\1\267\3\266"+
    "\3\267\25\266\1\272\2\273\2\0\4\273\2\272\1\273"+
    "\1\272\1\273\2\272\1\273\16\272\1\273\3\272\3\273"+
    "\1\272\1\275\23\272\1\300\2\301\2\0\4\301\2\300"+
    "\1\301\1\300\1\301\2\300\1\301\16\300\1\301\3\300"+
    "\3\301\25\300\7\0\1\u0132\63\0\3\322\2\0\66\322"+
    "\7\0\1\u0135\63\0\3\324\2\0\66\324\1\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\322\1\303\1\45"+
    "\1\0\2\62\1\303\5\45\1\62\1\45\1\62\1\u0150"+
    "\4\62\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\12\62\2\45\2\62\4\45\1\62\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\2\62\1\u0151\3\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\12\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\6\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\1\u0152\11\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\5\62\1\u0153\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\6\62\1\45\1\304\1\62\1\u0141\1\62\2\0\1\303"+
    "\1\323\1\324\12\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\6\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\1\u0154"+
    "\11\62\2\45\2\62\4\45\1\62\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\3\62\1\u0155\2\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\12\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\6\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\4\62\1\u0156\5\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\1\62\1\u0157\4\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\12\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\1\62\1\u0158\4\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\12\62\2\45\2\62\4\45"+
    "\1\62\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\6\62\1\45\1\304\1\62\1\u0159\1\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\1\62\1\u015a\4\62\1\45\1\304\3\62\2\0\1\303"+
    "\1\323\1\324\12\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\6\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\6\62"+
    "\1\u015b\3\62\2\45\2\62\4\45\1\62\1\45\4\0"+
    "\1\303\1\304\1\0\1\305\1\45\1\322\1\303\1\45"+
    "\1\0\2\62\1\303\5\45\1\62\1\45\6\62\1\45"+
    "\1\304\1\62\1\u015c\1\62\2\0\1\303\1\323\1\324"+
    "\12\62\2\45\2\62\4\45\1\62\16\0\2\u014b\6\0"+
    "\1\u014b\1\0\6\u014b\2\0\3\u014b\5\0\12\u014b\2\0"+
    "\2\u014b\4\0\1\u014b\16\0\2\u014d\6\0\1\u014d\1\0"+
    "\6\u014d\2\0\3\u014d\5\0\12\u014d\2\0\2\u014d\4\0"+
    "\1\u014d\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\6\62\1\45\1\304\3\62\2\0\1\303\1\323"+
    "\1\324\4\62\1\350\5\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\4\62\1\u015d\1\62\1\45\1\304\3\62\2\0\1\303"+
    "\1\323\1\324\12\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\5\62"+
    "\1\u015e\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\12\62\2\45\2\62\4\45\1\62\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\6\62\1\45\1\304"+
    "\3\62\2\0\1\303\1\323\1\324\1\u015f\11\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\6\62\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\1\62\1\u0160\10\62\2\45\2\62"+
    "\4\45\1\62\1\45\4\0\1\303\1\304\1\0\1\305"+
    "\1\45\1\322\1\303\1\45\1\0\2\62\1\303\5\45"+
    "\1\62\1\45\6\62\1\45\1\304\1\62\1\u0161\1\62"+
    "\2\0\1\303\1\323\1\324\12\62\2\45\2\62\4\45"+
    "\1\62\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\1\62\1\u0162\4\62\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\6\62\1\45\1\304\3\62\2\0\1\303\1\323\1\324"+
    "\6\62\1\u0163\3\62\2\45\2\62\4\45\1\62\1\45"+
    "\4\0\1\303\1\304\1\0\1\305\1\45\1\322\1\303"+
    "\1\45\1\0\2\62\1\303\5\45\1\62\1\45\6\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\1\u0164"+
    "\11\62\2\45\2\62\4\45\1\62\1\45\4\0\1\303"+
    "\1\304\1\0\1\305\1\45\1\322\1\303\1\45\1\0"+
    "\2\62\1\303\5\45\1\62\1\45\4\62\1\u0164\1\62"+
    "\1\45\1\304\3\62\2\0\1\303\1\323\1\324\12\62"+
    "\2\45\2\62\4\45\1\62\1\45\4\0\1\303\1\304"+
    "\1\0\1\305\1\45\1\322\1\303\1\45\1\0\2\62"+
    "\1\303\5\45\1\62\1\45\6\62\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\4\62\1\u0165\5\62\2\45"+
    "\2\62\4\45\1\62\1\45\4\0\1\303\1\304\1\0"+
    "\1\305\1\45\1\322\1\303\1\45\1\0\2\62\1\303"+
    "\5\45\1\62\1\45\5\62\1\u0166\1\45\1\304\3\62"+
    "\2\0\1\303\1\323\1\324\12\62\2\45\2\62\4\45"+
    "\1\62\1\45\4\0\1\303\1\304\1\0\1\305\1\45"+
    "\1\322\1\303\1\45\1\0\2\62\1\303\5\45\1\62"+
    "\1\45\1\62\1\u0141\4\62\1\45\1\304\3\62\2\0"+
    "\1\303\1\323\1\324\12\62\2\45\2\62\4\45\1\62"+
    "\1\45\4\0\1\303\1\304\1\0\1\305\1\45\1\322"+
    "\1\303\1\45\1\0\2\62\1\303\5\45\1\62\1\45"+
    "\3\62\1\u0167\2\62\1\45\1\304\3\62\2\0\1\303"+
    "\1\323\1\324\12\62\2\45\2\62\4\45\1\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12390];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\5\0\1\1\24\0\3\1\1\11\1\1"+
    "\2\11\3\1\1\11\1\1\2\11\15\1\1\11\12\1"+
    "\1\11\1\1\1\11\3\1\7\11\1\1\1\11\6\1"+
    "\1\11\1\1\1\11\1\1\1\11\5\1\1\11\3\1"+
    "\2\11\5\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\5\11\1\1\1\11\11\1\1\11\1\1\1\11\2\1"+
    "\2\11\2\0\1\11\4\1\4\11\2\1\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\3\0\1\1\3\0\1\1\1\11\1\0\1\1\2\0"+
    "\1\11\2\0\1\1\6\11\1\0\2\11\2\0\5\1"+
    "\1\11\1\1\1\11\11\1\5\11\3\1\2\11\12\1"+
    "\12\11\2\0\1\1\10\11\1\0\1\11\1\1\5\11"+
    "\1\0\2\11\11\1\4\11\1\0\1\1\1\11\3\0"+
    "\2\11\1\0\1\1\1\0\1\1\3\11\2\0\1\11"+
    "\2\0\1\11\11\1\1\11\7\1\1\11\1\1\1\11"+
    "\1\1\2\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    public int getCharIndex() {
    	return this.yychar;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyBashLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 		return newEof();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(S_PE_NAME);
            }
          case 182: break;
          case 2: 
            { popState();
            }
          case 183: break;
          case 3: 
            { return wordPart( RULE_S_WORD_PART );
            }
          case 184: break;
          case 4: 
            { return operatorNewCommand( Semicolon );
            }
          case 185: break;
          case 5: 
            { return space();
            }
          case 186: break;
          case 6: 
            { return operator( INVALID_TOKEN_TYPE );
            }
          case 187: break;
          case 7: 
            { return newline();
            }
          case 188: break;
          case 8: 
            { pushState(S_DQ_STRING); return wordPart( QuotationMark );
            }
          case 189: break;
          case 9: 
            { return operator( GreaterThanSign );
            }
          case 190: break;
          case 10: 
            { currentLexerState.inCaseP=false; return leftParenthesis();
            }
          case 191: break;
          case 11: 
            { if( inWord() ) { return wordPart(RULE_WORD_PART);} else { yypushback(1); pushState(S_COMMENTS); }
            }
          case 192: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 34;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 35;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return equal();
            }
          case 193: break;
          case 13: 
            { pushState(S_SQ); return wordPart( Apostrophe );
            }
          case 194: break;
          case 14: 
            { return operatorNewCommand( RightParenthesis );
            }
          case 195: break;
          case 15: 
            { return name( false );
            }
          case 196: break;
          case 16: 
            { return number(RULE_I_NUMBER);
            }
          case 197: break;
          case 17: 
            { return wordPart( RULE_WORD_PART );
            }
          case 198: break;
          case 18: 
            { return keywordNewCommand( ExclamationMark , false );
            }
          case 199: break;
          case 19: 
            { return operator( LessThanSign );
            }
          case 200: break;
          case 20: 
            { return operatorNewCommand( Ampersand );
            }
          case 201: break;
          case 21: 
            { return operatorNewCommand( VerticalLine );
            }
          case 202: break;
          case 22: 
            { pushState(S_CS); Token token = wordPart( RULE_CS_START ); enterSubShell(); return token;
            }
          case 203: break;
          case 23: 
            { return keywordNewCommand( LeftCurlyBracket , false );
            }
          case 204: break;
          case 24: 
            { return keywordNewCommand( RightCurlyBracket , false );
            }
          case 205: break;
          case 25: 
            { yybegin(S_B_STRING); return wordPart( NumberSign );
            }
          case 206: break;
          case 26: 
            { yybegin(S_B_STRING); return wordPart( EqualsSign );
            }
          case 207: break;
          case 27: 
            { currentLexerState.canbeSolidus = true; yybegin(S_B_STRING); return wordPart( Solidus );
            }
          case 208: break;
          case 28: 
            { return wordPart( RULE_NAME );
            }
          case 209: break;
          case 29: 
            { return wordPart( RULE_I_NUMBER );
            }
          case 210: break;
          case 30: 
            { return wordPart( CommercialAt );
            }
          case 211: break;
          case 31: 
            { yybegin(S_B_STRING); return wordPart( QuestionMark );
            }
          case 212: break;
          case 32: 
            { return wordPart( Asterisk );
            }
          case 213: break;
          case 33: 
            { yybegin(S_B_STRING); return wordPart( HyphenMinus );
            }
          case 214: break;
          case 34: 
            { return wordPart( RightSquareBracket );
            }
          case 215: break;
          case 35: 
            { yybegin(S_B_STRING); return wordPart( PlusSign );
            }
          case 216: break;
          case 36: 
            { pushState(S_ARITH); return wordPart( LeftSquareBracket );
            }
          case 217: break;
          case 37: 
            { popState(); exitSubShell(); return wordPart( RightCurlyBracket);
            }
          case 218: break;
          case 38: 
            { yybegin(S_B_STRING); return wordPart( PercentSign );
            }
          case 219: break;
          case 39: 
            { yybegin(S_B_STRING); return wordPart( Comma );
            }
          case 220: break;
          case 40: 
            { yybegin(S_B_STRING); return wordPart( CircumflexAccent );
            }
          case 221: break;
          case 41: 
            { yybegin(S_B_ARITH); return wordPart( Colon );
            }
          case 222: break;
          case 42: 
            { popState(); return wordPart( QuotationMark );
            }
          case 223: break;
          case 43: 
            { popState(); exitSubShell(); return wordPart( RULE_CS_END );
            }
          case 224: break;
          case 44: 
            { return wordPart( GreaterThanSign );
            }
          case 225: break;
          case 45: 
            { pushState(S_ARITH_P); return wordPart( LeftParenthesis );
            }
          case 226: break;
          case 46: 
            { return wordPart( EqualsSign );
            }
          case 227: break;
          case 47: 
            { return wordPart( Solidus );
            }
          case 228: break;
          case 48: 
            { pushState( S_AFTER_ARITH_NAME ); return wordPart( RULE_NAME );
            }
          case 229: break;
          case 49: 
            { return wordPart( QuestionMark );
            }
          case 230: break;
          case 50: 
            { return wordPart( ExclamationMark );
            }
          case 231: break;
          case 51: 
            { return wordPart( HyphenMinus );
            }
          case 232: break;
          case 52: 
            { popState(); return wordPart( RightSquareBracket );
            }
          case 233: break;
          case 53: 
            { return wordPart( Tilde );
            }
          case 234: break;
          case 54: 
            { return wordPart( LessThanSign );
            }
          case 235: break;
          case 55: 
            { return wordPart( Ampersand );
            }
          case 236: break;
          case 56: 
            { return wordPart( VerticalLine );
            }
          case 237: break;
          case 57: 
            { return wordPart( PlusSign );
            }
          case 238: break;
          case 58: 
            { return wordPart( PercentSign );
            }
          case 239: break;
          case 59: 
            { return wordPart( Comma );
            }
          case 240: break;
          case 60: 
            { return wordPart( CircumflexAccent );
            }
          case 241: break;
          case 61: 
            { return wordPart( Colon );
            }
          case 242: break;
          case 62: 
            { return solidusInBString();
            }
          case 243: break;
          case 63: 
            { popState(); exitSubShell(); return wordPart( RightCurlyBracket );
            }
          case 244: break;
          case 64: 
            { yybegin(S_PE_NAME); return wordPart( NumberSign );
            }
          case 245: break;
          case 65: 
            { yybegin(S_PE_NAME); return wordPart( ExclamationMark);
            }
          case 246: break;
          case 66: 
            { return wordPart( Semicolon );
            }
          case 247: break;
          case 67: 
            { return spaceInCondition();
            }
          case 248: break;
          case 68: 
            { return binaryOperatorNotWord( RULE_C_B_OP );
            }
          case 249: break;
          case 69: 
            { pushState( S_COND_P ); return conditionExpressionSplit( LeftParenthesis );
            }
          case 250: break;
          case 70: 
            { return binaryOperator( RULE_C_B_OP );
            }
          case 251: break;
          case 71: 
            { pushState( S_REGULAR_P ); return wordPart( LeftParenthesis );
            }
          case 252: break;
          case 72: 
            { return hereDocPart();
            }
          case 253: break;
          case 73: 
            { return hereDocNewLine();
            }
          case 254: break;
          case 74: 
            { popState(); return wordPart( RightParenthesis );
            }
          case 255: break;
          case 75: 
            { popState(); return conditionExpressionSplit( RightParenthesis );
            }
          case 256: break;
          case 76: 
            { popState(); return wordPart( Apostrophe );
            }
          case 257: break;
          case 77: 
            { popState(); exitSubShell(); return wordPart( RightParenthesis );
            }
          case 258: break;
          case 78: 
            { popState(); Token token = wordPart(RightSquareBracket); exitSubShell();  return token;
            }
          case 259: break;
          case 79: 
            { yybegin(S_A_ARITH); return wordPart(LeftSquareBracket);
            }
          case 260: break;
          case 80: 
            { popState(); return comment();
            }
          case 261: break;
          case 81: 
            { appendHeredocWordPart();
            }
          case 262: break;
          case 82: 
            { popState(); yypushback(yylength()); return getHeredocWord();
            }
          case 263: break;
          case 83: 
            { return hereDocWordSpace();
            }
          case 264: break;
          case 84: 
            { pushState(S_HEREDOC_DQ); appendHeredocWordLength(); quoteHeredocWord();
            }
          case 265: break;
          case 85: 
            { pushState(S_HEREDOC_Q); appendHeredocWordLength(); quoteHeredocWord();
            }
          case 266: break;
          case 86: 
            { pushState(S_HEREDOC_CS); appendHeredocWordPart();
            }
          case 267: break;
          case 87: 
            { popState();  appendHeredocWordLength();
            }
          case 268: break;
          case 88: 
            { pushState(S_HEREDOC_DQ); appendHeredocWordLength();
            }
          case 269: break;
          case 89: 
            { pushState(S_HEREDOC_Q);appendHeredocWordLength();
            }
          case 270: break;
          case 90: 
            { popState();  appendHeredocWordPart();
            }
          case 271: break;
          case 91: 
            { popState(); appendHeredocWordLength();
            }
          case 272: break;
          case 92: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return wordPart( RULE_WORD_PART );
            }
          case 273: break;
          case 93: 
            { currentLexerState.inCaseP=true; return operator( SemicolonSemicolon );
            }
          case 274: break;
          case 94: 
            { currentLexerState.inCaseP=true; return operator( SemicolonAmpersand );
            }
          case 275: break;
          case 95: 
            { return operator( GreaterThanSignGreaterThanSign );
            }
          case 276: break;
          case 96: 
            { pushState(S_CS_P); enterSubShell(); return wordPart( GreaterThanSignLeftParenthesis );
            }
          case 277: break;
          case 97: 
            { return operator( GreaterThanSignAmpersand );
            }
          case 278: break;
          case 98: 
            { return operator( GreaterThanSignVerticalLine );
            }
          case 279: break;
          case 99: 
            { return operatorDParentheses();
            }
          case 280: break;
          case 100: 
            { return newToken( RULE_C_LINE, HIDDEN_CHANNEL );
            }
          case 281: break;
          case 101: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 31;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 32;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return name( true );
            }
          case 282: break;
          case 102: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 31;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 33;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { Token token = name(true); 
												if(token.getType() == RULE_NAME) {
													enterSubShell();
													pushState(S_A_ARITH_S);
												}
												return token;
            }
          case 283: break;
          case 103: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return wordPart( RULE_I_NUMBER );
            }
          case 284: break;
          case 104: 
            { pushState(S_CS_D); Token token = wordPart( RULE_CS_START ); enterSubShell(); return token;
            }
          case 285: break;
          case 105: 
            { return wordPart( RULE_VARIABLE );
            }
          case 286: break;
          case 106: 
            { pushState(S_PE_START); enterSubShell(); return wordPart( DollarSignLeftCurlyBracket );
            }
          case 287: break;
          case 107: 
            { currentLexerState.currentConditionExpression=null; return keyword( RightSquareBracketRightSquareBracket );
            }
          case 288: break;
          case 108: 
            { return keywordNewCommand( Fi );
            }
          case 289: break;
          case 109: 
            { return operator( LessThanSignGreaterThanSign );
            }
          case 290: break;
          case 110: 
            { pushState(S_CS_P); enterSubShell(); return wordPart( LessThanSignLeftParenthesis );
            }
          case 291: break;
          case 111: 
            { pushState(S_HERE_DOC_WORD); return operator( LessThanSignLessThanSign );
            }
          case 292: break;
          case 112: 
            { return operator( LessThanSignAmpersand );
            }
          case 293: break;
          case 113: 
            { return operator( LessThanSignVerticalLine );
            }
          case 294: break;
          case 114: 
            { return operator( AmpersandGreaterThanSign );
            }
          case 295: break;
          case 115: 
            { return operatorNewCommand( AmpersandAmpersand );
            }
          case 296: break;
          case 116: 
            { return operatorNewCommand( VerticalLineVerticalLine );
            }
          case 297: break;
          case 117: 
            { return keywordNewState( LeftSquareBracketLeftSquareBracket , false , S_COND );
            }
          case 298: break;
          case 118: 
            { return keywordNewCommand( Do );
            }
          case 299: break;
          case 119: 
            { return keywordNewCommand( If );
            }
          case 300: break;
          case 120: 
            { return keyword( In );
            }
          case 301: break;
          case 121: 
            { yybegin(S_B_STRING); return wordPart( NumberSignNumberSign );
            }
          case 302: break;
          case 122: 
            { currentLexerState.canbeSolidus = true; yybegin(S_B_STRING); return wordPart( SolidusSolidus );
            }
          case 303: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { return wordPart( LeftSquareBracket );
            }
          case 304: break;
          case 124: 
            { yybegin(S_B_STRING); return wordPart( PercentSignPercentSign );
            }
          case 305: break;
          case 125: 
            { yybegin(S_B_STRING); return wordPart( CommaComma );
            }
          case 306: break;
          case 126: 
            { yybegin(S_B_STRING); return wordPart( CircumflexAccentCircumflexAccent );
            }
          case 307: break;
          case 127: 
            { yybegin(S_B_STRING); return wordPart( ColonEqualsSign );
            }
          case 308: break;
          case 128: 
            { yybegin(S_B_STRING); return wordPart( ColonQuestionMark );
            }
          case 309: break;
          case 129: 
            { yybegin(S_B_STRING); return wordPart( ColonHyphenMinus );
            }
          case 310: break;
          case 130: 
            { yybegin(S_B_STRING); return wordPart( ColonPlusSign );
            }
          case 311: break;
          case 131: 
            { return wordPart( GreaterThanSignGreaterThanSign );
            }
          case 312: break;
          case 132: 
            { return wordPart( GreaterThanSignEqualsSign );
            }
          case 313: break;
          case 133: 
            { return wordPart( EqualsSignEqualsSign );
            }
          case 314: break;
          case 134: 
            { return wordPart( SolidusEqualsSign );
            }
          case 315: break;
          case 135: 
            { popState(); return wordPart( RightParenthesisRightParenthesis );
            }
          case 316: break;
          case 136: 
            { return wordPart( ExclamationMarkEqualsSign );
            }
          case 317: break;
          case 137: 
            { return wordPart( AsteriskEqualsSign );
            }
          case 318: break;
          case 138: 
            { return wordPart( AsteriskAsterisk );
            }
          case 319: break;
          case 139: 
            { return wordPart( HyphenMinusEqualsSign );
            }
          case 320: break;
          case 140: 
            { return wordPart( LessThanSignEqualsSign );
            }
          case 321: break;
          case 141: 
            { return wordPart( LessThanSignLessThanSign );
            }
          case 322: break;
          case 142: 
            { return wordPart( AmpersandEqualsSign );
            }
          case 323: break;
          case 143: 
            { return wordPart( AmpersandAmpersand );
            }
          case 324: break;
          case 144: 
            { return wordPart( VerticalLineEqualsSign );
            }
          case 325: break;
          case 145: 
            { return wordPart( VerticalLineVerticalLine );
            }
          case 326: break;
          case 146: 
            { return wordPart( PlusSignEqualsSign );
            }
          case 327: break;
          case 147: 
            { return wordPart( PercentSignEqualsSign );
            }
          case 328: break;
          case 148: 
            { return wordPart( CircumflexAccentEqualsSign );
            }
          case 329: break;
          case 149: 
            { Token type = binaryOperator( EqualsSignTilde ); pushStateUntilNextWord( S_REGULAR ); return type;
            }
          case 330: break;
          case 150: 
            { return unaryOperator( RULE_C_S_OP );
            }
          case 331: break;
          case 151: 
            { popUntil( S_COND ); currentLexerState.currentConditionExpression=null; return wordPart( RightSquareBracketRightSquareBracket );
            }
          case 332: break;
          case 152: 
            { return conditionExpressionSplit( AmpersandAmpersand );
            }
          case 333: break;
          case 153: 
            { return conditionExpressionSplit( VerticalLineVerticalLine );
            }
          case 334: break;
          case 154: 
            { popState(); return wordPart( HyphenMinusHyphenMinus );
            }
          case 335: break;
          case 155: 
            { popState(); return wordPart( PlusSignPlusSign );
            }
          case 336: break;
          case 156: 
            { pushState(S_HEREDOC_CS_P); appendHeredocWordPart();
            }
          case 337: break;
          case 157: 
            { pushState(S_HEREDOC_PE); appendHeredocWordPart();
            }
          case 338: break;
          case 158: 
            { 
            }
          case 339: break;
          case 159: 
            { popState();  /*12345*/ appendHeredocWordPart();
            }
          case 340: break;
          case 160: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return wordPart( RULE_WORD_PART );
            }
          case 341: break;
          case 161: 
            { currentLexerState.inCaseP=true; return operator( SemicolonSemicolonAmpersand );
            }
          case 342: break;
          case 162: 
            { pushState(S_ARITH); return wordPart( DollarSignLeftParenthesisLeftParenthesis );
            }
          case 343: break;
          case 163: 
            { return keyword( For );
            }
          case 344: break;
          case 164: 
            { return assignableWord();
            }
          case 345: break;
          case 165: 
            { return operator( AmpersandGreaterThanSignGreaterThanSign );
            }
          case 346: break;
          case 166: 
            { return wordPart( GreaterThanSignGreaterThanSignEqualsSign );
            }
          case 347: break;
          case 167: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return wordPart( HyphenMinusHyphenMinus );
            }
          case 348: break;
          case 168: 
            { return wordPart( LessThanSignLessThanSignEqualsSign );
            }
          case 349: break;
          case 169: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return wordPart( PlusSignPlusSign );
            }
          case 350: break;
          case 170: 
            { return wordPart( RULE_A_PREFIX );
            }
          case 351: break;
          case 171: 
            { pushState(S_HEREDOC_AE); appendHeredocWordPart();
            }
          case 352: break;
          case 172: 
            { return keywordNewCommand( Else );
            }
          case 353: break;
          case 173: 
            { return keywordNewCommand( Elif );
            }
          case 354: break;
          case 174: 
            { Token token = keywordNewCommand( Esac ); if(token.getType() == Esac) {currentLexerState.inCaseP=false;} return token;
            }
          case 355: break;
          case 175: 
            { return keywordNewCommand( Then );
            }
          case 356: break;
          case 176: 
            { Token token = keyword( Case ); if(token.getType() == Case) {currentLexerState.inCaseP=true;} return token;
            }
          case 357: break;
          case 177: 
            { return keywordNewCommand( Done );
            }
          case 358: break;
          case 178: 
            { return keywordNewCommand( -1 );
            }
          case 359: break;
          case 179: 
            { return keywordNewCommand( While );
            }
          case 360: break;
          case 180: 
            { return keyword( -1 );
            }
          case 361: break;
          case 181: 
            { return keyword( Function );
            }
          case 362: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
